/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = mantle.lib.Client.SwaggerDateConverter;

namespace mantle.lib.Model
{
    /// <summary>
    /// TrackerMultiAssetCreateRequest
    /// </summary>
    [DataContract]
    public partial class TrackerMultiAssetCreateRequest :  IEquatable<TrackerMultiAssetCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerMultiAssetCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrackerMultiAssetCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerMultiAssetCreateRequest" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="assetIds">assetIds.</param>
        /// <param name="assetDisplayNames">Will create an asset if none exists with that name, otherwise will use the existing asset.</param>
        public TrackerMultiAssetCreateRequest(string name = default(string), List<string> assetIds = default(List<string>), List<string> assetDisplayNames = default(List<string>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TrackerMultiAssetCreateRequest and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.AssetIds = assetIds;
            this.AssetDisplayNames = assetDisplayNames;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AssetIds
        /// </summary>
        [DataMember(Name="assetIds", EmitDefaultValue=false)]
        public List<string> AssetIds { get; set; }

        /// <summary>
        /// Will create an asset if none exists with that name, otherwise will use the existing asset
        /// </summary>
        /// <value>Will create an asset if none exists with that name, otherwise will use the existing asset</value>
        [DataMember(Name="assetDisplayNames", EmitDefaultValue=false)]
        public List<string> AssetDisplayNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackerMultiAssetCreateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AssetIds: ").Append(AssetIds).Append("\n");
            sb.Append("  AssetDisplayNames: ").Append(AssetDisplayNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackerMultiAssetCreateRequest);
        }

        /// <summary>
        /// Returns true if TrackerMultiAssetCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackerMultiAssetCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackerMultiAssetCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AssetIds == input.AssetIds ||
                    this.AssetIds != null &&
                    this.AssetIds.SequenceEqual(input.AssetIds)
                ) && 
                (
                    this.AssetDisplayNames == input.AssetDisplayNames ||
                    this.AssetDisplayNames != null &&
                    this.AssetDisplayNames.SequenceEqual(input.AssetDisplayNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.AssetIds != null)
                    hashCode = hashCode * 59 + this.AssetIds.GetHashCode();
                if (this.AssetDisplayNames != null)
                    hashCode = hashCode * 59 + this.AssetDisplayNames.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 200.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            yield break;
        }
    }

}
