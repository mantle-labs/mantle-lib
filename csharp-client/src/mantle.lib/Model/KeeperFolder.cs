/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace mantle.lib.Model
{
    /// <summary>
    /// KeeperFolder
    /// </summary>
    [DataContract]
    public partial class KeeperFolder :  IEquatable<KeeperFolder>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeeperFolder" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ClientId">ClientId.</param>
        /// <param name="SubscriptionId">SubscriptionId.</param>
        /// <param name="CreatedById">CreatedById.</param>
        /// <param name="CreatedByEmail">CreatedByEmail.</param>
        /// <param name="Name">Name.</param>
        /// <param name="FileQuantity">FileQuantity.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="ModificationDate">ModificationDate.</param>
        /// <param name="IsDeleted">IsDeleted.</param>
        public KeeperFolder(string Id = null, string ClientId = null, string SubscriptionId = null, string CreatedById = null, string CreatedByEmail = null, string Name = null, int? FileQuantity = null, DateTime? CreationDate = null, DateTime? ModificationDate = null, bool? IsDeleted = null)
        {
            this.Id = Id;
            this.ClientId = ClientId;
            this.SubscriptionId = SubscriptionId;
            this.CreatedById = CreatedById;
            this.CreatedByEmail = CreatedByEmail;
            this.Name = Name;
            this.FileQuantity = FileQuantity;
            this.CreationDate = CreationDate;
            this.ModificationDate = ModificationDate;
            this.IsDeleted = IsDeleted;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }
        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name="subscriptionId", EmitDefaultValue=false)]
        public string SubscriptionId { get; set; }
        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [DataMember(Name="createdById", EmitDefaultValue=false)]
        public string CreatedById { get; set; }
        /// <summary>
        /// Gets or Sets CreatedByEmail
        /// </summary>
        [DataMember(Name="createdByEmail", EmitDefaultValue=false)]
        public string CreatedByEmail { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets FileQuantity
        /// </summary>
        [DataMember(Name="fileQuantity", EmitDefaultValue=false)]
        public int? FileQuantity { get; set; }
        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }
        /// <summary>
        /// Gets or Sets ModificationDate
        /// </summary>
        [DataMember(Name="modificationDate", EmitDefaultValue=false)]
        public DateTime? ModificationDate { get; set; }
        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeeperFolder {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedByEmail: ").Append(CreatedByEmail).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FileQuantity: ").Append(FileQuantity).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ModificationDate: ").Append(ModificationDate).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as KeeperFolder);
        }

        /// <summary>
        /// Returns true if KeeperFolder instances are equal
        /// </summary>
        /// <param name="other">Instance of KeeperFolder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeeperFolder other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.SubscriptionId == other.SubscriptionId ||
                    this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(other.SubscriptionId)
                ) && 
                (
                    this.CreatedById == other.CreatedById ||
                    this.CreatedById != null &&
                    this.CreatedById.Equals(other.CreatedById)
                ) && 
                (
                    this.CreatedByEmail == other.CreatedByEmail ||
                    this.CreatedByEmail != null &&
                    this.CreatedByEmail.Equals(other.CreatedByEmail)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.FileQuantity == other.FileQuantity ||
                    this.FileQuantity != null &&
                    this.FileQuantity.Equals(other.FileQuantity)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.ModificationDate == other.ModificationDate ||
                    this.ModificationDate != null &&
                    this.ModificationDate.Equals(other.ModificationDate)
                ) && 
                (
                    this.IsDeleted == other.IsDeleted ||
                    this.IsDeleted != null &&
                    this.IsDeleted.Equals(other.IsDeleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.SubscriptionId != null)
                    hash = hash * 59 + this.SubscriptionId.GetHashCode();
                if (this.CreatedById != null)
                    hash = hash * 59 + this.CreatedById.GetHashCode();
                if (this.CreatedByEmail != null)
                    hash = hash * 59 + this.CreatedByEmail.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.FileQuantity != null)
                    hash = hash * 59 + this.FileQuantity.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.ModificationDate != null)
                    hash = hash * 59 + this.ModificationDate.GetHashCode();
                if (this.IsDeleted != null)
                    hash = hash * 59 + this.IsDeleted.GetHashCode();
                return hash;
            }
        }
    }

}
