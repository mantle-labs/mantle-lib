/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = mantle.lib.Client.SwaggerDateConverter;

namespace mantle.lib.Model
{
    /// <summary>
    /// KeeperFileVersion
    /// </summary>
    [DataContract]
    public partial class KeeperFileVersion :  IEquatable<KeeperFileVersion>
    {
        /// <summary>
        /// Defines BlockchainStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BlockchainStatusEnum
        {
            
            /// <summary>
            /// Enum Unconfirmed for value: Unconfirmed
            /// </summary>
            [EnumMember(Value = "Unconfirmed")]
            Unconfirmed = 1,
            
            /// <summary>
            /// Enum Confirmed for value: Confirmed
            /// </summary>
            [EnumMember(Value = "Confirmed")]
            Confirmed = 2,
            
            /// <summary>
            /// Enum Errored for value: Errored
            /// </summary>
            [EnumMember(Value = "Errored")]
            Errored = 3
        }

        /// <summary>
        /// Gets or Sets BlockchainStatus
        /// </summary>
        [DataMember(Name="blockchainStatus", EmitDefaultValue=false)]
        public BlockchainStatusEnum? BlockchainStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KeeperFileVersion" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="BlockchainVersionId">BlockchainVersionId.</param>
        /// <param name="ClientId">ClientId.</param>
        /// <param name="FileId">FileId.</param>
        /// <param name="FileName">FileName.</param>
        /// <param name="BlockchainStatus">BlockchainStatus.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="SizeByte">SizeByte.</param>
        /// <param name="Version">Version.</param>
        public KeeperFileVersion(string Id = default(string), string BlockchainVersionId = default(string), string ClientId = default(string), string FileId = default(string), string FileName = default(string), BlockchainStatusEnum? BlockchainStatus = default(BlockchainStatusEnum?), DateTime? CreationDate = default(DateTime?), long? SizeByte = default(long?), int? Version = default(int?))
        {
            this.Id = Id;
            this.BlockchainVersionId = BlockchainVersionId;
            this.ClientId = ClientId;
            this.FileId = FileId;
            this.FileName = FileName;
            this.BlockchainStatus = BlockchainStatus;
            this.CreationDate = CreationDate;
            this.SizeByte = SizeByte;
            this.Version = Version;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets BlockchainVersionId
        /// </summary>
        [DataMember(Name="blockchainVersionId", EmitDefaultValue=false)]
        public string BlockchainVersionId { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [DataMember(Name="fileId", EmitDefaultValue=false)]
        public string FileId { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }


        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets SizeByte
        /// </summary>
        [DataMember(Name="sizeByte", EmitDefaultValue=false)]
        public long? SizeByte { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeeperFileVersion {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BlockchainVersionId: ").Append(BlockchainVersionId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  BlockchainStatus: ").Append(BlockchainStatus).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  SizeByte: ").Append(SizeByte).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeeperFileVersion);
        }

        /// <summary>
        /// Returns true if KeeperFileVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of KeeperFileVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeeperFileVersion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BlockchainVersionId == input.BlockchainVersionId ||
                    (this.BlockchainVersionId != null &&
                    this.BlockchainVersionId.Equals(input.BlockchainVersionId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.BlockchainStatus == input.BlockchainStatus ||
                    (this.BlockchainStatus != null &&
                    this.BlockchainStatus.Equals(input.BlockchainStatus))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.SizeByte == input.SizeByte ||
                    (this.SizeByte != null &&
                    this.SizeByte.Equals(input.SizeByte))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BlockchainVersionId != null)
                    hashCode = hashCode * 59 + this.BlockchainVersionId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.FileId != null)
                    hashCode = hashCode * 59 + this.FileId.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.BlockchainStatus != null)
                    hashCode = hashCode * 59 + this.BlockchainStatus.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.SizeByte != null)
                    hashCode = hashCode * 59 + this.SizeByte.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }
    }

}
