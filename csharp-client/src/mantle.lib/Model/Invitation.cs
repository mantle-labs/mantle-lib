/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace mantle.lib.Model
{
    /// <summary>
    /// Invitation
    /// </summary>
    [DataContract]
    public partial class Invitation :  IEquatable<Invitation>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Pending for "Pending"
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending,
            
            /// <summary>
            /// Enum Accepted for "Accepted"
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted,
            
            /// <summary>
            /// Enum Deleted for "Deleted"
            /// </summary>
            [EnumMember(Value = "Deleted")]
            Deleted
        }


        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RolesEnum
        {
            
            /// <summary>
            /// Enum MCKeeperAdmin for "MCKeeperAdmin"
            /// </summary>
            [EnumMember(Value = "MCKeeperAdmin")]
            MCKeeperAdmin,
            
            /// <summary>
            /// Enum MCBilling for "MCBilling"
            /// </summary>
            [EnumMember(Value = "MCBilling")]
            MCBilling,
            
            /// <summary>
            /// Enum MCUserAdmin for "MCUserAdmin"
            /// </summary>
            [EnumMember(Value = "MCUserAdmin")]
            MCUserAdmin,
            
            /// <summary>
            /// Enum MCTrackerAdmin for "MCTrackerAdmin"
            /// </summary>
            [EnumMember(Value = "MCTrackerAdmin")]
            MCTrackerAdmin,
            
            /// <summary>
            /// Enum MCTrackerUser for "MCTrackerUser"
            /// </summary>
            [EnumMember(Value = "MCTrackerUser")]
            MCTrackerUser,
            
            /// <summary>
            /// Enum MCSealerAdmin for "MCSealerAdmin"
            /// </summary>
            [EnumMember(Value = "MCSealerAdmin")]
            MCSealerAdmin,
            
            /// <summary>
            /// Enum MCSealerUser for "MCSealerUser"
            /// </summary>
            [EnumMember(Value = "MCSealerUser")]
            MCSealerUser,
            
            /// <summary>
            /// Enum MCAdmin for "MCAdmin"
            /// </summary>
            [EnumMember(Value = "MCAdmin")]
            MCAdmin,
            
            /// <summary>
            /// Enum MCBunkerUser for "MCBunkerUser"
            /// </summary>
            [EnumMember(Value = "MCBunkerUser")]
            MCBunkerUser,
            
            /// <summary>
            /// Enum MCBunkerAdmin for "MCBunkerAdmin"
            /// </summary>
            [EnumMember(Value = "MCBunkerAdmin")]
            MCBunkerAdmin
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<RolesEnum> Roles { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invitation" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ClientId">ClientId.</param>
        /// <param name="CreatedBy">CreatedBy.</param>
        /// <param name="NewUserEmail">NewUserEmail.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Roles">Roles.</param>
        /// <param name="CreationDateTime">CreationDateTime.</param>
        public Invitation(string Id = null, string ClientId = null, string CreatedBy = null, string NewUserEmail = null, StatusEnum? Status = null, List<RolesEnum> Roles = null, DateTime? CreationDateTime = null)
        {
            this.Id = Id;
            this.ClientId = ClientId;
            this.CreatedBy = CreatedBy;
            this.NewUserEmail = NewUserEmail;
            this.Status = Status;
            this.Roles = Roles;
            this.CreationDateTime = CreationDateTime;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets NewUserEmail
        /// </summary>
        [DataMember(Name="newUserEmail", EmitDefaultValue=false)]
        public string NewUserEmail { get; set; }
        /// <summary>
        /// Gets or Sets CreationDateTime
        /// </summary>
        [DataMember(Name="creationDateTime", EmitDefaultValue=false)]
        public DateTime? CreationDateTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invitation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  NewUserEmail: ").Append(NewUserEmail).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Invitation);
        }

        /// <summary>
        /// Returns true if Invitation instances are equal
        /// </summary>
        /// <param name="other">Instance of Invitation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invitation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    this.NewUserEmail == other.NewUserEmail ||
                    this.NewUserEmail != null &&
                    this.NewUserEmail.Equals(other.NewUserEmail)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    this.CreationDateTime == other.CreationDateTime ||
                    this.CreationDateTime != null &&
                    this.CreationDateTime.Equals(other.CreationDateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                if (this.NewUserEmail != null)
                    hash = hash * 59 + this.NewUserEmail.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                if (this.CreationDateTime != null)
                    hash = hash * 59 + this.CreationDateTime.GetHashCode();
                return hash;
            }
        }
    }

}
