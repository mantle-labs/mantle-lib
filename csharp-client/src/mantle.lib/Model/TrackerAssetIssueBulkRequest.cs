/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = mantle.lib.Client.SwaggerDateConverter;

namespace mantle.lib.Model
{
    /// <summary>
    /// TrackerAssetIssueBulkRequest
    /// </summary>
    [DataContract]
    public partial class TrackerAssetIssueBulkRequest :  IEquatable<TrackerAssetIssueBulkRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerAssetIssueBulkRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrackerAssetIssueBulkRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerAssetIssueBulkRequest" /> class.
        /// </summary>
        /// <param name="assetId">assetId (required).</param>
        /// <param name="ownedId">ownedId.</param>
        /// <param name="recipientEmail">recipientEmail (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="metaData">metaData.</param>
        public TrackerAssetIssueBulkRequest(string assetId = default(string), string ownedId = default(string), string recipientEmail = default(string), int? amount = default(int?), string metaData = default(string))
        {
            // to ensure "assetId" is required (not null)
            if (assetId == null)
            {
                throw new InvalidDataException("assetId is a required property for TrackerAssetIssueBulkRequest and cannot be null");
            }
            else
            {
                this.AssetId = assetId;
            }
            // to ensure "recipientEmail" is required (not null)
            if (recipientEmail == null)
            {
                throw new InvalidDataException("recipientEmail is a required property for TrackerAssetIssueBulkRequest and cannot be null");
            }
            else
            {
                this.RecipientEmail = recipientEmail;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for TrackerAssetIssueBulkRequest and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            this.OwnedId = ownedId;
            this.MetaData = metaData;
        }
        
        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name="assetId", EmitDefaultValue=false)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets OwnedId
        /// </summary>
        [DataMember(Name="ownedId", EmitDefaultValue=false)]
        public string OwnedId { get; set; }

        /// <summary>
        /// Gets or Sets RecipientEmail
        /// </summary>
        [DataMember(Name="recipientEmail", EmitDefaultValue=false)]
        public string RecipientEmail { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; set; }

        /// <summary>
        /// Gets or Sets MetaData
        /// </summary>
        [DataMember(Name="metaData", EmitDefaultValue=false)]
        public string MetaData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackerAssetIssueBulkRequest {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  OwnedId: ").Append(OwnedId).Append("\n");
            sb.Append("  RecipientEmail: ").Append(RecipientEmail).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackerAssetIssueBulkRequest);
        }

        /// <summary>
        /// Returns true if TrackerAssetIssueBulkRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackerAssetIssueBulkRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackerAssetIssueBulkRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.OwnedId == input.OwnedId ||
                    (this.OwnedId != null &&
                    this.OwnedId.Equals(input.OwnedId))
                ) && 
                (
                    this.RecipientEmail == input.RecipientEmail ||
                    (this.RecipientEmail != null &&
                    this.RecipientEmail.Equals(input.RecipientEmail))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.MetaData == input.MetaData ||
                    (this.MetaData != null &&
                    this.MetaData.Equals(input.MetaData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetId != null)
                    hashCode = hashCode * 59 + this.AssetId.GetHashCode();
                if (this.OwnedId != null)
                    hashCode = hashCode * 59 + this.OwnedId.GetHashCode();
                if (this.RecipientEmail != null)
                    hashCode = hashCode * 59 + this.RecipientEmail.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.MetaData != null)
                    hashCode = hashCode * 59 + this.MetaData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RecipientEmail (string) maxLength
            if(this.RecipientEmail != null && this.RecipientEmail.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecipientEmail, length must be less than 200.", new [] { "RecipientEmail" });
            }

            // RecipientEmail (string) minLength
            if(this.RecipientEmail != null && this.RecipientEmail.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecipientEmail, length must be greater than 0.", new [] { "RecipientEmail" });
            }

            // Amount (int?) maximum
            if(this.Amount > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value less than or equal to 2147483647.", new [] { "Amount" });
            }

            // Amount (int?) minimum
            if(this.Amount < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value greater than or equal to 1.", new [] { "Amount" });
            }

            yield break;
        }
    }

}
