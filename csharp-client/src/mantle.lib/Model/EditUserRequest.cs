/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace mantle.lib.Model
{
    /// <summary>
    /// EditUserRequest
    /// </summary>
    [DataContract]
    public partial class EditUserRequest :  IEquatable<EditUserRequest>
    {

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RolesEnum
        {
            
            /// <summary>
            /// Enum MCKeeperAdmin for "MCKeeperAdmin"
            /// </summary>
            [EnumMember(Value = "MCKeeperAdmin")]
            MCKeeperAdmin,
            
            /// <summary>
            /// Enum MCBilling for "MCBilling"
            /// </summary>
            [EnumMember(Value = "MCBilling")]
            MCBilling,
            
            /// <summary>
            /// Enum MCUserAdmin for "MCUserAdmin"
            /// </summary>
            [EnumMember(Value = "MCUserAdmin")]
            MCUserAdmin,
            
            /// <summary>
            /// Enum MCTrackerAdmin for "MCTrackerAdmin"
            /// </summary>
            [EnumMember(Value = "MCTrackerAdmin")]
            MCTrackerAdmin,
            
            /// <summary>
            /// Enum MCTrackerUser for "MCTrackerUser"
            /// </summary>
            [EnumMember(Value = "MCTrackerUser")]
            MCTrackerUser,
            
            /// <summary>
            /// Enum MCSealerAdmin for "MCSealerAdmin"
            /// </summary>
            [EnumMember(Value = "MCSealerAdmin")]
            MCSealerAdmin,
            
            /// <summary>
            /// Enum MCSealerUser for "MCSealerUser"
            /// </summary>
            [EnumMember(Value = "MCSealerUser")]
            MCSealerUser,
            
            /// <summary>
            /// Enum MCAdmin for "MCAdmin"
            /// </summary>
            [EnumMember(Value = "MCAdmin")]
            MCAdmin,
            
            /// <summary>
            /// Enum MCBunkerUser for "MCBunkerUser"
            /// </summary>
            [EnumMember(Value = "MCBunkerUser")]
            MCBunkerUser,
            
            /// <summary>
            /// Enum MCBunkerAdmin for "MCBunkerAdmin"
            /// </summary>
            [EnumMember(Value = "MCBunkerAdmin")]
            MCBunkerAdmin
        }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<RolesEnum> Roles { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EditUserRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EditUserRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EditUserRequest" /> class.
        /// </summary>
        /// <param name="FirstName">FirstName (required).</param>
        /// <param name="LastName">LastName (required).</param>
        /// <param name="Roles">Roles (required).</param>
        public EditUserRequest(string FirstName = null, string LastName = null, List<RolesEnum> Roles = null)
        {
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for EditUserRequest and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for EditUserRequest and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "Roles" is required (not null)
            if (Roles == null)
            {
                throw new InvalidDataException("Roles is a required property for EditUserRequest and cannot be null");
            }
            else
            {
                this.Roles = Roles;
            }
        }
        
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditUserRequest {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EditUserRequest);
        }

        /// <summary>
        /// Returns true if EditUserRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of EditUserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditUserRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(other.Roles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                return hash;
            }
        }
    }

}
