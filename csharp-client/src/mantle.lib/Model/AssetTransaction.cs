/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = mantle.lib.Client.SwaggerDateConverter;

namespace mantle.lib.Model
{
    /// <summary>
    /// AssetTransaction
    /// </summary>
    [DataContract]
    public partial class AssetTransaction :  IEquatable<AssetTransaction>
    {
        /// <summary>
        /// Defines BlockchainStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BlockchainStatusEnum
        {
            
            /// <summary>
            /// Enum Unconfirmed for value: Unconfirmed
            /// </summary>
            [EnumMember(Value = "Unconfirmed")]
            Unconfirmed = 1,
            
            /// <summary>
            /// Enum Confirmed for value: Confirmed
            /// </summary>
            [EnumMember(Value = "Confirmed")]
            Confirmed = 2,
            
            /// <summary>
            /// Enum Corrupted for value: Corrupted
            /// </summary>
            [EnumMember(Value = "Corrupted")]
            Corrupted = 3
        }

        /// <summary>
        /// Gets or Sets BlockchainStatus
        /// </summary>
        [DataMember(Name="blockchainStatus", EmitDefaultValue=false)]
        public BlockchainStatusEnum? BlockchainStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetTransaction" /> class.
        /// </summary>
        /// <param name="BlockchainStatus">BlockchainStatus.</param>
        /// <param name="AssetId">AssetId.</param>
        /// <param name="AssetDisplayName">AssetDisplayName.</param>
        /// <param name="Id">Id.</param>
        /// <param name="BatchId">BatchId.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="SenderDisplayName">SenderDisplayName.</param>
        /// <param name="RecipientDisplayName">RecipientDisplayName.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="IsReverted">IsReverted.</param>
        public AssetTransaction(BlockchainStatusEnum? BlockchainStatus = default(BlockchainStatusEnum?), string AssetId = default(string), string AssetDisplayName = default(string), string Id = default(string), string BatchId = default(string), double? Amount = default(double?), string SenderDisplayName = default(string), string RecipientDisplayName = default(string), long? Timestamp = default(long?), bool? IsReverted = default(bool?))
        {
            this.BlockchainStatus = BlockchainStatus;
            this.AssetId = AssetId;
            this.AssetDisplayName = AssetDisplayName;
            this.Id = Id;
            this.BatchId = BatchId;
            this.Amount = Amount;
            this.SenderDisplayName = SenderDisplayName;
            this.RecipientDisplayName = RecipientDisplayName;
            this.Timestamp = Timestamp;
            this.IsReverted = IsReverted;
        }
        

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name="assetId", EmitDefaultValue=false)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets AssetDisplayName
        /// </summary>
        [DataMember(Name="assetDisplayName", EmitDefaultValue=false)]
        public string AssetDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name="batchId", EmitDefaultValue=false)]
        public string BatchId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets SenderDisplayName
        /// </summary>
        [DataMember(Name="senderDisplayName", EmitDefaultValue=false)]
        public string SenderDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets RecipientDisplayName
        /// </summary>
        [DataMember(Name="recipientDisplayName", EmitDefaultValue=false)]
        public string RecipientDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets IsReverted
        /// </summary>
        [DataMember(Name="isReverted", EmitDefaultValue=false)]
        public bool? IsReverted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetTransaction {\n");
            sb.Append("  BlockchainStatus: ").Append(BlockchainStatus).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetDisplayName: ").Append(AssetDisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SenderDisplayName: ").Append(SenderDisplayName).Append("\n");
            sb.Append("  RecipientDisplayName: ").Append(RecipientDisplayName).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  IsReverted: ").Append(IsReverted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetTransaction);
        }

        /// <summary>
        /// Returns true if AssetTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BlockchainStatus == input.BlockchainStatus ||
                    (this.BlockchainStatus != null &&
                    this.BlockchainStatus.Equals(input.BlockchainStatus))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.AssetDisplayName == input.AssetDisplayName ||
                    (this.AssetDisplayName != null &&
                    this.AssetDisplayName.Equals(input.AssetDisplayName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.SenderDisplayName == input.SenderDisplayName ||
                    (this.SenderDisplayName != null &&
                    this.SenderDisplayName.Equals(input.SenderDisplayName))
                ) && 
                (
                    this.RecipientDisplayName == input.RecipientDisplayName ||
                    (this.RecipientDisplayName != null &&
                    this.RecipientDisplayName.Equals(input.RecipientDisplayName))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.IsReverted == input.IsReverted ||
                    (this.IsReverted != null &&
                    this.IsReverted.Equals(input.IsReverted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockchainStatus != null)
                    hashCode = hashCode * 59 + this.BlockchainStatus.GetHashCode();
                if (this.AssetId != null)
                    hashCode = hashCode * 59 + this.AssetId.GetHashCode();
                if (this.AssetDisplayName != null)
                    hashCode = hashCode * 59 + this.AssetDisplayName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BatchId != null)
                    hashCode = hashCode * 59 + this.BatchId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.SenderDisplayName != null)
                    hashCode = hashCode * 59 + this.SenderDisplayName.GetHashCode();
                if (this.RecipientDisplayName != null)
                    hashCode = hashCode * 59 + this.RecipientDisplayName.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.IsReverted != null)
                    hashCode = hashCode * 59 + this.IsReverted.GetHashCode();
                return hashCode;
            }
        }
    }

}
