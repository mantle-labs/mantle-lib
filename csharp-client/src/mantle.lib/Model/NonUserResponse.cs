/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = mantle.lib.Client.SwaggerDateConverter;

namespace mantle.lib.Model
{
    /// <summary>
    /// NonUserResponse
    /// </summary>
    [DataContract]
    public partial class NonUserResponse :  IEquatable<NonUserResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Unconfirmed for value: Unconfirmed
            /// </summary>
            [EnumMember(Value = "Unconfirmed")]
            Unconfirmed = 1,
            
            /// <summary>
            /// Enum Confirmed for value: Confirmed
            /// </summary>
            [EnumMember(Value = "Confirmed")]
            Confirmed = 2,
            
            /// <summary>
            /// Enum Corrupted for value: Corrupted
            /// </summary>
            [EnumMember(Value = "Corrupted")]
            Corrupted = 3
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NonUserResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="status">status.</param>
        /// <param name="ownerIdentityId">ownerIdentityId.</param>
        /// <param name="ownerIdentityDisplayName">ownerIdentityDisplayName.</param>
        /// <param name="ownedIdentityId">ownedIdentityId.</param>
        /// <param name="ownedIdentityDisplayName">ownedIdentityDisplayName.</param>
        /// <param name="timestamp">timestamp.</param>
        public NonUserResponse(string id = default(string), StatusEnum? status = default(StatusEnum?), string ownerIdentityId = default(string), string ownerIdentityDisplayName = default(string), string ownedIdentityId = default(string), string ownedIdentityDisplayName = default(string), long? timestamp = default(long?))
        {
            this.Id = id;
            this.Status = status;
            this.OwnerIdentityId = ownerIdentityId;
            this.OwnerIdentityDisplayName = ownerIdentityDisplayName;
            this.OwnedIdentityId = ownedIdentityId;
            this.OwnedIdentityDisplayName = ownedIdentityDisplayName;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Gets or Sets OwnerIdentityId
        /// </summary>
        [DataMember(Name="ownerIdentityId", EmitDefaultValue=false)]
        public string OwnerIdentityId { get; set; }

        /// <summary>
        /// Gets or Sets OwnerIdentityDisplayName
        /// </summary>
        [DataMember(Name="ownerIdentityDisplayName", EmitDefaultValue=false)]
        public string OwnerIdentityDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets OwnedIdentityId
        /// </summary>
        [DataMember(Name="ownedIdentityId", EmitDefaultValue=false)]
        public string OwnedIdentityId { get; set; }

        /// <summary>
        /// Gets or Sets OwnedIdentityDisplayName
        /// </summary>
        [DataMember(Name="ownedIdentityDisplayName", EmitDefaultValue=false)]
        public string OwnedIdentityDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NonUserResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OwnerIdentityId: ").Append(OwnerIdentityId).Append("\n");
            sb.Append("  OwnerIdentityDisplayName: ").Append(OwnerIdentityDisplayName).Append("\n");
            sb.Append("  OwnedIdentityId: ").Append(OwnedIdentityId).Append("\n");
            sb.Append("  OwnedIdentityDisplayName: ").Append(OwnedIdentityDisplayName).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NonUserResponse);
        }

        /// <summary>
        /// Returns true if NonUserResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of NonUserResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NonUserResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.OwnerIdentityId == input.OwnerIdentityId ||
                    (this.OwnerIdentityId != null &&
                    this.OwnerIdentityId.Equals(input.OwnerIdentityId))
                ) && 
                (
                    this.OwnerIdentityDisplayName == input.OwnerIdentityDisplayName ||
                    (this.OwnerIdentityDisplayName != null &&
                    this.OwnerIdentityDisplayName.Equals(input.OwnerIdentityDisplayName))
                ) && 
                (
                    this.OwnedIdentityId == input.OwnedIdentityId ||
                    (this.OwnedIdentityId != null &&
                    this.OwnedIdentityId.Equals(input.OwnedIdentityId))
                ) && 
                (
                    this.OwnedIdentityDisplayName == input.OwnedIdentityDisplayName ||
                    (this.OwnedIdentityDisplayName != null &&
                    this.OwnedIdentityDisplayName.Equals(input.OwnedIdentityDisplayName))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.OwnerIdentityId != null)
                    hashCode = hashCode * 59 + this.OwnerIdentityId.GetHashCode();
                if (this.OwnerIdentityDisplayName != null)
                    hashCode = hashCode * 59 + this.OwnerIdentityDisplayName.GetHashCode();
                if (this.OwnedIdentityId != null)
                    hashCode = hashCode * 59 + this.OwnedIdentityId.GetHashCode();
                if (this.OwnedIdentityDisplayName != null)
                    hashCode = hashCode * 59 + this.OwnedIdentityDisplayName.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
