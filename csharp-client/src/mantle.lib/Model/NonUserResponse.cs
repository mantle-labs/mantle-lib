/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace mantle.lib.Model
{
    /// <summary>
    /// NonUserResponse
    /// </summary>
    [DataContract]
    public partial class NonUserResponse :  IEquatable<NonUserResponse>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Unconfirmed for "Unconfirmed"
            /// </summary>
            [EnumMember(Value = "Unconfirmed")]
            Unconfirmed,
            
            /// <summary>
            /// Enum Confirmed for "Confirmed"
            /// </summary>
            [EnumMember(Value = "Confirmed")]
            Confirmed,
            
            /// <summary>
            /// Enum Corrupted for "Corrupted"
            /// </summary>
            [EnumMember(Value = "Corrupted")]
            Corrupted
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NonUserResponse" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Status">Status.</param>
        /// <param name="OwnerIdentityId">OwnerIdentityId.</param>
        /// <param name="OwnerIdentityDisplayName">OwnerIdentityDisplayName.</param>
        /// <param name="OwnedIdentityId">OwnedIdentityId.</param>
        /// <param name="OwnedIdentityDisplayName">OwnedIdentityDisplayName.</param>
        /// <param name="Timestamp">Timestamp.</param>
        public NonUserResponse(string Id = null, StatusEnum? Status = null, string OwnerIdentityId = null, string OwnerIdentityDisplayName = null, string OwnedIdentityId = null, string OwnedIdentityDisplayName = null, long? Timestamp = null)
        {
            this.Id = Id;
            this.Status = Status;
            this.OwnerIdentityId = OwnerIdentityId;
            this.OwnerIdentityDisplayName = OwnerIdentityDisplayName;
            this.OwnedIdentityId = OwnedIdentityId;
            this.OwnedIdentityDisplayName = OwnedIdentityDisplayName;
            this.Timestamp = Timestamp;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets OwnerIdentityId
        /// </summary>
        [DataMember(Name="ownerIdentityId", EmitDefaultValue=false)]
        public string OwnerIdentityId { get; set; }
        /// <summary>
        /// Gets or Sets OwnerIdentityDisplayName
        /// </summary>
        [DataMember(Name="ownerIdentityDisplayName", EmitDefaultValue=false)]
        public string OwnerIdentityDisplayName { get; set; }
        /// <summary>
        /// Gets or Sets OwnedIdentityId
        /// </summary>
        [DataMember(Name="ownedIdentityId", EmitDefaultValue=false)]
        public string OwnedIdentityId { get; set; }
        /// <summary>
        /// Gets or Sets OwnedIdentityDisplayName
        /// </summary>
        [DataMember(Name="ownedIdentityDisplayName", EmitDefaultValue=false)]
        public string OwnedIdentityDisplayName { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NonUserResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OwnerIdentityId: ").Append(OwnerIdentityId).Append("\n");
            sb.Append("  OwnerIdentityDisplayName: ").Append(OwnerIdentityDisplayName).Append("\n");
            sb.Append("  OwnedIdentityId: ").Append(OwnedIdentityId).Append("\n");
            sb.Append("  OwnedIdentityDisplayName: ").Append(OwnedIdentityDisplayName).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NonUserResponse);
        }

        /// <summary>
        /// Returns true if NonUserResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of NonUserResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NonUserResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.OwnerIdentityId == other.OwnerIdentityId ||
                    this.OwnerIdentityId != null &&
                    this.OwnerIdentityId.Equals(other.OwnerIdentityId)
                ) && 
                (
                    this.OwnerIdentityDisplayName == other.OwnerIdentityDisplayName ||
                    this.OwnerIdentityDisplayName != null &&
                    this.OwnerIdentityDisplayName.Equals(other.OwnerIdentityDisplayName)
                ) && 
                (
                    this.OwnedIdentityId == other.OwnedIdentityId ||
                    this.OwnedIdentityId != null &&
                    this.OwnedIdentityId.Equals(other.OwnedIdentityId)
                ) && 
                (
                    this.OwnedIdentityDisplayName == other.OwnedIdentityDisplayName ||
                    this.OwnedIdentityDisplayName != null &&
                    this.OwnedIdentityDisplayName.Equals(other.OwnedIdentityDisplayName)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.OwnerIdentityId != null)
                    hash = hash * 59 + this.OwnerIdentityId.GetHashCode();
                if (this.OwnerIdentityDisplayName != null)
                    hash = hash * 59 + this.OwnerIdentityDisplayName.GetHashCode();
                if (this.OwnedIdentityId != null)
                    hash = hash * 59 + this.OwnedIdentityId.GetHashCode();
                if (this.OwnedIdentityDisplayName != null)
                    hash = hash * 59 + this.OwnedIdentityDisplayName.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                return hash;
            }
        }
    }

}
