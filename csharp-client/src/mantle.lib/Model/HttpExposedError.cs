/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace mantle.lib.Model
{
    /// <summary>
    /// HttpExposedError
    /// </summary>
    [DataContract]
    public partial class HttpExposedError :  IEquatable<HttpExposedError>
    {
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            
            /// <summary>
            /// Enum CoreUnhandled for "Core_Unhandled"
            /// </summary>
            [EnumMember(Value = "Core_Unhandled")]
            CoreUnhandled,
            
            /// <summary>
            /// Enum CoreWavesSpendingLimitReached for "Core_WavesSpendingLimitReached"
            /// </summary>
            [EnumMember(Value = "Core_WavesSpendingLimitReached")]
            CoreWavesSpendingLimitReached,
            
            /// <summary>
            /// Enum ClientConfigNotFound for "Client_ConfigNotFound"
            /// </summary>
            [EnumMember(Value = "Client_ConfigNotFound")]
            ClientConfigNotFound,
            
            /// <summary>
            /// Enum ClientConfigNotConfirmed for "Client_ConfigNotConfirmed"
            /// </summary>
            [EnumMember(Value = "Client_ConfigNotConfirmed")]
            ClientConfigNotConfirmed,
            
            /// <summary>
            /// Enum ClientConfigAlreadyExists for "Client_ConfigAlreadyExists"
            /// </summary>
            [EnumMember(Value = "Client_ConfigAlreadyExists")]
            ClientConfigAlreadyExists,
            
            /// <summary>
            /// Enum ClientProductAlreadyExists for "Client_ProductAlreadyExists"
            /// </summary>
            [EnumMember(Value = "Client_ProductAlreadyExists")]
            ClientProductAlreadyExists,
            
            /// <summary>
            /// Enum BreadcrumbingInvalidImageSize for "Breadcrumbing_InvalidImageSize"
            /// </summary>
            [EnumMember(Value = "Breadcrumbing_InvalidImageSize")]
            BreadcrumbingInvalidImageSize,
            
            /// <summary>
            /// Enum BreadcrumbingFileTypesDoNotMatch for "Breadcrumbing_FileTypesDoNotMatch"
            /// </summary>
            [EnumMember(Value = "Breadcrumbing_FileTypesDoNotMatch")]
            BreadcrumbingFileTypesDoNotMatch,
            
            /// <summary>
            /// Enum BreadcrumbingFileNotFound for "Breadcrumbing_FileNotFound"
            /// </summary>
            [EnumMember(Value = "Breadcrumbing_FileNotFound")]
            BreadcrumbingFileNotFound,
            
            /// <summary>
            /// Enum BreadcrumbingFileNotConfirmed for "Breadcrumbing_FileNotConfirmed"
            /// </summary>
            [EnumMember(Value = "Breadcrumbing_FileNotConfirmed")]
            BreadcrumbingFileNotConfirmed,
            
            /// <summary>
            /// Enum BreadcrumbingStackedFileNotConfirmed for "Breadcrumbing_StackedFileNotConfirmed"
            /// </summary>
            [EnumMember(Value = "Breadcrumbing_StackedFileNotConfirmed")]
            BreadcrumbingStackedFileNotConfirmed,
            
            /// <summary>
            /// Enum BreadcrumbingFileAlreadyExists for "Breadcrumbing_FileAlreadyExists"
            /// </summary>
            [EnumMember(Value = "Breadcrumbing_FileAlreadyExists")]
            BreadcrumbingFileAlreadyExists,
            
            /// <summary>
            /// Enum BreadcrumbingInvalidFileFormat for "Breadcrumbing_InvalidFileFormat"
            /// </summary>
            [EnumMember(Value = "Breadcrumbing_InvalidFileFormat")]
            BreadcrumbingInvalidFileFormat,
            
            /// <summary>
            /// Enum BreadcrumbingVersionNotFound for "Breadcrumbing_VersionNotFound"
            /// </summary>
            [EnumMember(Value = "Breadcrumbing_VersionNotFound")]
            BreadcrumbingVersionNotFound,
            
            /// <summary>
            /// Enum BreadcrumbingVersionNotConfirmed for "Breadcrumbing_VersionNotConfirmed"
            /// </summary>
            [EnumMember(Value = "Breadcrumbing_VersionNotConfirmed")]
            BreadcrumbingVersionNotConfirmed,
            
            /// <summary>
            /// Enum BreadcrumbingNotSupportedFileFormat for "Breadcrumbing_NotSupportedFileFormat"
            /// </summary>
            [EnumMember(Value = "Breadcrumbing_NotSupportedFileFormat")]
            BreadcrumbingNotSupportedFileFormat,
            
            /// <summary>
            /// Enum FactoryIssueAmountCantBeZero for "Factory_IssueAmountCantBeZero"
            /// </summary>
            [EnumMember(Value = "Factory_IssueAmountCantBeZero")]
            FactoryIssueAmountCantBeZero,
            
            /// <summary>
            /// Enum FactoryIssueAmountTooHigh for "Factory_IssueAmountTooHigh"
            /// </summary>
            [EnumMember(Value = "Factory_IssueAmountTooHigh")]
            FactoryIssueAmountTooHigh,
            
            /// <summary>
            /// Enum FactoryTransferAmountCantBeZero for "Factory_TransferAmountCantBeZero"
            /// </summary>
            [EnumMember(Value = "Factory_TransferAmountCantBeZero")]
            FactoryTransferAmountCantBeZero,
            
            /// <summary>
            /// Enum FactoryTransferAmountTooHigh for "Factory_TransferAmountTooHigh"
            /// </summary>
            [EnumMember(Value = "Factory_TransferAmountTooHigh")]
            FactoryTransferAmountTooHigh,
            
            /// <summary>
            /// Enum FactoryCannotRevertInvalidAttachment for "Factory_CannotRevertInvalidAttachment"
            /// </summary>
            [EnumMember(Value = "Factory_CannotRevertInvalidAttachment")]
            FactoryCannotRevertInvalidAttachment,
            
            /// <summary>
            /// Enum FactoryCannotRevertAssetIssue for "Factory_CannotRevertAssetIssue"
            /// </summary>
            [EnumMember(Value = "Factory_CannotRevertAssetIssue")]
            FactoryCannotRevertAssetIssue,
            
            /// <summary>
            /// Enum FactoryCannotDeleteInheritedFactory for "Factory_CannotDeleteInheritedFactory"
            /// </summary>
            [EnumMember(Value = "Factory_CannotDeleteInheritedFactory")]
            FactoryCannotDeleteInheritedFactory,
            
            /// <summary>
            /// Enum FactoryStackedFactoryDuplicateFactory for "Factory_StackedFactoryDuplicateFactory"
            /// </summary>
            [EnumMember(Value = "Factory_StackedFactoryDuplicateFactory")]
            FactoryStackedFactoryDuplicateFactory,
            
            /// <summary>
            /// Enum FactoryStackedFactoryWithoutFactory for "Factory_StackedFactoryWithoutFactory"
            /// </summary>
            [EnumMember(Value = "Factory_StackedFactoryWithoutFactory")]
            FactoryStackedFactoryWithoutFactory,
            
            /// <summary>
            /// Enum FactoryCannotRevertTransactionAlreadySpent for "Factory_CannotRevertTransactionAlreadySpent"
            /// </summary>
            [EnumMember(Value = "Factory_CannotRevertTransactionAlreadySpent")]
            FactoryCannotRevertTransactionAlreadySpent,
            
            /// <summary>
            /// Enum FactoryFactoryNotFound for "Factory_FactoryNotFound"
            /// </summary>
            [EnumMember(Value = "Factory_FactoryNotFound")]
            FactoryFactoryNotFound,
            
            /// <summary>
            /// Enum FactoryStackedFactoryNotFound for "Factory_StackedFactoryNotFound"
            /// </summary>
            [EnumMember(Value = "Factory_StackedFactoryNotFound")]
            FactoryStackedFactoryNotFound,
            
            /// <summary>
            /// Enum FactoryTransactionNotFound for "Factory_TransactionNotFound"
            /// </summary>
            [EnumMember(Value = "Factory_TransactionNotFound")]
            FactoryTransactionNotFound,
            
            /// <summary>
            /// Enum FactoryFactoryNotConfirmed for "Factory_FactoryNotConfirmed"
            /// </summary>
            [EnumMember(Value = "Factory_FactoryNotConfirmed")]
            FactoryFactoryNotConfirmed,
            
            /// <summary>
            /// Enum FactoryStackedFactoryNotConfirmed for "Factory_StackedFactoryNotConfirmed"
            /// </summary>
            [EnumMember(Value = "Factory_StackedFactoryNotConfirmed")]
            FactoryStackedFactoryNotConfirmed,
            
            /// <summary>
            /// Enum FactoryTransactionNotConfirmed for "Factory_TransactionNotConfirmed"
            /// </summary>
            [EnumMember(Value = "Factory_TransactionNotConfirmed")]
            FactoryTransactionNotConfirmed,
            
            /// <summary>
            /// Enum FactoryReversalNotConfirmed for "Factory_ReversalNotConfirmed"
            /// </summary>
            [EnumMember(Value = "Factory_ReversalNotConfirmed")]
            FactoryReversalNotConfirmed,
            
            /// <summary>
            /// Enum FactoryFactoryAlreadyExists for "Factory_FactoryAlreadyExists"
            /// </summary>
            [EnumMember(Value = "Factory_FactoryAlreadyExists")]
            FactoryFactoryAlreadyExists,
            
            /// <summary>
            /// Enum FactoryStackedFactoryAlreadyExists for "Factory_StackedFactoryAlreadyExists"
            /// </summary>
            [EnumMember(Value = "Factory_StackedFactoryAlreadyExists")]
            FactoryStackedFactoryAlreadyExists,
            
            /// <summary>
            /// Enum FactoryTransactionAlreadyExists for "Factory_TransactionAlreadyExists"
            /// </summary>
            [EnumMember(Value = "Factory_TransactionAlreadyExists")]
            FactoryTransactionAlreadyExists,
            
            /// <summary>
            /// Enum FactoryTransactionWasAlreadyReversed for "Factory_TransactionWasAlreadyReversed"
            /// </summary>
            [EnumMember(Value = "Factory_TransactionWasAlreadyReversed")]
            FactoryTransactionWasAlreadyReversed,
            
            /// <summary>
            /// Enum FactoryFactoryTransferInsufficientFund for "Factory_FactoryTransferInsufficientFund"
            /// </summary>
            [EnumMember(Value = "Factory_FactoryTransferInsufficientFund")]
            FactoryFactoryTransferInsufficientFund,
            
            /// <summary>
            /// Enum UserNotFound for "User_NotFound"
            /// </summary>
            [EnumMember(Value = "User_NotFound")]
            UserNotFound,
            
            /// <summary>
            /// Enum UserNotConfirmed for "User_NotConfirmed"
            /// </summary>
            [EnumMember(Value = "User_NotConfirmed")]
            UserNotConfirmed,
            
            /// <summary>
            /// Enum UserAlreadyExists for "User_AlreadyExists"
            /// </summary>
            [EnumMember(Value = "User_AlreadyExists")]
            UserAlreadyExists,
            
            /// <summary>
            /// Enum IdentityStackedIdentityDuplicateSubIdentity for "Identity_StackedIdentityDuplicateSubIdentity"
            /// </summary>
            [EnumMember(Value = "Identity_StackedIdentityDuplicateSubIdentity")]
            IdentityStackedIdentityDuplicateSubIdentity,
            
            /// <summary>
            /// Enum IdentitySubIdentityNotFound for "Identity_SubIdentityNotFound"
            /// </summary>
            [EnumMember(Value = "Identity_SubIdentityNotFound")]
            IdentitySubIdentityNotFound,
            
            /// <summary>
            /// Enum IdentityStackedIdentityAlreadyExists for "Identity_StackedIdentityAlreadyExists"
            /// </summary>
            [EnumMember(Value = "Identity_StackedIdentityAlreadyExists")]
            IdentityStackedIdentityAlreadyExists,
            
            /// <summary>
            /// Enum IdentityStackedIdentityNotFound for "Identity_StackedIdentityNotFound"
            /// </summary>
            [EnumMember(Value = "Identity_StackedIdentityNotFound")]
            IdentityStackedIdentityNotFound,
            
            /// <summary>
            /// Enum IdentityDeleteNotFound for "Identity_DeleteNotFound"
            /// </summary>
            [EnumMember(Value = "Identity_DeleteNotFound")]
            IdentityDeleteNotFound,
            
            /// <summary>
            /// Enum IdentityUpdateNotFound for "Identity_UpdateNotFound"
            /// </summary>
            [EnumMember(Value = "Identity_UpdateNotFound")]
            IdentityUpdateNotFound,
            
            /// <summary>
            /// Enum IdentityNotFound for "Identity_NotFound"
            /// </summary>
            [EnumMember(Value = "Identity_NotFound")]
            IdentityNotFound,
            
            /// <summary>
            /// Enum IdentityNotConfirmed for "Identity_NotConfirmed"
            /// </summary>
            [EnumMember(Value = "Identity_NotConfirmed")]
            IdentityNotConfirmed,
            
            /// <summary>
            /// Enum IdentityNotTheOwner for "Identity_NotTheOwner"
            /// </summary>
            [EnumMember(Value = "Identity_NotTheOwner")]
            IdentityNotTheOwner,
            
            /// <summary>
            /// Enum RuleAlreadyExists for "Rule_AlreadyExists"
            /// </summary>
            [EnumMember(Value = "Rule_AlreadyExists")]
            RuleAlreadyExists,
            
            /// <summary>
            /// Enum RuleMaximumDailyTransactionCount for "Rule_MaximumDailyTransactionCount"
            /// </summary>
            [EnumMember(Value = "Rule_MaximumDailyTransactionCount")]
            RuleMaximumDailyTransactionCount,
            
            /// <summary>
            /// Enum RuleMaximumAmountPerTransaction for "Rule_MaximumAmountPerTransaction"
            /// </summary>
            [EnumMember(Value = "Rule_MaximumAmountPerTransaction")]
            RuleMaximumAmountPerTransaction,
            
            /// <summary>
            /// Enum RuleMaximumYearlyTotalInput for "Rule_MaximumYearlyTotalInput"
            /// </summary>
            [EnumMember(Value = "Rule_MaximumYearlyTotalInput")]
            RuleMaximumYearlyTotalInput
        }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public ErrorCodeEnum? ErrorCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HttpExposedError" /> class.
        /// </summary>
        /// <param name="ErrorCode">ErrorCode.</param>
        /// <param name="Message">Message.</param>
        /// <param name="Arguments">Arguments.</param>
        public HttpExposedError(ErrorCodeEnum? ErrorCode = null, string Message = null, List<Object> Arguments = null)
        {
            this.ErrorCode = ErrorCode;
            this.Message = Message;
            this.Arguments = Arguments;
        }
        
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets Arguments
        /// </summary>
        [DataMember(Name="arguments", EmitDefaultValue=false)]
        public List<Object> Arguments { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HttpExposedError {\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HttpExposedError);
        }

        /// <summary>
        /// Returns true if HttpExposedError instances are equal
        /// </summary>
        /// <param name="other">Instance of HttpExposedError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HttpExposedError other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ErrorCode == other.ErrorCode ||
                    this.ErrorCode != null &&
                    this.ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Arguments == other.Arguments ||
                    this.Arguments != null &&
                    this.Arguments.SequenceEqual(other.Arguments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ErrorCode != null)
                    hash = hash * 59 + this.ErrorCode.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Arguments != null)
                    hash = hash * 59 + this.Arguments.GetHashCode();
                return hash;
            }
        }
    }

}
