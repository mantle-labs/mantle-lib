/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = mantle.lib.Client.SwaggerDateConverter;

namespace mantle.lib.Model
{
    /// <summary>
    /// IssuedBatchTransactionsResponse
    /// </summary>
    [DataContract]
    public partial class IssuedBatchTransactionsResponse :  IEquatable<IssuedBatchTransactionsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedBatchTransactionsResponse" /> class.
        /// </summary>
        /// <param name="batchTimestamp">batchTimestamp.</param>
        /// <param name="assetDisplayName">assetDisplayName.</param>
        /// <param name="transactions">transactions.</param>
        public IssuedBatchTransactionsResponse(long? batchTimestamp = default(long?), string assetDisplayName = default(string), List<AssetTransaction> transactions = default(List<AssetTransaction>))
        {
            this.BatchTimestamp = batchTimestamp;
            this.AssetDisplayName = assetDisplayName;
            this.Transactions = transactions;
        }
        
        /// <summary>
        /// Gets or Sets BatchTimestamp
        /// </summary>
        [DataMember(Name="batchTimestamp", EmitDefaultValue=false)]
        public long? BatchTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets AssetDisplayName
        /// </summary>
        [DataMember(Name="assetDisplayName", EmitDefaultValue=false)]
        public string AssetDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<AssetTransaction> Transactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssuedBatchTransactionsResponse {\n");
            sb.Append("  BatchTimestamp: ").Append(BatchTimestamp).Append("\n");
            sb.Append("  AssetDisplayName: ").Append(AssetDisplayName).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedBatchTransactionsResponse);
        }

        /// <summary>
        /// Returns true if IssuedBatchTransactionsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedBatchTransactionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedBatchTransactionsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BatchTimestamp == input.BatchTimestamp ||
                    (this.BatchTimestamp != null &&
                    this.BatchTimestamp.Equals(input.BatchTimestamp))
                ) && 
                (
                    this.AssetDisplayName == input.AssetDisplayName ||
                    (this.AssetDisplayName != null &&
                    this.AssetDisplayName.Equals(input.AssetDisplayName))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatchTimestamp != null)
                    hashCode = hashCode * 59 + this.BatchTimestamp.GetHashCode();
                if (this.AssetDisplayName != null)
                    hashCode = hashCode * 59 + this.AssetDisplayName.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
