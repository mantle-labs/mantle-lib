/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = mantle.lib.Client.SwaggerDateConverter;

namespace mantle.lib.Model
{
    /// <summary>
    /// InvitationCreateRequest
    /// </summary>
    [DataContract]
    public partial class InvitationCreateRequest :  IEquatable<InvitationCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Roles
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RolesEnum
        {
            
            /// <summary>
            /// Enum MCKeeperAdmin for value: MCKeeperAdmin
            /// </summary>
            [EnumMember(Value = "MCKeeperAdmin")]
            MCKeeperAdmin = 1,
            
            /// <summary>
            /// Enum MCBilling for value: MCBilling
            /// </summary>
            [EnumMember(Value = "MCBilling")]
            MCBilling = 2,
            
            /// <summary>
            /// Enum MCUserAdmin for value: MCUserAdmin
            /// </summary>
            [EnumMember(Value = "MCUserAdmin")]
            MCUserAdmin = 3,
            
            /// <summary>
            /// Enum MCTrackerAdmin for value: MCTrackerAdmin
            /// </summary>
            [EnumMember(Value = "MCTrackerAdmin")]
            MCTrackerAdmin = 4,
            
            /// <summary>
            /// Enum MCTrackerUser for value: MCTrackerUser
            /// </summary>
            [EnumMember(Value = "MCTrackerUser")]
            MCTrackerUser = 5,
            
            /// <summary>
            /// Enum MCSealerAdmin for value: MCSealerAdmin
            /// </summary>
            [EnumMember(Value = "MCSealerAdmin")]
            MCSealerAdmin = 6,
            
            /// <summary>
            /// Enum MCSealerUser for value: MCSealerUser
            /// </summary>
            [EnumMember(Value = "MCSealerUser")]
            MCSealerUser = 7,
            
            /// <summary>
            /// Enum MCAdmin for value: MCAdmin
            /// </summary>
            [EnumMember(Value = "MCAdmin")]
            MCAdmin = 8,
            
            /// <summary>
            /// Enum MCBunkerUser for value: MCBunkerUser
            /// </summary>
            [EnumMember(Value = "MCBunkerUser")]
            MCBunkerUser = 9,
            
            /// <summary>
            /// Enum MCBunkerAdmin for value: MCBunkerAdmin
            /// </summary>
            [EnumMember(Value = "MCBunkerAdmin")]
            MCBunkerAdmin = 10
        }


        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<RolesEnum> Roles { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvitationCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationCreateRequest" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="roles">roles.</param>
        public InvitationCreateRequest(string email = default(string), List<RolesEnum> roles = default(List<RolesEnum>))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for InvitationCreateRequest and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            this.Roles = roles;
        }
        
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvitationCreateRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvitationCreateRequest);
        }

        /// <summary>
        /// Returns true if InvitationCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InvitationCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvitationCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 200.", new [] { "Email" });
            }

            // Email (string) minLength
            if(this.Email != null && this.Email.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 0.", new [] { "Email" });
            }

            yield break;
        }
    }

}
