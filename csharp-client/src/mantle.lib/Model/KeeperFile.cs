/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = mantle.lib.Client.SwaggerDateConverter;

namespace mantle.lib.Model
{
    /// <summary>
    /// KeeperFile
    /// </summary>
    [DataContract]
    public partial class KeeperFile :  IEquatable<KeeperFile>
    {
        /// <summary>
        /// Defines Accuracy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccuracyEnum
        {
            
            /// <summary>
            /// Enum Lowest for value: Lowest
            /// </summary>
            [EnumMember(Value = "Lowest")]
            Lowest = 1,
            
            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 2,
            
            /// <summary>
            /// Enum Medium for value: Medium
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium = 3,
            
            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 4,
            
            /// <summary>
            /// Enum Excellent for value: Excellent
            /// </summary>
            [EnumMember(Value = "Excellent")]
            Excellent = 5
        }

        /// <summary>
        /// Gets or Sets Accuracy
        /// </summary>
        [DataMember(Name="accuracy", EmitDefaultValue=false)]
        public AccuracyEnum? Accuracy { get; set; }
        /// <summary>
        /// Defines KeeperType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KeeperTypeEnum
        {
            
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 1,
            
            /// <summary>
            /// Enum Image for value: Image
            /// </summary>
            [EnumMember(Value = "Image")]
            Image = 2,
            
            /// <summary>
            /// Enum Binary for value: Binary
            /// </summary>
            [EnumMember(Value = "Binary")]
            Binary = 3,
            
            /// <summary>
            /// Enum Json for value: Json
            /// </summary>
            [EnumMember(Value = "Json")]
            Json = 4
        }

        /// <summary>
        /// Gets or Sets KeeperType
        /// </summary>
        [DataMember(Name="keeperType", EmitDefaultValue=false)]
        public KeeperTypeEnum? KeeperType { get; set; }
        /// <summary>
        /// Defines BlockchainStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BlockchainStatusEnum
        {
            
            /// <summary>
            /// Enum Unconfirmed for value: Unconfirmed
            /// </summary>
            [EnumMember(Value = "Unconfirmed")]
            Unconfirmed = 1,
            
            /// <summary>
            /// Enum Confirmed for value: Confirmed
            /// </summary>
            [EnumMember(Value = "Confirmed")]
            Confirmed = 2,
            
            /// <summary>
            /// Enum Errored for value: Errored
            /// </summary>
            [EnumMember(Value = "Errored")]
            Errored = 3
        }

        /// <summary>
        /// Gets or Sets BlockchainStatus
        /// </summary>
        [DataMember(Name="blockchainStatus", EmitDefaultValue=false)]
        public BlockchainStatusEnum? BlockchainStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KeeperFile" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="BlockchainFileId">BlockchainFileId.</param>
        /// <param name="FolderId">FolderId.</param>
        /// <param name="ClientId">ClientId.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="FileName">FileName.</param>
        /// <param name="SizeByte">SizeByte.</param>
        /// <param name="Accuracy">Accuracy.</param>
        /// <param name="KeeperType">KeeperType.</param>
        /// <param name="BlockchainStatus">BlockchainStatus.</param>
        /// <param name="IsDeleted">IsDeleted.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="ModificationDate">ModificationDate.</param>
        /// <param name="VersionQuantity">VersionQuantity.</param>
        /// <param name="LastVersion">LastVersion.</param>
        /// <param name="LastVersionFileSize">LastVersionFileSize.</param>
        public KeeperFile(string Id = default(string), string BlockchainFileId = default(string), string FolderId = default(string), string ClientId = default(string), string DisplayName = default(string), string FileName = default(string), long? SizeByte = default(long?), AccuracyEnum? Accuracy = default(AccuracyEnum?), KeeperTypeEnum? KeeperType = default(KeeperTypeEnum?), BlockchainStatusEnum? BlockchainStatus = default(BlockchainStatusEnum?), bool? IsDeleted = default(bool?), DateTime? CreationDate = default(DateTime?), DateTime? ModificationDate = default(DateTime?), int? VersionQuantity = default(int?), int? LastVersion = default(int?), long? LastVersionFileSize = default(long?))
        {
            this.Id = Id;
            this.BlockchainFileId = BlockchainFileId;
            this.FolderId = FolderId;
            this.ClientId = ClientId;
            this.DisplayName = DisplayName;
            this.FileName = FileName;
            this.SizeByte = SizeByte;
            this.Accuracy = Accuracy;
            this.KeeperType = KeeperType;
            this.BlockchainStatus = BlockchainStatus;
            this.IsDeleted = IsDeleted;
            this.CreationDate = CreationDate;
            this.ModificationDate = ModificationDate;
            this.VersionQuantity = VersionQuantity;
            this.LastVersion = LastVersion;
            this.LastVersionFileSize = LastVersionFileSize;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets BlockchainFileId
        /// </summary>
        [DataMember(Name="blockchainFileId", EmitDefaultValue=false)]
        public string BlockchainFileId { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public string FolderId { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets SizeByte
        /// </summary>
        [DataMember(Name="sizeByte", EmitDefaultValue=false)]
        public long? SizeByte { get; set; }




        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets ModificationDate
        /// </summary>
        [DataMember(Name="modificationDate", EmitDefaultValue=false)]
        public DateTime? ModificationDate { get; set; }

        /// <summary>
        /// Gets or Sets VersionQuantity
        /// </summary>
        [DataMember(Name="versionQuantity", EmitDefaultValue=false)]
        public int? VersionQuantity { get; set; }

        /// <summary>
        /// Gets or Sets LastVersion
        /// </summary>
        [DataMember(Name="lastVersion", EmitDefaultValue=false)]
        public int? LastVersion { get; set; }

        /// <summary>
        /// Gets or Sets LastVersionFileSize
        /// </summary>
        [DataMember(Name="lastVersionFileSize", EmitDefaultValue=false)]
        public long? LastVersionFileSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeeperFile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BlockchainFileId: ").Append(BlockchainFileId).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  SizeByte: ").Append(SizeByte).Append("\n");
            sb.Append("  Accuracy: ").Append(Accuracy).Append("\n");
            sb.Append("  KeeperType: ").Append(KeeperType).Append("\n");
            sb.Append("  BlockchainStatus: ").Append(BlockchainStatus).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ModificationDate: ").Append(ModificationDate).Append("\n");
            sb.Append("  VersionQuantity: ").Append(VersionQuantity).Append("\n");
            sb.Append("  LastVersion: ").Append(LastVersion).Append("\n");
            sb.Append("  LastVersionFileSize: ").Append(LastVersionFileSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeeperFile);
        }

        /// <summary>
        /// Returns true if KeeperFile instances are equal
        /// </summary>
        /// <param name="input">Instance of KeeperFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeeperFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BlockchainFileId == input.BlockchainFileId ||
                    (this.BlockchainFileId != null &&
                    this.BlockchainFileId.Equals(input.BlockchainFileId))
                ) && 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.SizeByte == input.SizeByte ||
                    (this.SizeByte != null &&
                    this.SizeByte.Equals(input.SizeByte))
                ) && 
                (
                    this.Accuracy == input.Accuracy ||
                    (this.Accuracy != null &&
                    this.Accuracy.Equals(input.Accuracy))
                ) && 
                (
                    this.KeeperType == input.KeeperType ||
                    (this.KeeperType != null &&
                    this.KeeperType.Equals(input.KeeperType))
                ) && 
                (
                    this.BlockchainStatus == input.BlockchainStatus ||
                    (this.BlockchainStatus != null &&
                    this.BlockchainStatus.Equals(input.BlockchainStatus))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.ModificationDate == input.ModificationDate ||
                    (this.ModificationDate != null &&
                    this.ModificationDate.Equals(input.ModificationDate))
                ) && 
                (
                    this.VersionQuantity == input.VersionQuantity ||
                    (this.VersionQuantity != null &&
                    this.VersionQuantity.Equals(input.VersionQuantity))
                ) && 
                (
                    this.LastVersion == input.LastVersion ||
                    (this.LastVersion != null &&
                    this.LastVersion.Equals(input.LastVersion))
                ) && 
                (
                    this.LastVersionFileSize == input.LastVersionFileSize ||
                    (this.LastVersionFileSize != null &&
                    this.LastVersionFileSize.Equals(input.LastVersionFileSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BlockchainFileId != null)
                    hashCode = hashCode * 59 + this.BlockchainFileId.GetHashCode();
                if (this.FolderId != null)
                    hashCode = hashCode * 59 + this.FolderId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.SizeByte != null)
                    hashCode = hashCode * 59 + this.SizeByte.GetHashCode();
                if (this.Accuracy != null)
                    hashCode = hashCode * 59 + this.Accuracy.GetHashCode();
                if (this.KeeperType != null)
                    hashCode = hashCode * 59 + this.KeeperType.GetHashCode();
                if (this.BlockchainStatus != null)
                    hashCode = hashCode * 59 + this.BlockchainStatus.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.ModificationDate != null)
                    hashCode = hashCode * 59 + this.ModificationDate.GetHashCode();
                if (this.VersionQuantity != null)
                    hashCode = hashCode * 59 + this.VersionQuantity.GetHashCode();
                if (this.LastVersion != null)
                    hashCode = hashCode * 59 + this.LastVersion.GetHashCode();
                if (this.LastVersionFileSize != null)
                    hashCode = hashCode * 59 + this.LastVersionFileSize.GetHashCode();
                return hashCode;
            }
        }
    }

}
