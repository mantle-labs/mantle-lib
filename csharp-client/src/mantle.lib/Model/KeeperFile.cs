/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = mantle.lib.Client.SwaggerDateConverter;

namespace mantle.lib.Model
{
    /// <summary>
    /// KeeperFile
    /// </summary>
    [DataContract]
    public partial class KeeperFile :  IEquatable<KeeperFile>, IValidatableObject
    {
        /// <summary>
        /// Defines FileType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FileTypeEnum
        {
            
            /// <summary>
            /// Enum Image for value: Image
            /// </summary>
            [EnumMember(Value = "Image")]
            Image = 1,
            
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 2,
            
            /// <summary>
            /// Enum Binary for value: Binary
            /// </summary>
            [EnumMember(Value = "Binary")]
            Binary = 3,
            
            /// <summary>
            /// Enum Json for value: Json
            /// </summary>
            [EnumMember(Value = "Json")]
            Json = 4,
            
            /// <summary>
            /// Enum Xml for value: Xml
            /// </summary>
            [EnumMember(Value = "Xml")]
            Xml = 5,
            
            /// <summary>
            /// Enum Pdf for value: Pdf
            /// </summary>
            [EnumMember(Value = "Pdf")]
            Pdf = 6
        }

        /// <summary>
        /// Gets or Sets FileType
        /// </summary>
        [DataMember(Name="fileType", EmitDefaultValue=false)]
        public FileTypeEnum? FileType { get; set; }
        /// <summary>
        /// Defines AccuracyLevel
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccuracyLevelEnum
        {
            
            /// <summary>
            /// Enum Lowest for value: Lowest
            /// </summary>
            [EnumMember(Value = "Lowest")]
            Lowest = 1,
            
            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 2,
            
            /// <summary>
            /// Enum Medium for value: Medium
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium = 3,
            
            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 4,
            
            /// <summary>
            /// Enum Excellent for value: Excellent
            /// </summary>
            [EnumMember(Value = "Excellent")]
            Excellent = 5
        }

        /// <summary>
        /// Gets or Sets AccuracyLevel
        /// </summary>
        [DataMember(Name="accuracyLevel", EmitDefaultValue=false)]
        public AccuracyLevelEnum? AccuracyLevel { get; set; }
        /// <summary>
        /// Defines BlockchainStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BlockchainStatusEnum
        {
            
            /// <summary>
            /// Enum Unconfirmed for value: Unconfirmed
            /// </summary>
            [EnumMember(Value = "Unconfirmed")]
            Unconfirmed = 1,
            
            /// <summary>
            /// Enum Confirmed for value: Confirmed
            /// </summary>
            [EnumMember(Value = "Confirmed")]
            Confirmed = 2,
            
            /// <summary>
            /// Enum Corrupted for value: Corrupted
            /// </summary>
            [EnumMember(Value = "Corrupted")]
            Corrupted = 3
        }

        /// <summary>
        /// Gets or Sets BlockchainStatus
        /// </summary>
        [DataMember(Name="blockchainStatus", EmitDefaultValue=false)]
        public BlockchainStatusEnum? BlockchainStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KeeperFile" /> class.
        /// </summary>
        /// <param name="tag">tag.</param>
        /// <param name="fileType">fileType.</param>
        /// <param name="accuracyLevel">accuracyLevel.</param>
        /// <param name="id">id.</param>
        /// <param name="blockchainStatus">blockchainStatus.</param>
        /// <param name="ownerEmail">ownerEmail.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="isDeleted">isDeleted.</param>
        public KeeperFile(string tag = default(string), FileTypeEnum? fileType = default(FileTypeEnum?), AccuracyLevelEnum? accuracyLevel = default(AccuracyLevelEnum?), string id = default(string), BlockchainStatusEnum? blockchainStatus = default(BlockchainStatusEnum?), string ownerEmail = default(string), string displayName = default(string), DateTime? creationDate = default(DateTime?), bool? isDeleted = default(bool?))
        {
            this.Tag = tag;
            this.FileType = fileType;
            this.AccuracyLevel = accuracyLevel;
            this.Id = id;
            this.BlockchainStatus = blockchainStatus;
            this.OwnerEmail = ownerEmail;
            this.DisplayName = displayName;
            this.CreationDate = creationDate;
            this.IsDeleted = isDeleted;
        }
        
        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }



        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Gets or Sets OwnerEmail
        /// </summary>
        [DataMember(Name="ownerEmail", EmitDefaultValue=false)]
        public string OwnerEmail { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeeperFile {\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  AccuracyLevel: ").Append(AccuracyLevel).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BlockchainStatus: ").Append(BlockchainStatus).Append("\n");
            sb.Append("  OwnerEmail: ").Append(OwnerEmail).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeeperFile);
        }

        /// <summary>
        /// Returns true if KeeperFile instances are equal
        /// </summary>
        /// <param name="input">Instance of KeeperFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeeperFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.FileType == input.FileType ||
                    (this.FileType != null &&
                    this.FileType.Equals(input.FileType))
                ) && 
                (
                    this.AccuracyLevel == input.AccuracyLevel ||
                    (this.AccuracyLevel != null &&
                    this.AccuracyLevel.Equals(input.AccuracyLevel))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BlockchainStatus == input.BlockchainStatus ||
                    (this.BlockchainStatus != null &&
                    this.BlockchainStatus.Equals(input.BlockchainStatus))
                ) && 
                (
                    this.OwnerEmail == input.OwnerEmail ||
                    (this.OwnerEmail != null &&
                    this.OwnerEmail.Equals(input.OwnerEmail))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.FileType != null)
                    hashCode = hashCode * 59 + this.FileType.GetHashCode();
                if (this.AccuracyLevel != null)
                    hashCode = hashCode * 59 + this.AccuracyLevel.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BlockchainStatus != null)
                    hashCode = hashCode * 59 + this.BlockchainStatus.GetHashCode();
                if (this.OwnerEmail != null)
                    hashCode = hashCode * 59 + this.OwnerEmail.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
