/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvitationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a specific invitation. The invited user won&#39;t be able to join the platform anymore. An invitation can be created with the same email again. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns></returns>
        void InvitationsByInvitationIdDelete (string invitationId);

        /// <summary>
        /// Delete a specific invitation. The invited user won&#39;t be able to join the platform anymore. An invitation can be created with the same email again. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InvitationsByInvitationIdDeleteWithHttpInfo (string invitationId);
        /// <summary>
        /// Get an invitation&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>InvitationSignUpResponse</returns>
        InvitationSignUpResponse InvitationsByInvitationIdGet (string invitationId);

        /// <summary>
        /// Get an invitation&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>ApiResponse of InvitationSignUpResponse</returns>
        ApiResponse<InvitationSignUpResponse> InvitationsByInvitationIdGetWithHttpInfo (string invitationId);
        /// <summary>
        /// Get all of the invitations that have been sent for the current client. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Invitation&gt;</returns>
        List<Invitation> InvitationsGet ();

        /// <summary>
        /// Get all of the invitations that have been sent for the current client. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Invitation&gt;</returns>
        ApiResponse<List<Invitation>> InvitationsGetWithHttpInfo ();
        /// <summary>
        /// Create an invitation so that a user can join the platform. The entered email will be used to confirm the user&#39;s entity. An invitation email will also be sent. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Invitation</returns>
        Invitation InvitationsPost (InvitationCreateRequest request = null);

        /// <summary>
        /// Create an invitation so that a user can join the platform. The entered email will be used to confirm the user&#39;s entity. An invitation email will also be sent. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Invitation</returns>
        ApiResponse<Invitation> InvitationsPostWithHttpInfo (InvitationCreateRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a specific invitation. The invited user won&#39;t be able to join the platform anymore. An invitation can be created with the same email again. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InvitationsByInvitationIdDeleteAsync (string invitationId);

        /// <summary>
        /// Delete a specific invitation. The invited user won&#39;t be able to join the platform anymore. An invitation can be created with the same email again. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvitationsByInvitationIdDeleteAsyncWithHttpInfo (string invitationId);
        /// <summary>
        /// Get an invitation&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of InvitationSignUpResponse</returns>
        System.Threading.Tasks.Task<InvitationSignUpResponse> InvitationsByInvitationIdGetAsync (string invitationId);

        /// <summary>
        /// Get an invitation&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of ApiResponse (InvitationSignUpResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationSignUpResponse>> InvitationsByInvitationIdGetAsyncWithHttpInfo (string invitationId);
        /// <summary>
        /// Get all of the invitations that have been sent for the current client. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Invitation&gt;</returns>
        System.Threading.Tasks.Task<List<Invitation>> InvitationsGetAsync ();

        /// <summary>
        /// Get all of the invitations that have been sent for the current client. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Invitation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Invitation>>> InvitationsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Create an invitation so that a user can join the platform. The entered email will be used to confirm the user&#39;s entity. An invitation email will also be sent. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Invitation</returns>
        System.Threading.Tasks.Task<Invitation> InvitationsPostAsync (InvitationCreateRequest request = null);

        /// <summary>
        /// Create an invitation so that a user can join the platform. The entered email will be used to confirm the user&#39;s entity. An invitation email will also be sent. Requires the User Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Invitation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invitation>> InvitationsPostAsyncWithHttpInfo (InvitationCreateRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvitationsApi : IInvitationsApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvitationsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvitationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a specific invitation. The invited user won&#39;t be able to join the platform anymore. An invitation can be created with the same email again. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns></returns>
        public void InvitationsByInvitationIdDelete (string invitationId)
        {
             InvitationsByInvitationIdDeleteWithHttpInfo(invitationId);
        }

        /// <summary>
        /// Delete a specific invitation. The invited user won&#39;t be able to join the platform anymore. An invitation can be created with the same email again. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InvitationsByInvitationIdDeleteWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->InvitationsByInvitationIdDelete");

            var localVarPath = "./invitations/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", Configuration.ApiClient.ParameterToString(invitationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvitationsByInvitationIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a specific invitation. The invited user won&#39;t be able to join the platform anymore. An invitation can be created with the same email again. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InvitationsByInvitationIdDeleteAsync (string invitationId)
        {
             await InvitationsByInvitationIdDeleteAsyncWithHttpInfo(invitationId);

        }

        /// <summary>
        /// Delete a specific invitation. The invited user won&#39;t be able to join the platform anymore. An invitation can be created with the same email again. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InvitationsByInvitationIdDeleteAsyncWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->InvitationsByInvitationIdDelete");

            var localVarPath = "./invitations/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", Configuration.ApiClient.ParameterToString(invitationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvitationsByInvitationIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get an invitation&#39;s details 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>InvitationSignUpResponse</returns>
        public InvitationSignUpResponse InvitationsByInvitationIdGet (string invitationId)
        {
             ApiResponse<InvitationSignUpResponse> localVarResponse = InvitationsByInvitationIdGetWithHttpInfo(invitationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an invitation&#39;s details 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>ApiResponse of InvitationSignUpResponse</returns>
        public ApiResponse< InvitationSignUpResponse > InvitationsByInvitationIdGetWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->InvitationsByInvitationIdGet");

            var localVarPath = "./invitations/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", Configuration.ApiClient.ParameterToString(invitationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvitationsByInvitationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationSignUpResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InvitationSignUpResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationSignUpResponse)));
        }

        /// <summary>
        /// Get an invitation&#39;s details 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of InvitationSignUpResponse</returns>
        public async System.Threading.Tasks.Task<InvitationSignUpResponse> InvitationsByInvitationIdGetAsync (string invitationId)
        {
             ApiResponse<InvitationSignUpResponse> localVarResponse = await InvitationsByInvitationIdGetAsyncWithHttpInfo(invitationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an invitation&#39;s details 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of ApiResponse (InvitationSignUpResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationSignUpResponse>> InvitationsByInvitationIdGetAsyncWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->InvitationsByInvitationIdGet");

            var localVarPath = "./invitations/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", Configuration.ApiClient.ParameterToString(invitationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvitationsByInvitationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationSignUpResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InvitationSignUpResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationSignUpResponse)));
        }

        /// <summary>
        /// Get all of the invitations that have been sent for the current client. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Invitation&gt;</returns>
        public List<Invitation> InvitationsGet ()
        {
             ApiResponse<List<Invitation>> localVarResponse = InvitationsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all of the invitations that have been sent for the current client. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Invitation&gt;</returns>
        public ApiResponse< List<Invitation> > InvitationsGetWithHttpInfo ()
        {

            var localVarPath = "./invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvitationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Invitation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Invitation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Invitation>)));
        }

        /// <summary>
        /// Get all of the invitations that have been sent for the current client. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Invitation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Invitation>> InvitationsGetAsync ()
        {
             ApiResponse<List<Invitation>> localVarResponse = await InvitationsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all of the invitations that have been sent for the current client. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Invitation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Invitation>>> InvitationsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvitationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Invitation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Invitation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Invitation>)));
        }

        /// <summary>
        /// Create an invitation so that a user can join the platform. The entered email will be used to confirm the user&#39;s entity. An invitation email will also be sent. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Invitation</returns>
        public Invitation InvitationsPost (InvitationCreateRequest request = null)
        {
             ApiResponse<Invitation> localVarResponse = InvitationsPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an invitation so that a user can join the platform. The entered email will be used to confirm the user&#39;s entity. An invitation email will also be sent. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Invitation</returns>
        public ApiResponse< Invitation > InvitationsPostWithHttpInfo (InvitationCreateRequest request = null)
        {

            var localVarPath = "./invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvitationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invitation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Invitation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invitation)));
        }

        /// <summary>
        /// Create an invitation so that a user can join the platform. The entered email will be used to confirm the user&#39;s entity. An invitation email will also be sent. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Invitation</returns>
        public async System.Threading.Tasks.Task<Invitation> InvitationsPostAsync (InvitationCreateRequest request = null)
        {
             ApiResponse<Invitation> localVarResponse = await InvitationsPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an invitation so that a user can join the platform. The entered email will be used to confirm the user&#39;s entity. An invitation email will also be sent. Requires the User Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Invitation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invitation>> InvitationsPostAsyncWithHttpInfo (InvitationCreateRequest request = null)
        {

            var localVarPath = "./invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvitationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invitation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Invitation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invitation)));
        }

    }
}
