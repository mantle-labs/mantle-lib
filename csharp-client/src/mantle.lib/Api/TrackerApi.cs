/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [ASSETS] Delete an asset that has been previously created. It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns></returns>
        void TrackerAssetsByAssetIdDelete (string assetId);

        /// <summary>
        /// [ASSETS] Delete an asset that has been previously created. It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerAssetsByAssetIdDeleteWithHttpInfo (string assetId);
        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details. Requires the Track Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>TrackerAsset</returns>
        TrackerAsset TrackerAssetsByAssetIdGet (string assetId);

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details. Requires the Track Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        ApiResponse<TrackerAsset> TrackerAssetsByAssetIdGetWithHttpInfo (string assetId);
        /// <summary>
        /// [ASSETS] Edit an asset that has previously been created. Only the name can be changed. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void TrackerAssetsByAssetIdPut (string assetId, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [ASSETS] Edit an asset that has previously been created. Only the name can be changed. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerAssetsByAssetIdPutWithHttpInfo (string assetId, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [ASSETS] Get all of the assets that have been created in Tracker. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TrackerAsset&gt;</returns>
        List<TrackerAsset> TrackerAssetsGet ();

        /// <summary>
        /// [ASSETS] Get all of the assets that have been created in Tracker. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TrackerAsset&gt;</returns>
        ApiResponse<List<TrackerAsset>> TrackerAssetsGetWithHttpInfo ();
        /// <summary>
        /// [ASSETS] Issue a certain amount of asset to a recipient. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void TrackerAssetsIssuePost (TrackerAssetIssueRequest request = null);

        /// <summary>
        /// [ASSETS] Issue a certain amount of asset to a recipient. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerAssetsIssuePostWithHttpInfo (TrackerAssetIssueRequest request = null);
        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <returns>IssuedBatchTransactionsResponse</returns>
        IssuedBatchTransactionsResponse TrackerAssetsIssuedbatchesByAssetIdByBatchIdGet (string assetId, string batchId);

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <returns>ApiResponse of IssuedBatchTransactionsResponse</returns>
        ApiResponse<IssuedBatchTransactionsResponse> TrackerAssetsIssuedbatchesByAssetIdByBatchIdGetWithHttpInfo (string assetId, string batchId);
        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>IssuedBatchesResponse</returns>
        IssuedBatchesResponse TrackerAssetsIssuedbatchesByAssetIdGet (string assetId);

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>ApiResponse of IssuedBatchesResponse</returns>
        ApiResponse<IssuedBatchesResponse> TrackerAssetsIssuedbatchesByAssetIdGetWithHttpInfo (string assetId);
        /// <summary>
        /// [ASSETS] Creates an asset in Tracker. This asset will then be issuable and transferable between entities. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerAsset</returns>
        TrackerAsset TrackerAssetsPost (TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [ASSETS] Creates an asset in Tracker. This asset will then be issuable and transferable between entities. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        ApiResponse<TrackerAsset> TrackerAssetsPostWithHttpInfo (TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [STATS] Get 3 statistics regarding the usage of Tracker in the last 24 hours. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TrackerStatsResponse</returns>
        TrackerStatsResponse TrackerStatsGet ();

        /// <summary>
        /// [STATS] Get 3 statistics regarding the usage of Tracker in the last 24 hours. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TrackerStatsResponse</returns>
        ApiResponse<TrackerStatsResponse> TrackerStatsGetWithHttpInfo ();
        /// <summary>
        /// [TRANSACTIONS] Get all of the latest transactions that have been performed in Tracker. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        List<AssetTransaction> TrackerTransactionsGet (DateTime? beforeDateTime = null, int? limit = null, int? offset = null);

        /// <summary>
        /// [TRANSACTIONS] Get all of the latest transactions that have been performed in Tracker. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        ApiResponse<List<AssetTransaction>> TrackerTransactionsGetWithHttpInfo (DateTime? beforeDateTime = null, int? limit = null, int? offset = null);
        /// <summary>
        /// [TRANSACTIONS] Revert a transaction. This operation will refund the amounts that have been sent from a user to another by creating a new transaction. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void TrackerTransactionsReversePost (TrackerTransactionRevertRequest request = null);

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction. This operation will refund the amounts that have been sent from a user to another by creating a new transaction. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerTransactionsReversePostWithHttpInfo (TrackerTransactionRevertRequest request = null);
        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user from one of your specific batches. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void TrackerWalletBatchesTransferPost (TrackerBatchTransferRequest request = null);

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user from one of your specific batches. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerWalletBatchesTransferPostWithHttpInfo (TrackerBatchTransferRequest request = null);
        /// <summary>
        /// [WALLET] Get all of the logged user&#39;s asset balances for a specific main coin. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DetailedAssetBalance&gt;</returns>
        List<DetailedAssetBalance> TrackerWalletDetailedbalancesGet ();

        /// <summary>
        /// [WALLET] Get all of the logged user&#39;s asset balances for a specific main coin. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DetailedAssetBalance&gt;</returns>
        ApiResponse<List<DetailedAssetBalance>> TrackerWalletDetailedbalancesGetWithHttpInfo ();
        /// <summary>
        /// [WALLET] Get all transactions for a specific asset. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        List<AssetTransaction> TrackerWalletTransactionsByAssetIdGet (string assetId);

        /// <summary>
        /// [WALLET] Get all transactions for a specific asset. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        ApiResponse<List<AssetTransaction>> TrackerWalletTransactionsByAssetIdGetWithHttpInfo (string assetId);
        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void TrackerWalletTransferPost (TrackerTransferRequest request = null);

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerWalletTransferPostWithHttpInfo (TrackerTransferRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [ASSETS] Delete an asset that has been previously created. It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerAssetsByAssetIdDeleteAsync (string assetId);

        /// <summary>
        /// [ASSETS] Delete an asset that has been previously created. It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerAssetsByAssetIdDeleteAsyncWithHttpInfo (string assetId);
        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details. Requires the Track Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of TrackerAsset</returns>
        System.Threading.Tasks.Task<TrackerAsset> TrackerAssetsByAssetIdGetAsync (string assetId);

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details. Requires the Track Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> TrackerAssetsByAssetIdGetAsyncWithHttpInfo (string assetId);
        /// <summary>
        /// [ASSETS] Edit an asset that has previously been created. Only the name can be changed. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerAssetsByAssetIdPutAsync (string assetId, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [ASSETS] Edit an asset that has previously been created. Only the name can be changed. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerAssetsByAssetIdPutAsyncWithHttpInfo (string assetId, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [ASSETS] Get all of the assets that have been created in Tracker. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TrackerAsset&gt;</returns>
        System.Threading.Tasks.Task<List<TrackerAsset>> TrackerAssetsGetAsync ();

        /// <summary>
        /// [ASSETS] Get all of the assets that have been created in Tracker. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TrackerAsset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackerAsset>>> TrackerAssetsGetAsyncWithHttpInfo ();
        /// <summary>
        /// [ASSETS] Issue a certain amount of asset to a recipient. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerAssetsIssuePostAsync (TrackerAssetIssueRequest request = null);

        /// <summary>
        /// [ASSETS] Issue a certain amount of asset to a recipient. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerAssetsIssuePostAsyncWithHttpInfo (TrackerAssetIssueRequest request = null);
        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <returns>Task of IssuedBatchTransactionsResponse</returns>
        System.Threading.Tasks.Task<IssuedBatchTransactionsResponse> TrackerAssetsIssuedbatchesByAssetIdByBatchIdGetAsync (string assetId, string batchId);

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <returns>Task of ApiResponse (IssuedBatchTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedBatchTransactionsResponse>> TrackerAssetsIssuedbatchesByAssetIdByBatchIdGetAsyncWithHttpInfo (string assetId, string batchId);
        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of IssuedBatchesResponse</returns>
        System.Threading.Tasks.Task<IssuedBatchesResponse> TrackerAssetsIssuedbatchesByAssetIdGetAsync (string assetId);

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of ApiResponse (IssuedBatchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedBatchesResponse>> TrackerAssetsIssuedbatchesByAssetIdGetAsyncWithHttpInfo (string assetId);
        /// <summary>
        /// [ASSETS] Creates an asset in Tracker. This asset will then be issuable and transferable between entities. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerAsset</returns>
        System.Threading.Tasks.Task<TrackerAsset> TrackerAssetsPostAsync (TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [ASSETS] Creates an asset in Tracker. This asset will then be issuable and transferable between entities. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> TrackerAssetsPostAsyncWithHttpInfo (TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [STATS] Get 3 statistics regarding the usage of Tracker in the last 24 hours. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TrackerStatsResponse</returns>
        System.Threading.Tasks.Task<TrackerStatsResponse> TrackerStatsGetAsync ();

        /// <summary>
        /// [STATS] Get 3 statistics regarding the usage of Tracker in the last 24 hours. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TrackerStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerStatsResponse>> TrackerStatsGetAsyncWithHttpInfo ();
        /// <summary>
        /// [TRANSACTIONS] Get all of the latest transactions that have been performed in Tracker. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<AssetTransaction>> TrackerTransactionsGetAsync (DateTime? beforeDateTime = null, int? limit = null, int? offset = null);

        /// <summary>
        /// [TRANSACTIONS] Get all of the latest transactions that have been performed in Tracker. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> TrackerTransactionsGetAsyncWithHttpInfo (DateTime? beforeDateTime = null, int? limit = null, int? offset = null);
        /// <summary>
        /// [TRANSACTIONS] Revert a transaction. This operation will refund the amounts that have been sent from a user to another by creating a new transaction. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerTransactionsReversePostAsync (TrackerTransactionRevertRequest request = null);

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction. This operation will refund the amounts that have been sent from a user to another by creating a new transaction. Requires the Tracker Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerTransactionsReversePostAsyncWithHttpInfo (TrackerTransactionRevertRequest request = null);
        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user from one of your specific batches. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerWalletBatchesTransferPostAsync (TrackerBatchTransferRequest request = null);

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user from one of your specific batches. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerWalletBatchesTransferPostAsyncWithHttpInfo (TrackerBatchTransferRequest request = null);
        /// <summary>
        /// [WALLET] Get all of the logged user&#39;s asset balances for a specific main coin. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DetailedAssetBalance&gt;</returns>
        System.Threading.Tasks.Task<List<DetailedAssetBalance>> TrackerWalletDetailedbalancesGetAsync ();

        /// <summary>
        /// [WALLET] Get all of the logged user&#39;s asset balances for a specific main coin. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DetailedAssetBalance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DetailedAssetBalance>>> TrackerWalletDetailedbalancesGetAsyncWithHttpInfo ();
        /// <summary>
        /// [WALLET] Get all transactions for a specific asset. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<AssetTransaction>> TrackerWalletTransactionsByAssetIdGetAsync (string assetId);

        /// <summary>
        /// [WALLET] Get all transactions for a specific asset. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> TrackerWalletTransactionsByAssetIdGetAsyncWithHttpInfo (string assetId);
        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerWalletTransferPostAsync (TrackerTransferRequest request = null);

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user. Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerWalletTransferPostAsyncWithHttpInfo (TrackerTransferRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrackerApi : ITrackerApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackerApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrackerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [ASSETS] Delete an asset that has been previously created. It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns></returns>
        public void TrackerAssetsByAssetIdDelete (string assetId)
        {
             TrackerAssetsByAssetIdDeleteWithHttpInfo(assetId);
        }

        /// <summary>
        /// [ASSETS] Delete an asset that has been previously created. It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerAssetsByAssetIdDeleteWithHttpInfo (string assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerAssetsByAssetIdDelete");

            var localVarPath = "./tracker/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsByAssetIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Delete an asset that has been previously created. It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerAssetsByAssetIdDeleteAsync (string assetId)
        {
             await TrackerAssetsByAssetIdDeleteAsyncWithHttpInfo(assetId);

        }

        /// <summary>
        /// [ASSETS] Delete an asset that has been previously created. It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerAssetsByAssetIdDeleteAsyncWithHttpInfo (string assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerAssetsByAssetIdDelete");

            var localVarPath = "./tracker/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsByAssetIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details. Requires the Track Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>TrackerAsset</returns>
        public TrackerAsset TrackerAssetsByAssetIdGet (string assetId)
        {
             ApiResponse<TrackerAsset> localVarResponse = TrackerAssetsByAssetIdGetWithHttpInfo(assetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details. Requires the Track Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        public ApiResponse< TrackerAsset > TrackerAssetsByAssetIdGetWithHttpInfo (string assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerAssetsByAssetIdGet");

            var localVarPath = "./tracker/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
        }

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details. Requires the Track Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of TrackerAsset</returns>
        public async System.Threading.Tasks.Task<TrackerAsset> TrackerAssetsByAssetIdGetAsync (string assetId)
        {
             ApiResponse<TrackerAsset> localVarResponse = await TrackerAssetsByAssetIdGetAsyncWithHttpInfo(assetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details. Requires the Track Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> TrackerAssetsByAssetIdGetAsyncWithHttpInfo (string assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerAssetsByAssetIdGet");

            var localVarPath = "./tracker/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
        }

        /// <summary>
        /// [ASSETS] Edit an asset that has previously been created. Only the name can be changed. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void TrackerAssetsByAssetIdPut (string assetId, TrackerAssetCreateRequest request = null)
        {
             TrackerAssetsByAssetIdPutWithHttpInfo(assetId, request);
        }

        /// <summary>
        /// [ASSETS] Edit an asset that has previously been created. Only the name can be changed. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerAssetsByAssetIdPutWithHttpInfo (string assetId, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerAssetsByAssetIdPut");

            var localVarPath = "./tracker/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsByAssetIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Edit an asset that has previously been created. Only the name can be changed. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerAssetsByAssetIdPutAsync (string assetId, TrackerAssetCreateRequest request = null)
        {
             await TrackerAssetsByAssetIdPutAsyncWithHttpInfo(assetId, request);

        }

        /// <summary>
        /// [ASSETS] Edit an asset that has previously been created. Only the name can be changed. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerAssetsByAssetIdPutAsyncWithHttpInfo (string assetId, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerAssetsByAssetIdPut");

            var localVarPath = "./tracker/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsByAssetIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Get all of the assets that have been created in Tracker. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TrackerAsset&gt;</returns>
        public List<TrackerAsset> TrackerAssetsGet ()
        {
             ApiResponse<List<TrackerAsset>> localVarResponse = TrackerAssetsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Get all of the assets that have been created in Tracker. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TrackerAsset&gt;</returns>
        public ApiResponse< List<TrackerAsset> > TrackerAssetsGetWithHttpInfo ()
        {

            var localVarPath = "./tracker/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TrackerAsset>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerAsset>)));
        }

        /// <summary>
        /// [ASSETS] Get all of the assets that have been created in Tracker. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TrackerAsset&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackerAsset>> TrackerAssetsGetAsync ()
        {
             ApiResponse<List<TrackerAsset>> localVarResponse = await TrackerAssetsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Get all of the assets that have been created in Tracker. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TrackerAsset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackerAsset>>> TrackerAssetsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./tracker/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TrackerAsset>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerAsset>)));
        }

        /// <summary>
        /// [ASSETS] Issue a certain amount of asset to a recipient. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void TrackerAssetsIssuePost (TrackerAssetIssueRequest request = null)
        {
             TrackerAssetsIssuePostWithHttpInfo(request);
        }

        /// <summary>
        /// [ASSETS] Issue a certain amount of asset to a recipient. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerAssetsIssuePostWithHttpInfo (TrackerAssetIssueRequest request = null)
        {

            var localVarPath = "./tracker/assets/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsIssuePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Issue a certain amount of asset to a recipient. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerAssetsIssuePostAsync (TrackerAssetIssueRequest request = null)
        {
             await TrackerAssetsIssuePostAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// [ASSETS] Issue a certain amount of asset to a recipient. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerAssetsIssuePostAsyncWithHttpInfo (TrackerAssetIssueRequest request = null)
        {

            var localVarPath = "./tracker/assets/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsIssuePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <returns>IssuedBatchTransactionsResponse</returns>
        public IssuedBatchTransactionsResponse TrackerAssetsIssuedbatchesByAssetIdByBatchIdGet (string assetId, string batchId)
        {
             ApiResponse<IssuedBatchTransactionsResponse> localVarResponse = TrackerAssetsIssuedbatchesByAssetIdByBatchIdGetWithHttpInfo(assetId, batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <returns>ApiResponse of IssuedBatchTransactionsResponse</returns>
        public ApiResponse< IssuedBatchTransactionsResponse > TrackerAssetsIssuedbatchesByAssetIdByBatchIdGetWithHttpInfo (string assetId, string batchId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerAssetsIssuedbatchesByAssetIdByBatchIdGet");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling TrackerApi->TrackerAssetsIssuedbatchesByAssetIdByBatchIdGet");

            var localVarPath = "./tracker/assets/issuedbatches/{assetId}/{batchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", Configuration.ApiClient.ParameterToString(batchId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsIssuedbatchesByAssetIdByBatchIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IssuedBatchTransactionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchTransactionsResponse)));
        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <returns>Task of IssuedBatchTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<IssuedBatchTransactionsResponse> TrackerAssetsIssuedbatchesByAssetIdByBatchIdGetAsync (string assetId, string batchId)
        {
             ApiResponse<IssuedBatchTransactionsResponse> localVarResponse = await TrackerAssetsIssuedbatchesByAssetIdByBatchIdGetAsyncWithHttpInfo(assetId, batchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <returns>Task of ApiResponse (IssuedBatchTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuedBatchTransactionsResponse>> TrackerAssetsIssuedbatchesByAssetIdByBatchIdGetAsyncWithHttpInfo (string assetId, string batchId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerAssetsIssuedbatchesByAssetIdByBatchIdGet");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling TrackerApi->TrackerAssetsIssuedbatchesByAssetIdByBatchIdGet");

            var localVarPath = "./tracker/assets/issuedbatches/{assetId}/{batchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", Configuration.ApiClient.ParameterToString(batchId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsIssuedbatchesByAssetIdByBatchIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IssuedBatchTransactionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchTransactionsResponse)));
        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>IssuedBatchesResponse</returns>
        public IssuedBatchesResponse TrackerAssetsIssuedbatchesByAssetIdGet (string assetId)
        {
             ApiResponse<IssuedBatchesResponse> localVarResponse = TrackerAssetsIssuedbatchesByAssetIdGetWithHttpInfo(assetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>ApiResponse of IssuedBatchesResponse</returns>
        public ApiResponse< IssuedBatchesResponse > TrackerAssetsIssuedbatchesByAssetIdGetWithHttpInfo (string assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerAssetsIssuedbatchesByAssetIdGet");

            var localVarPath = "./tracker/assets/issuedbatches/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsIssuedbatchesByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IssuedBatchesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchesResponse)));
        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of IssuedBatchesResponse</returns>
        public async System.Threading.Tasks.Task<IssuedBatchesResponse> TrackerAssetsIssuedbatchesByAssetIdGetAsync (string assetId)
        {
             ApiResponse<IssuedBatchesResponse> localVarResponse = await TrackerAssetsIssuedbatchesByAssetIdGetAsyncWithHttpInfo(assetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of ApiResponse (IssuedBatchesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuedBatchesResponse>> TrackerAssetsIssuedbatchesByAssetIdGetAsyncWithHttpInfo (string assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerAssetsIssuedbatchesByAssetIdGet");

            var localVarPath = "./tracker/assets/issuedbatches/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsIssuedbatchesByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IssuedBatchesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchesResponse)));
        }

        /// <summary>
        /// [ASSETS] Creates an asset in Tracker. This asset will then be issuable and transferable between entities. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerAsset</returns>
        public TrackerAsset TrackerAssetsPost (TrackerAssetCreateRequest request = null)
        {
             ApiResponse<TrackerAsset> localVarResponse = TrackerAssetsPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Creates an asset in Tracker. This asset will then be issuable and transferable between entities. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        public ApiResponse< TrackerAsset > TrackerAssetsPostWithHttpInfo (TrackerAssetCreateRequest request = null)
        {

            var localVarPath = "./tracker/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
        }

        /// <summary>
        /// [ASSETS] Creates an asset in Tracker. This asset will then be issuable and transferable between entities. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerAsset</returns>
        public async System.Threading.Tasks.Task<TrackerAsset> TrackerAssetsPostAsync (TrackerAssetCreateRequest request = null)
        {
             ApiResponse<TrackerAsset> localVarResponse = await TrackerAssetsPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Creates an asset in Tracker. This asset will then be issuable and transferable between entities. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> TrackerAssetsPostAsyncWithHttpInfo (TrackerAssetCreateRequest request = null)
        {

            var localVarPath = "./tracker/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerAssetsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
        }

        /// <summary>
        /// [STATS] Get 3 statistics regarding the usage of Tracker in the last 24 hours. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TrackerStatsResponse</returns>
        public TrackerStatsResponse TrackerStatsGet ()
        {
             ApiResponse<TrackerStatsResponse> localVarResponse = TrackerStatsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// [STATS] Get 3 statistics regarding the usage of Tracker in the last 24 hours. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TrackerStatsResponse</returns>
        public ApiResponse< TrackerStatsResponse > TrackerStatsGetWithHttpInfo ()
        {

            var localVarPath = "./tracker/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerStatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerStatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerStatsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerStatsResponse)));
        }

        /// <summary>
        /// [STATS] Get 3 statistics regarding the usage of Tracker in the last 24 hours. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TrackerStatsResponse</returns>
        public async System.Threading.Tasks.Task<TrackerStatsResponse> TrackerStatsGetAsync ()
        {
             ApiResponse<TrackerStatsResponse> localVarResponse = await TrackerStatsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// [STATS] Get 3 statistics regarding the usage of Tracker in the last 24 hours. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TrackerStatsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerStatsResponse>> TrackerStatsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./tracker/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerStatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerStatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerStatsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerStatsResponse)));
        }

        /// <summary>
        /// [TRANSACTIONS] Get all of the latest transactions that have been performed in Tracker. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        public List<AssetTransaction> TrackerTransactionsGet (DateTime? beforeDateTime = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = TrackerTransactionsGetWithHttpInfo(beforeDateTime, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [TRANSACTIONS] Get all of the latest transactions that have been performed in Tracker. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        public ApiResponse< List<AssetTransaction> > TrackerTransactionsGetWithHttpInfo (DateTime? beforeDateTime = null, int? limit = null, int? offset = null)
        {

            var localVarPath = "./tracker/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beforeDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeDateTime", beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerTransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
        }

        /// <summary>
        /// [TRANSACTIONS] Get all of the latest transactions that have been performed in Tracker. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetTransaction>> TrackerTransactionsGetAsync (DateTime? beforeDateTime = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = await TrackerTransactionsGetAsyncWithHttpInfo(beforeDateTime, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [TRANSACTIONS] Get all of the latest transactions that have been performed in Tracker. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> TrackerTransactionsGetAsyncWithHttpInfo (DateTime? beforeDateTime = null, int? limit = null, int? offset = null)
        {

            var localVarPath = "./tracker/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beforeDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeDateTime", beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerTransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
        }

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction. This operation will refund the amounts that have been sent from a user to another by creating a new transaction. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void TrackerTransactionsReversePost (TrackerTransactionRevertRequest request = null)
        {
             TrackerTransactionsReversePostWithHttpInfo(request);
        }

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction. This operation will refund the amounts that have been sent from a user to another by creating a new transaction. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerTransactionsReversePostWithHttpInfo (TrackerTransactionRevertRequest request = null)
        {

            var localVarPath = "./tracker/transactions/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerTransactionsReversePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction. This operation will refund the amounts that have been sent from a user to another by creating a new transaction. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerTransactionsReversePostAsync (TrackerTransactionRevertRequest request = null)
        {
             await TrackerTransactionsReversePostAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction. This operation will refund the amounts that have been sent from a user to another by creating a new transaction. Requires the Tracker Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerTransactionsReversePostAsyncWithHttpInfo (TrackerTransactionRevertRequest request = null)
        {

            var localVarPath = "./tracker/transactions/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerTransactionsReversePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user from one of your specific batches. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void TrackerWalletBatchesTransferPost (TrackerBatchTransferRequest request = null)
        {
             TrackerWalletBatchesTransferPostWithHttpInfo(request);
        }

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user from one of your specific batches. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerWalletBatchesTransferPostWithHttpInfo (TrackerBatchTransferRequest request = null)
        {

            var localVarPath = "./tracker/wallet/batches/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerWalletBatchesTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user from one of your specific batches. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerWalletBatchesTransferPostAsync (TrackerBatchTransferRequest request = null)
        {
             await TrackerWalletBatchesTransferPostAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user from one of your specific batches. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerWalletBatchesTransferPostAsyncWithHttpInfo (TrackerBatchTransferRequest request = null)
        {

            var localVarPath = "./tracker/wallet/batches/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerWalletBatchesTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [WALLET] Get all of the logged user&#39;s asset balances for a specific main coin. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DetailedAssetBalance&gt;</returns>
        public List<DetailedAssetBalance> TrackerWalletDetailedbalancesGet ()
        {
             ApiResponse<List<DetailedAssetBalance>> localVarResponse = TrackerWalletDetailedbalancesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// [WALLET] Get all of the logged user&#39;s asset balances for a specific main coin. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DetailedAssetBalance&gt;</returns>
        public ApiResponse< List<DetailedAssetBalance> > TrackerWalletDetailedbalancesGetWithHttpInfo ()
        {

            var localVarPath = "./tracker/wallet/detailedbalances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerWalletDetailedbalancesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DetailedAssetBalance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DetailedAssetBalance>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DetailedAssetBalance>)));
        }

        /// <summary>
        /// [WALLET] Get all of the logged user&#39;s asset balances for a specific main coin. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DetailedAssetBalance&gt;</returns>
        public async System.Threading.Tasks.Task<List<DetailedAssetBalance>> TrackerWalletDetailedbalancesGetAsync ()
        {
             ApiResponse<List<DetailedAssetBalance>> localVarResponse = await TrackerWalletDetailedbalancesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// [WALLET] Get all of the logged user&#39;s asset balances for a specific main coin. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DetailedAssetBalance&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DetailedAssetBalance>>> TrackerWalletDetailedbalancesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./tracker/wallet/detailedbalances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerWalletDetailedbalancesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DetailedAssetBalance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DetailedAssetBalance>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DetailedAssetBalance>)));
        }

        /// <summary>
        /// [WALLET] Get all transactions for a specific asset. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        public List<AssetTransaction> TrackerWalletTransactionsByAssetIdGet (string assetId)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = TrackerWalletTransactionsByAssetIdGetWithHttpInfo(assetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [WALLET] Get all transactions for a specific asset. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        public ApiResponse< List<AssetTransaction> > TrackerWalletTransactionsByAssetIdGetWithHttpInfo (string assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerWalletTransactionsByAssetIdGet");

            var localVarPath = "./tracker/wallet/transactions/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerWalletTransactionsByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
        }

        /// <summary>
        /// [WALLET] Get all transactions for a specific asset. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetTransaction>> TrackerWalletTransactionsByAssetIdGetAsync (string assetId)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = await TrackerWalletTransactionsByAssetIdGetAsyncWithHttpInfo(assetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [WALLET] Get all transactions for a specific asset. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> TrackerWalletTransactionsByAssetIdGetAsyncWithHttpInfo (string assetId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerWalletTransactionsByAssetIdGet");

            var localVarPath = "./tracker/wallet/transactions/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerWalletTransactionsByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
        }

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void TrackerWalletTransferPost (TrackerTransferRequest request = null)
        {
             TrackerWalletTransferPostWithHttpInfo(request);
        }

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerWalletTransferPostWithHttpInfo (TrackerTransferRequest request = null)
        {

            var localVarPath = "./tracker/wallet/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerWalletTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerWalletTransferPostAsync (TrackerTransferRequest request = null)
        {
             await TrackerWalletTransferPostAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// [WALLET] Create a transfer between yourself and another user. Requires the Tracker Admin Role or Tracker User Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerWalletTransferPostAsyncWithHttpInfo (TrackerTransferRequest request = null)
        {

            var localVarPath = "./tracker/wallet/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerWalletTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
