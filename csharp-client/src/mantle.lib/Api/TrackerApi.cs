/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <returns>IssuedBatchTransactionsResponse</returns>
        IssuedBatchTransactionsResponse TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGet (string assetId, string batchId, string productId);

        /// <summary>
        /// [] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of IssuedBatchTransactionsResponse</returns>
        ApiResponse<IssuedBatchTransactionsResponse> TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGetWithHttpInfo (string assetId, string batchId, string productId);
        /// <summary>
        /// [] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>IssuedBatchesResponse</returns>
        IssuedBatchesResponse TrackerByProductIdAssetsBatchesIssuedByAssetIdGet (string assetId, string productId);

        /// <summary>
        /// [] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of IssuedBatchesResponse</returns>
        ApiResponse<IssuedBatchesResponse> TrackerByProductIdAssetsBatchesIssuedByAssetIdGetWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Get all issued batches for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>IssuedBatchesResponse</returns>
        IssuedBatchesResponse TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGet (string assetId, string productId);

        /// <summary>
        /// [] Get all issued batches for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of IssuedBatchesResponse</returns>
        ApiResponse<IssuedBatchesResponse> TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGetWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Delete an asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        void TrackerByProductIdAssetsByAssetIdDelete (string assetId, string productId);

        /// <summary>
        /// [] Delete an asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerByProductIdAssetsByAssetIdDeleteWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Get a specific asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>TrackerAsset</returns>
        TrackerAsset TrackerByProductIdAssetsByAssetIdGet (string assetId, string productId);

        /// <summary>
        /// [] Get a specific asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        ApiResponse<TrackerAsset> TrackerByProductIdAssetsByAssetIdGetWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Edit an asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void TrackerByProductIdAssetsByAssetIdPut (string assetId, string productId, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [] Edit an asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerByProductIdAssetsByAssetIdPutWithHttpInfo (string assetId, string productId, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [] Get all assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;TrackerAsset&gt;</returns>
        List<TrackerAsset> TrackerByProductIdAssetsGet (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null);

        /// <summary>
        /// [] Get all assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerAsset&gt;</returns>
        ApiResponse<List<TrackerAsset>> TrackerByProductIdAssetsGetWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null);
        /// <summary>
        /// [] Issue a certain amount of asset to a recipient
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void TrackerByProductIdAssetsIssuePost (string productId, TrackerAssetIssueRequest request = null);

        /// <summary>
        /// [] Issue a certain amount of asset to a recipient
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerByProductIdAssetsIssuePostWithHttpInfo (string productId, TrackerAssetIssueRequest request = null);
        /// <summary>
        /// [] Create an asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerAsset</returns>
        TrackerAsset TrackerByProductIdAssetsPost (string productId, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [] Create an asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        ApiResponse<TrackerAsset> TrackerByProductIdAssetsPostWithHttpInfo (string productId, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [] Get a specific multi asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>TrackerMultiAsset</returns>
        TrackerMultiAsset TrackerByProductIdMultiAssetsByAssetIdGet (string assetId, string productId);

        /// <summary>
        /// [] Get a specific multi asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of TrackerMultiAsset</returns>
        ApiResponse<TrackerMultiAsset> TrackerByProductIdMultiAssetsByAssetIdGetWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Get all multi assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;TrackerMultiAsset&gt;</returns>
        List<TrackerMultiAsset> TrackerByProductIdMultiAssetsGet (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null, string request = null);

        /// <summary>
        /// [] Get all multi assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerMultiAsset&gt;</returns>
        ApiResponse<List<TrackerMultiAsset>> TrackerByProductIdMultiAssetsGetWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null, string request = null);
        /// <summary>
        /// [] Creates a multi asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerMultiAsset</returns>
        TrackerMultiAsset TrackerByProductIdMultiAssetsPost (string productId, TrackerMultiAssetCreateRequest request = null);

        /// <summary>
        /// [] Creates a multi asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerMultiAsset</returns>
        ApiResponse<TrackerMultiAsset> TrackerByProductIdMultiAssetsPostWithHttpInfo (string productId, TrackerMultiAssetCreateRequest request = null);
        /// <summary>
        /// [] Get 3 statistics regarding the usage of Tracker in the last 24 hours
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>TrackerStatsResponse</returns>
        TrackerStatsResponse TrackerByProductIdStatsGet (string productId);

        /// <summary>
        /// [] Get 3 statistics regarding the usage of Tracker in the last 24 hours
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of TrackerStatsResponse</returns>
        ApiResponse<TrackerStatsResponse> TrackerByProductIdStatsGetWithHttpInfo (string productId);
        /// <summary>
        /// [] Get all transactions
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        List<AssetTransaction> TrackerByProductIdTransactionsGet (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null);

        /// <summary>
        /// [] Get all transactions
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        ApiResponse<List<AssetTransaction>> TrackerByProductIdTransactionsGetWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null);
        /// <summary>
        /// [] Revert a transaction
        /// </summary>
        /// <remarks>
        /// This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void TrackerByProductIdTransactionsReversePost (string productId, TrackerTransactionRevertRequest request = null);

        /// <summary>
        /// [] Revert a transaction
        /// </summary>
        /// <remarks>
        /// This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerByProductIdTransactionsReversePostWithHttpInfo (string productId, TrackerTransactionRevertRequest request = null);
        /// <summary>
        /// [] Get all authenticated user&#39;s asset balances
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>List&lt;DetailedAssetBalance&gt;</returns>
        List<DetailedAssetBalance> TrackerByProductIdWalletBalancesDetailedGet (string productId);

        /// <summary>
        /// [] Get all authenticated user&#39;s asset balances
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of List&lt;DetailedAssetBalance&gt;</returns>
        ApiResponse<List<DetailedAssetBalance>> TrackerByProductIdWalletBalancesDetailedGetWithHttpInfo (string productId);
        /// <summary>
        /// [] Create a transfer between yourself and another user from one of your specific batches
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void TrackerByProductIdWalletBatchesTransferPost (string productId, TrackerBatchTransferRequest request = null);

        /// <summary>
        /// [] Create a transfer between yourself and another user from one of your specific batches
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerByProductIdWalletBatchesTransferPostWithHttpInfo (string productId, TrackerBatchTransferRequest request = null);
        /// <summary>
        /// [] Get all transactions for a specific asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        List<AssetTransaction> TrackerByProductIdWalletTransactionsByAssetIdGet (string assetId, string productId);

        /// <summary>
        /// [] Get all transactions for a specific asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        ApiResponse<List<AssetTransaction>> TrackerByProductIdWalletTransactionsByAssetIdGetWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Create a transfer between yourself and another user
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void TrackerByProductIdWalletTransferPost (string productId, TrackerTransferRequest request = null);

        /// <summary>
        /// [] Create a transfer between yourself and another user
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrackerByProductIdWalletTransferPostWithHttpInfo (string productId, TrackerTransferRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of IssuedBatchTransactionsResponse</returns>
        System.Threading.Tasks.Task<IssuedBatchTransactionsResponse> TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGetAsync (string assetId, string batchId, string productId);

        /// <summary>
        /// [] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (IssuedBatchTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedBatchTransactionsResponse>> TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGetAsyncWithHttpInfo (string assetId, string batchId, string productId);
        /// <summary>
        /// [] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of IssuedBatchesResponse</returns>
        System.Threading.Tasks.Task<IssuedBatchesResponse> TrackerByProductIdAssetsBatchesIssuedByAssetIdGetAsync (string assetId, string productId);

        /// <summary>
        /// [] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (IssuedBatchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedBatchesResponse>> TrackerByProductIdAssetsBatchesIssuedByAssetIdGetAsyncWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Get all issued batches for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of IssuedBatchesResponse</returns>
        System.Threading.Tasks.Task<IssuedBatchesResponse> TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGetAsync (string assetId, string productId);

        /// <summary>
        /// [] Get all issued batches for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (IssuedBatchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedBatchesResponse>> TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGetAsyncWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Delete an asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerByProductIdAssetsByAssetIdDeleteAsync (string assetId, string productId);

        /// <summary>
        /// [] Delete an asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdAssetsByAssetIdDeleteAsyncWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Get a specific asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of TrackerAsset</returns>
        System.Threading.Tasks.Task<TrackerAsset> TrackerByProductIdAssetsByAssetIdGetAsync (string assetId, string productId);

        /// <summary>
        /// [] Get a specific asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> TrackerByProductIdAssetsByAssetIdGetAsyncWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Edit an asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerByProductIdAssetsByAssetIdPutAsync (string assetId, string productId, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [] Edit an asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdAssetsByAssetIdPutAsyncWithHttpInfo (string assetId, string productId, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [] Get all assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;TrackerAsset&gt;</returns>
        System.Threading.Tasks.Task<List<TrackerAsset>> TrackerByProductIdAssetsGetAsync (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null);

        /// <summary>
        /// [] Get all assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerAsset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackerAsset>>> TrackerByProductIdAssetsGetAsyncWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null);
        /// <summary>
        /// [] Issue a certain amount of asset to a recipient
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerByProductIdAssetsIssuePostAsync (string productId, TrackerAssetIssueRequest request = null);

        /// <summary>
        /// [] Issue a certain amount of asset to a recipient
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdAssetsIssuePostAsyncWithHttpInfo (string productId, TrackerAssetIssueRequest request = null);
        /// <summary>
        /// [] Create an asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerAsset</returns>
        System.Threading.Tasks.Task<TrackerAsset> TrackerByProductIdAssetsPostAsync (string productId, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [] Create an asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> TrackerByProductIdAssetsPostAsyncWithHttpInfo (string productId, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [] Get a specific multi asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of TrackerMultiAsset</returns>
        System.Threading.Tasks.Task<TrackerMultiAsset> TrackerByProductIdMultiAssetsByAssetIdGetAsync (string assetId, string productId);

        /// <summary>
        /// [] Get a specific multi asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (TrackerMultiAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerMultiAsset>> TrackerByProductIdMultiAssetsByAssetIdGetAsyncWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Get all multi assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;TrackerMultiAsset&gt;</returns>
        System.Threading.Tasks.Task<List<TrackerMultiAsset>> TrackerByProductIdMultiAssetsGetAsync (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null, string request = null);

        /// <summary>
        /// [] Get all multi assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerMultiAsset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackerMultiAsset>>> TrackerByProductIdMultiAssetsGetAsyncWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null, string request = null);
        /// <summary>
        /// [] Creates a multi asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerMultiAsset</returns>
        System.Threading.Tasks.Task<TrackerMultiAsset> TrackerByProductIdMultiAssetsPostAsync (string productId, TrackerMultiAssetCreateRequest request = null);

        /// <summary>
        /// [] Creates a multi asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerMultiAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerMultiAsset>> TrackerByProductIdMultiAssetsPostAsyncWithHttpInfo (string productId, TrackerMultiAssetCreateRequest request = null);
        /// <summary>
        /// [] Get 3 statistics regarding the usage of Tracker in the last 24 hours
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of TrackerStatsResponse</returns>
        System.Threading.Tasks.Task<TrackerStatsResponse> TrackerByProductIdStatsGetAsync (string productId);

        /// <summary>
        /// [] Get 3 statistics regarding the usage of Tracker in the last 24 hours
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (TrackerStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerStatsResponse>> TrackerByProductIdStatsGetAsyncWithHttpInfo (string productId);
        /// <summary>
        /// [] Get all transactions
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<AssetTransaction>> TrackerByProductIdTransactionsGetAsync (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null);

        /// <summary>
        /// [] Get all transactions
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> TrackerByProductIdTransactionsGetAsyncWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null);
        /// <summary>
        /// [] Revert a transaction
        /// </summary>
        /// <remarks>
        /// This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerByProductIdTransactionsReversePostAsync (string productId, TrackerTransactionRevertRequest request = null);

        /// <summary>
        /// [] Revert a transaction
        /// </summary>
        /// <remarks>
        /// This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdTransactionsReversePostAsyncWithHttpInfo (string productId, TrackerTransactionRevertRequest request = null);
        /// <summary>
        /// [] Get all authenticated user&#39;s asset balances
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of List&lt;DetailedAssetBalance&gt;</returns>
        System.Threading.Tasks.Task<List<DetailedAssetBalance>> TrackerByProductIdWalletBalancesDetailedGetAsync (string productId);

        /// <summary>
        /// [] Get all authenticated user&#39;s asset balances
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (List&lt;DetailedAssetBalance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DetailedAssetBalance>>> TrackerByProductIdWalletBalancesDetailedGetAsyncWithHttpInfo (string productId);
        /// <summary>
        /// [] Create a transfer between yourself and another user from one of your specific batches
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerByProductIdWalletBatchesTransferPostAsync (string productId, TrackerBatchTransferRequest request = null);

        /// <summary>
        /// [] Create a transfer between yourself and another user from one of your specific batches
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdWalletBatchesTransferPostAsyncWithHttpInfo (string productId, TrackerBatchTransferRequest request = null);
        /// <summary>
        /// [] Get all transactions for a specific asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<AssetTransaction>> TrackerByProductIdWalletTransactionsByAssetIdGetAsync (string assetId, string productId);

        /// <summary>
        /// [] Get all transactions for a specific asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> TrackerByProductIdWalletTransactionsByAssetIdGetAsyncWithHttpInfo (string assetId, string productId);
        /// <summary>
        /// [] Create a transfer between yourself and another user
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrackerByProductIdWalletTransferPostAsync (string productId, TrackerTransferRequest request = null);

        /// <summary>
        /// [] Create a transfer between yourself and another user
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdWalletTransferPostAsyncWithHttpInfo (string productId, TrackerTransferRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrackerApi : ITrackerApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackerApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrackerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <returns>IssuedBatchTransactionsResponse</returns>
        public IssuedBatchTransactionsResponse TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGet (string assetId, string batchId, string productId)
        {
             ApiResponse<IssuedBatchTransactionsResponse> localVarResponse = TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGetWithHttpInfo(assetId, batchId, productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of IssuedBatchTransactionsResponse</returns>
        public ApiResponse< IssuedBatchTransactionsResponse > TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGetWithHttpInfo (string assetId, string batchId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGet");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGet");

            var localVarPath = "./tracker/{productId}/assets/batches/issued/{assetId}/{batchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", Configuration.ApiClient.ParameterToString(batchId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IssuedBatchTransactionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchTransactionsResponse)));
        }

        /// <summary>
        /// [] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of IssuedBatchTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<IssuedBatchTransactionsResponse> TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGetAsync (string assetId, string batchId, string productId)
        {
             ApiResponse<IssuedBatchTransactionsResponse> localVarResponse = await TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGetAsyncWithHttpInfo(assetId, batchId, productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (IssuedBatchTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuedBatchTransactionsResponse>> TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGetAsyncWithHttpInfo (string assetId, string batchId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGet");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGet");

            var localVarPath = "./tracker/{productId}/assets/batches/issued/{assetId}/{batchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", Configuration.ApiClient.ParameterToString(batchId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsBatchesIssuedByAssetIdByBatchIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IssuedBatchTransactionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchTransactionsResponse)));
        }

        /// <summary>
        /// [] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>IssuedBatchesResponse</returns>
        public IssuedBatchesResponse TrackerByProductIdAssetsBatchesIssuedByAssetIdGet (string assetId, string productId)
        {
             ApiResponse<IssuedBatchesResponse> localVarResponse = TrackerByProductIdAssetsBatchesIssuedByAssetIdGetWithHttpInfo(assetId, productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of IssuedBatchesResponse</returns>
        public ApiResponse< IssuedBatchesResponse > TrackerByProductIdAssetsBatchesIssuedByAssetIdGetWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedByAssetIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedByAssetIdGet");

            var localVarPath = "./tracker/{productId}/assets/batches/issued/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsBatchesIssuedByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IssuedBatchesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchesResponse)));
        }

        /// <summary>
        /// [] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of IssuedBatchesResponse</returns>
        public async System.Threading.Tasks.Task<IssuedBatchesResponse> TrackerByProductIdAssetsBatchesIssuedByAssetIdGetAsync (string assetId, string productId)
        {
             ApiResponse<IssuedBatchesResponse> localVarResponse = await TrackerByProductIdAssetsBatchesIssuedByAssetIdGetAsyncWithHttpInfo(assetId, productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (IssuedBatchesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuedBatchesResponse>> TrackerByProductIdAssetsBatchesIssuedByAssetIdGetAsyncWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedByAssetIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedByAssetIdGet");

            var localVarPath = "./tracker/{productId}/assets/batches/issued/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsBatchesIssuedByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IssuedBatchesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchesResponse)));
        }

        /// <summary>
        /// [] Get all issued batches for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>IssuedBatchesResponse</returns>
        public IssuedBatchesResponse TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGet (string assetId, string productId)
        {
             ApiResponse<IssuedBatchesResponse> localVarResponse = TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGetWithHttpInfo(assetId, productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all issued batches for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of IssuedBatchesResponse</returns>
        public ApiResponse< IssuedBatchesResponse > TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGetWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGet");

            var localVarPath = "./tracker/{productId}/assets/batches/issued/multi/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IssuedBatchesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchesResponse)));
        }

        /// <summary>
        /// [] Get all issued batches for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of IssuedBatchesResponse</returns>
        public async System.Threading.Tasks.Task<IssuedBatchesResponse> TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGetAsync (string assetId, string productId)
        {
             ApiResponse<IssuedBatchesResponse> localVarResponse = await TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGetAsyncWithHttpInfo(assetId, productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all issued batches for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (IssuedBatchesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuedBatchesResponse>> TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGetAsyncWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGet");

            var localVarPath = "./tracker/{productId}/assets/batches/issued/multi/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsBatchesIssuedMultiByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IssuedBatchesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchesResponse)));
        }

        /// <summary>
        /// [] Delete an asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        public void TrackerByProductIdAssetsByAssetIdDelete (string assetId, string productId)
        {
             TrackerByProductIdAssetsByAssetIdDeleteWithHttpInfo(assetId, productId);
        }

        /// <summary>
        /// [] Delete an asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerByProductIdAssetsByAssetIdDeleteWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdDelete");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdDelete");

            var localVarPath = "./tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsByAssetIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Delete an asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerByProductIdAssetsByAssetIdDeleteAsync (string assetId, string productId)
        {
             await TrackerByProductIdAssetsByAssetIdDeleteAsyncWithHttpInfo(assetId, productId);

        }

        /// <summary>
        /// [] Delete an asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdAssetsByAssetIdDeleteAsyncWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdDelete");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdDelete");

            var localVarPath = "./tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsByAssetIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Get a specific asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>TrackerAsset</returns>
        public TrackerAsset TrackerByProductIdAssetsByAssetIdGet (string assetId, string productId)
        {
             ApiResponse<TrackerAsset> localVarResponse = TrackerByProductIdAssetsByAssetIdGetWithHttpInfo(assetId, productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get a specific asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        public ApiResponse< TrackerAsset > TrackerByProductIdAssetsByAssetIdGetWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdGet");

            var localVarPath = "./tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
        }

        /// <summary>
        /// [] Get a specific asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of TrackerAsset</returns>
        public async System.Threading.Tasks.Task<TrackerAsset> TrackerByProductIdAssetsByAssetIdGetAsync (string assetId, string productId)
        {
             ApiResponse<TrackerAsset> localVarResponse = await TrackerByProductIdAssetsByAssetIdGetAsyncWithHttpInfo(assetId, productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get a specific asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> TrackerByProductIdAssetsByAssetIdGetAsyncWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdGet");

            var localVarPath = "./tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
        }

        /// <summary>
        /// [] Edit an asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void TrackerByProductIdAssetsByAssetIdPut (string assetId, string productId, TrackerAssetCreateRequest request = null)
        {
             TrackerByProductIdAssetsByAssetIdPutWithHttpInfo(assetId, productId, request);
        }

        /// <summary>
        /// [] Edit an asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerByProductIdAssetsByAssetIdPutWithHttpInfo (string assetId, string productId, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdPut");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdPut");

            var localVarPath = "./tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsByAssetIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Edit an asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerByProductIdAssetsByAssetIdPutAsync (string assetId, string productId, TrackerAssetCreateRequest request = null)
        {
             await TrackerByProductIdAssetsByAssetIdPutAsyncWithHttpInfo(assetId, productId, request);

        }

        /// <summary>
        /// [] Edit an asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdAssetsByAssetIdPutAsyncWithHttpInfo (string assetId, string productId, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdPut");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsByAssetIdPut");

            var localVarPath = "./tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsByAssetIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Get all assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;TrackerAsset&gt;</returns>
        public List<TrackerAsset> TrackerByProductIdAssetsGet (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null)
        {
             ApiResponse<List<TrackerAsset>> localVarResponse = TrackerByProductIdAssetsGetWithHttpInfo(productId, beforeDateTime, limit, offset, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerAsset&gt;</returns>
        public ApiResponse< List<TrackerAsset> > TrackerByProductIdAssetsGetWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsGet");

            var localVarPath = "./tracker/{productId}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (beforeDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeDateTime", beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TrackerAsset>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerAsset>)));
        }

        /// <summary>
        /// [] Get all assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;TrackerAsset&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackerAsset>> TrackerByProductIdAssetsGetAsync (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null)
        {
             ApiResponse<List<TrackerAsset>> localVarResponse = await TrackerByProductIdAssetsGetAsyncWithHttpInfo(productId, beforeDateTime, limit, offset, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerAsset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackerAsset>>> TrackerByProductIdAssetsGetAsyncWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsGet");

            var localVarPath = "./tracker/{productId}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (beforeDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeDateTime", beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TrackerAsset>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerAsset>)));
        }

        /// <summary>
        /// [] Issue a certain amount of asset to a recipient Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void TrackerByProductIdAssetsIssuePost (string productId, TrackerAssetIssueRequest request = null)
        {
             TrackerByProductIdAssetsIssuePostWithHttpInfo(productId, request);
        }

        /// <summary>
        /// [] Issue a certain amount of asset to a recipient Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerByProductIdAssetsIssuePostWithHttpInfo (string productId, TrackerAssetIssueRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsIssuePost");

            var localVarPath = "./tracker/{productId}/assets/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsIssuePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Issue a certain amount of asset to a recipient Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerByProductIdAssetsIssuePostAsync (string productId, TrackerAssetIssueRequest request = null)
        {
             await TrackerByProductIdAssetsIssuePostAsyncWithHttpInfo(productId, request);

        }

        /// <summary>
        /// [] Issue a certain amount of asset to a recipient Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdAssetsIssuePostAsyncWithHttpInfo (string productId, TrackerAssetIssueRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsIssuePost");

            var localVarPath = "./tracker/{productId}/assets/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsIssuePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Create an asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerAsset</returns>
        public TrackerAsset TrackerByProductIdAssetsPost (string productId, TrackerAssetCreateRequest request = null)
        {
             ApiResponse<TrackerAsset> localVarResponse = TrackerByProductIdAssetsPostWithHttpInfo(productId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Create an asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        public ApiResponse< TrackerAsset > TrackerByProductIdAssetsPostWithHttpInfo (string productId, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsPost");

            var localVarPath = "./tracker/{productId}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
        }

        /// <summary>
        /// [] Create an asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerAsset</returns>
        public async System.Threading.Tasks.Task<TrackerAsset> TrackerByProductIdAssetsPostAsync (string productId, TrackerAssetCreateRequest request = null)
        {
             ApiResponse<TrackerAsset> localVarResponse = await TrackerByProductIdAssetsPostAsyncWithHttpInfo(productId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Create an asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> TrackerByProductIdAssetsPostAsyncWithHttpInfo (string productId, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdAssetsPost");

            var localVarPath = "./tracker/{productId}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdAssetsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
        }

        /// <summary>
        /// [] Get a specific multi asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>TrackerMultiAsset</returns>
        public TrackerMultiAsset TrackerByProductIdMultiAssetsByAssetIdGet (string assetId, string productId)
        {
             ApiResponse<TrackerMultiAsset> localVarResponse = TrackerByProductIdMultiAssetsByAssetIdGetWithHttpInfo(assetId, productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get a specific multi asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of TrackerMultiAsset</returns>
        public ApiResponse< TrackerMultiAsset > TrackerByProductIdMultiAssetsByAssetIdGetWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdMultiAssetsByAssetIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdMultiAssetsByAssetIdGet");

            var localVarPath = "./tracker/{productId}/multiassets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdMultiAssetsByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerMultiAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerMultiAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerMultiAsset)));
        }

        /// <summary>
        /// [] Get a specific multi asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of TrackerMultiAsset</returns>
        public async System.Threading.Tasks.Task<TrackerMultiAsset> TrackerByProductIdMultiAssetsByAssetIdGetAsync (string assetId, string productId)
        {
             ApiResponse<TrackerMultiAsset> localVarResponse = await TrackerByProductIdMultiAssetsByAssetIdGetAsyncWithHttpInfo(assetId, productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get a specific multi asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (TrackerMultiAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerMultiAsset>> TrackerByProductIdMultiAssetsByAssetIdGetAsyncWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdMultiAssetsByAssetIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdMultiAssetsByAssetIdGet");

            var localVarPath = "./tracker/{productId}/multiassets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdMultiAssetsByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerMultiAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerMultiAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerMultiAsset)));
        }

        /// <summary>
        /// [] Get all multi assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;TrackerMultiAsset&gt;</returns>
        public List<TrackerMultiAsset> TrackerByProductIdMultiAssetsGet (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null, string request = null)
        {
             ApiResponse<List<TrackerMultiAsset>> localVarResponse = TrackerByProductIdMultiAssetsGetWithHttpInfo(productId, beforeDateTime, limit, offset, assetIds, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all multi assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerMultiAsset&gt;</returns>
        public ApiResponse< List<TrackerMultiAsset> > TrackerByProductIdMultiAssetsGetWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null, string request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdMultiAssetsGet");

            var localVarPath = "./tracker/{productId}/multiassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (beforeDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeDateTime", beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (assetIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assetIds", assetIds)); // query parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdMultiAssetsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerMultiAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TrackerMultiAsset>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerMultiAsset>)));
        }

        /// <summary>
        /// [] Get all multi assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;TrackerMultiAsset&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackerMultiAsset>> TrackerByProductIdMultiAssetsGetAsync (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null, string request = null)
        {
             ApiResponse<List<TrackerMultiAsset>> localVarResponse = await TrackerByProductIdMultiAssetsGetAsyncWithHttpInfo(productId, beforeDateTime, limit, offset, assetIds, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all multi assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerMultiAsset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackerMultiAsset>>> TrackerByProductIdMultiAssetsGetAsyncWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null, string request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdMultiAssetsGet");

            var localVarPath = "./tracker/{productId}/multiassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (beforeDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeDateTime", beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (assetIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assetIds", assetIds)); // query parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdMultiAssetsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerMultiAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TrackerMultiAsset>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerMultiAsset>)));
        }

        /// <summary>
        /// [] Creates a multi asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerMultiAsset</returns>
        public TrackerMultiAsset TrackerByProductIdMultiAssetsPost (string productId, TrackerMultiAssetCreateRequest request = null)
        {
             ApiResponse<TrackerMultiAsset> localVarResponse = TrackerByProductIdMultiAssetsPostWithHttpInfo(productId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Creates a multi asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerMultiAsset</returns>
        public ApiResponse< TrackerMultiAsset > TrackerByProductIdMultiAssetsPostWithHttpInfo (string productId, TrackerMultiAssetCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdMultiAssetsPost");

            var localVarPath = "./tracker/{productId}/multiassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdMultiAssetsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerMultiAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerMultiAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerMultiAsset)));
        }

        /// <summary>
        /// [] Creates a multi asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerMultiAsset</returns>
        public async System.Threading.Tasks.Task<TrackerMultiAsset> TrackerByProductIdMultiAssetsPostAsync (string productId, TrackerMultiAssetCreateRequest request = null)
        {
             ApiResponse<TrackerMultiAsset> localVarResponse = await TrackerByProductIdMultiAssetsPostAsyncWithHttpInfo(productId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Creates a multi asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerMultiAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerMultiAsset>> TrackerByProductIdMultiAssetsPostAsyncWithHttpInfo (string productId, TrackerMultiAssetCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdMultiAssetsPost");

            var localVarPath = "./tracker/{productId}/multiassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdMultiAssetsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerMultiAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerMultiAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerMultiAsset)));
        }

        /// <summary>
        /// [] Get 3 statistics regarding the usage of Tracker in the last 24 hours Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>TrackerStatsResponse</returns>
        public TrackerStatsResponse TrackerByProductIdStatsGet (string productId)
        {
             ApiResponse<TrackerStatsResponse> localVarResponse = TrackerByProductIdStatsGetWithHttpInfo(productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get 3 statistics regarding the usage of Tracker in the last 24 hours Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of TrackerStatsResponse</returns>
        public ApiResponse< TrackerStatsResponse > TrackerByProductIdStatsGetWithHttpInfo (string productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdStatsGet");

            var localVarPath = "./tracker/{productId}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdStatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerStatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerStatsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerStatsResponse)));
        }

        /// <summary>
        /// [] Get 3 statistics regarding the usage of Tracker in the last 24 hours Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of TrackerStatsResponse</returns>
        public async System.Threading.Tasks.Task<TrackerStatsResponse> TrackerByProductIdStatsGetAsync (string productId)
        {
             ApiResponse<TrackerStatsResponse> localVarResponse = await TrackerByProductIdStatsGetAsyncWithHttpInfo(productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get 3 statistics regarding the usage of Tracker in the last 24 hours Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (TrackerStatsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerStatsResponse>> TrackerByProductIdStatsGetAsyncWithHttpInfo (string productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdStatsGet");

            var localVarPath = "./tracker/{productId}/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdStatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerStatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TrackerStatsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerStatsResponse)));
        }

        /// <summary>
        /// [] Get all transactions Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        public List<AssetTransaction> TrackerByProductIdTransactionsGet (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = TrackerByProductIdTransactionsGetWithHttpInfo(productId, beforeDateTime, limit, offset, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all transactions Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        public ApiResponse< List<AssetTransaction> > TrackerByProductIdTransactionsGetWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdTransactionsGet");

            var localVarPath = "./tracker/{productId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (beforeDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeDateTime", beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdTransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
        }

        /// <summary>
        /// [] Get all transactions Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetTransaction>> TrackerByProductIdTransactionsGetAsync (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = await TrackerByProductIdTransactionsGetAsyncWithHttpInfo(productId, beforeDateTime, limit, offset, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all transactions Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> TrackerByProductIdTransactionsGetAsyncWithHttpInfo (string productId, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdTransactionsGet");

            var localVarPath = "./tracker/{productId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (beforeDateTime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "beforeDateTime", beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdTransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
        }

        /// <summary>
        /// [] Revert a transaction This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void TrackerByProductIdTransactionsReversePost (string productId, TrackerTransactionRevertRequest request = null)
        {
             TrackerByProductIdTransactionsReversePostWithHttpInfo(productId, request);
        }

        /// <summary>
        /// [] Revert a transaction This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerByProductIdTransactionsReversePostWithHttpInfo (string productId, TrackerTransactionRevertRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdTransactionsReversePost");

            var localVarPath = "./tracker/{productId}/transactions/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdTransactionsReversePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Revert a transaction This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerByProductIdTransactionsReversePostAsync (string productId, TrackerTransactionRevertRequest request = null)
        {
             await TrackerByProductIdTransactionsReversePostAsyncWithHttpInfo(productId, request);

        }

        /// <summary>
        /// [] Revert a transaction This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdTransactionsReversePostAsyncWithHttpInfo (string productId, TrackerTransactionRevertRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdTransactionsReversePost");

            var localVarPath = "./tracker/{productId}/transactions/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdTransactionsReversePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Get all authenticated user&#39;s asset balances Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>List&lt;DetailedAssetBalance&gt;</returns>
        public List<DetailedAssetBalance> TrackerByProductIdWalletBalancesDetailedGet (string productId)
        {
             ApiResponse<List<DetailedAssetBalance>> localVarResponse = TrackerByProductIdWalletBalancesDetailedGetWithHttpInfo(productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all authenticated user&#39;s asset balances Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of List&lt;DetailedAssetBalance&gt;</returns>
        public ApiResponse< List<DetailedAssetBalance> > TrackerByProductIdWalletBalancesDetailedGetWithHttpInfo (string productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdWalletBalancesDetailedGet");

            var localVarPath = "./tracker/{productId}/wallet/balances/detailed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdWalletBalancesDetailedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DetailedAssetBalance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DetailedAssetBalance>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DetailedAssetBalance>)));
        }

        /// <summary>
        /// [] Get all authenticated user&#39;s asset balances Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of List&lt;DetailedAssetBalance&gt;</returns>
        public async System.Threading.Tasks.Task<List<DetailedAssetBalance>> TrackerByProductIdWalletBalancesDetailedGetAsync (string productId)
        {
             ApiResponse<List<DetailedAssetBalance>> localVarResponse = await TrackerByProductIdWalletBalancesDetailedGetAsyncWithHttpInfo(productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all authenticated user&#39;s asset balances Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (List&lt;DetailedAssetBalance&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DetailedAssetBalance>>> TrackerByProductIdWalletBalancesDetailedGetAsyncWithHttpInfo (string productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdWalletBalancesDetailedGet");

            var localVarPath = "./tracker/{productId}/wallet/balances/detailed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdWalletBalancesDetailedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DetailedAssetBalance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DetailedAssetBalance>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DetailedAssetBalance>)));
        }

        /// <summary>
        /// [] Create a transfer between yourself and another user from one of your specific batches Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void TrackerByProductIdWalletBatchesTransferPost (string productId, TrackerBatchTransferRequest request = null)
        {
             TrackerByProductIdWalletBatchesTransferPostWithHttpInfo(productId, request);
        }

        /// <summary>
        /// [] Create a transfer between yourself and another user from one of your specific batches Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerByProductIdWalletBatchesTransferPostWithHttpInfo (string productId, TrackerBatchTransferRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdWalletBatchesTransferPost");

            var localVarPath = "./tracker/{productId}/wallet/batches/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdWalletBatchesTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Create a transfer between yourself and another user from one of your specific batches Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerByProductIdWalletBatchesTransferPostAsync (string productId, TrackerBatchTransferRequest request = null)
        {
             await TrackerByProductIdWalletBatchesTransferPostAsyncWithHttpInfo(productId, request);

        }

        /// <summary>
        /// [] Create a transfer between yourself and another user from one of your specific batches Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdWalletBatchesTransferPostAsyncWithHttpInfo (string productId, TrackerBatchTransferRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdWalletBatchesTransferPost");

            var localVarPath = "./tracker/{productId}/wallet/batches/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdWalletBatchesTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Get all transactions for a specific asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        public List<AssetTransaction> TrackerByProductIdWalletTransactionsByAssetIdGet (string assetId, string productId)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = TrackerByProductIdWalletTransactionsByAssetIdGetWithHttpInfo(assetId, productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all transactions for a specific asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        public ApiResponse< List<AssetTransaction> > TrackerByProductIdWalletTransactionsByAssetIdGetWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdWalletTransactionsByAssetIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdWalletTransactionsByAssetIdGet");

            var localVarPath = "./tracker/{productId}/wallet/transactions/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdWalletTransactionsByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
        }

        /// <summary>
        /// [] Get all transactions for a specific asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetTransaction>> TrackerByProductIdWalletTransactionsByAssetIdGetAsync (string assetId, string productId)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = await TrackerByProductIdWalletTransactionsByAssetIdGetAsyncWithHttpInfo(assetId, productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all transactions for a specific asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> TrackerByProductIdWalletTransactionsByAssetIdGetAsyncWithHttpInfo (string assetId, string productId)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->TrackerByProductIdWalletTransactionsByAssetIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdWalletTransactionsByAssetIdGet");

            var localVarPath = "./tracker/{productId}/wallet/transactions/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdWalletTransactionsByAssetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
        }

        /// <summary>
        /// [] Create a transfer between yourself and another user Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void TrackerByProductIdWalletTransferPost (string productId, TrackerTransferRequest request = null)
        {
             TrackerByProductIdWalletTransferPostWithHttpInfo(productId, request);
        }

        /// <summary>
        /// [] Create a transfer between yourself and another user Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrackerByProductIdWalletTransferPostWithHttpInfo (string productId, TrackerTransferRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdWalletTransferPost");

            var localVarPath = "./tracker/{productId}/wallet/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdWalletTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Create a transfer between yourself and another user Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrackerByProductIdWalletTransferPostAsync (string productId, TrackerTransferRequest request = null)
        {
             await TrackerByProductIdWalletTransferPostAsyncWithHttpInfo(productId, request);

        }

        /// <summary>
        /// [] Create a transfer between yourself and another user Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrackerByProductIdWalletTransferPostAsyncWithHttpInfo (string productId, TrackerTransferRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->TrackerByProductIdWalletTransferPost");

            var localVarPath = "./tracker/{productId}/wallet/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrackerByProductIdWalletTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
