/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [ASSETS] Create an asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerAsset</returns>
        TrackerAsset CreateAsset (string productId, string xApiKey, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [ASSETS] Create an asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        ApiResponse<TrackerAsset> CreateAssetWithHttpInfo (string productId, string xApiKey, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [ASSETS] Create a transfer for one or many batches for an asset
        /// </summary>
        /// <remarks>
        /// The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns></returns>
        void CreateAssetBatchTransfer (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null);

        /// <summary>
        /// [ASSETS] Create a transfer for one or many batches for an asset
        /// </summary>
        /// <remarks>
        /// The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateAssetBatchTransferWithHttpInfo (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null);
        /// <summary>
        /// [ASSETS] Create a transfer for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        List<AssetTransaction> CreateAssetTransfer (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null);

        /// <summary>
        /// [ASSETS] Create a transfer for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        ApiResponse<List<AssetTransaction>> CreateAssetTransferWithHttpInfo (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null);
        /// <summary>
        /// [ASSETS] Create transfers in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <param name="ownedId"> (optional)</param>
        /// <returns>List&lt;TrackerBatchTransferBulkResponse&gt;</returns>
        List<TrackerBatchTransferBulkResponse> CreateAssetTransferBulk (string productId, string xApiKey, List<TrackerBatchTransferBulkRequest> requests = null, string ownedId = null);

        /// <summary>
        /// [ASSETS] Create transfers in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <param name="ownedId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerBatchTransferBulkResponse&gt;</returns>
        ApiResponse<List<TrackerBatchTransferBulkResponse>> CreateAssetTransferBulkWithHttpInfo (string productId, string xApiKey, List<TrackerBatchTransferBulkRequest> requests = null, string ownedId = null);
        /// <summary>
        /// [ENTITIES] Create an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>NonUser</returns>
        NonUser CreateEntity (string productId, string xApiKey, CreateEntityRequest request = null);

        /// <summary>
        /// [ENTITIES] Create an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of NonUser</returns>
        ApiResponse<NonUser> CreateEntityWithHttpInfo (string productId, string xApiKey, CreateEntityRequest request = null);
        /// <summary>
        /// [MULTIASSETS] Creates a multi asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerMultiAsset</returns>
        TrackerMultiAsset CreateMultiAsset (string productId, string xApiKey, TrackerMultiAssetCreateRequest request = null);

        /// <summary>
        /// [MULTIASSETS] Creates a multi asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerMultiAsset</returns>
        ApiResponse<TrackerMultiAsset> CreateMultiAssetWithHttpInfo (string productId, string xApiKey, TrackerMultiAssetCreateRequest request = null);
        /// <summary>
        /// [MULTIASSETS] Create a transfer for one or many batches for a multi asset
        /// </summary>
        /// <remarks>
        /// The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns></returns>
        void CreateMultiAssetBatchTransfer (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null);

        /// <summary>
        /// [MULTIASSETS] Create a transfer for one or many batches for a multi asset
        /// </summary>
        /// <remarks>
        /// The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateMultiAssetBatchTransferWithHttpInfo (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null);
        /// <summary>
        /// [MULTIASSETS] Create a transfer for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        List<AssetTransaction> CreateMultiAssetTransfer (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null);

        /// <summary>
        /// [MULTIASSETS] Create a transfer for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        ApiResponse<List<AssetTransaction>> CreateMultiAssetTransferWithHttpInfo (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null);
        /// <summary>
        /// [ASSETS] Delete an asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void DeleteAsset (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [ASSETS] Delete an asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssetWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [ENTITIES] Delete an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void DeleteEntity (string id, string productId, string xApiKey);

        /// <summary>
        /// [ENTITIES] Delete an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEntityWithHttpInfo (string id, string productId, string xApiKey);
        /// <summary>
        /// [MULTIASSETS] Delete a multi asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this multi asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void DeleteMultiAsset (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [MULTIASSETS] Delete a multi asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this multi asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMultiAssetWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [ASSETS] Edit an asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void EditAsset (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [ASSETS] Edit an asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditAssetWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [ENTITIES] Edit an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void EditEntity (string id, string productId, string xApiKey, UpdateEntityRequest request = null);

        /// <summary>
        /// [ENTITIES] Edit an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditEntityWithHttpInfo (string id, string productId, string xApiKey, UpdateEntityRequest request = null);
        /// <summary>
        /// [MULTIASSETS] Edit a multi asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void EditMultiAsset (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [MULTIASSETS] Edit a multi asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditMultiAssetWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [ASSETS] Get all assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetDisplayNames">Filter assets using their display names.  Example: Asset1,Asset2,Asset3 (optional)</param>
        /// <returns>List&lt;TrackerAsset&gt;</returns>
        List<TrackerAsset> GetAllAssets (string productId, string xApiKey, int? limit = null, int? offset = null, string assetDisplayNames = null);

        /// <summary>
        /// [ASSETS] Get all assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetDisplayNames">Filter assets using their display names.  Example: Asset1,Asset2,Asset3 (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerAsset&gt;</returns>
        ApiResponse<List<TrackerAsset>> GetAllAssetsWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null, string assetDisplayNames = null);
        /// <summary>
        /// [MULTIASSETS] Get all multi assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <returns>List&lt;TrackerMultiAsset&gt;</returns>
        List<TrackerMultiAsset> GetAllMultiAssets (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null);

        /// <summary>
        /// [MULTIASSETS] Get all multi assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerMultiAsset&gt;</returns>
        ApiResponse<List<TrackerMultiAsset>> GetAllMultiAssetsWithHttpInfo (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null);
        /// <summary>
        /// [TRANSACTIONS] Get all transactions
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        List<AssetTransaction> GetAllTransactions (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null);

        /// <summary>
        /// [TRANSACTIONS] Get all transactions
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        ApiResponse<List<AssetTransaction>> GetAllTransactionsWithHttpInfo (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null);
        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>TrackerAsset</returns>
        TrackerAsset GetAssetById (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        ApiResponse<TrackerAsset> GetAssetByIdWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s asset balance batches
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>List&lt;Batch&gt;</returns>
        List<Batch> GetAssetDetailedBalance (string assetId, string productId, string xApiKey, string ownedDisplayName = null);

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s asset balance batches
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Batch&gt;</returns>
        ApiResponse<List<Batch>> GetAssetDetailedBalanceWithHttpInfo (string assetId, string productId, string xApiKey, string ownedDisplayName = null);
        /// <summary>
        /// [ASSETS] Get all transactions of a specific batch for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>IssuedBatchTransactionsResponse</returns>
        IssuedBatchTransactionsResponse GetAssetIssuedBatchTransactions (string assetId, string batchId, string productId, string xApiKey);

        /// <summary>
        /// [ASSETS] Get all transactions of a specific batch for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of IssuedBatchTransactionsResponse</returns>
        ApiResponse<IssuedBatchTransactionsResponse> GetAssetIssuedBatchTransactionsWithHttpInfo (string assetId, string batchId, string productId, string xApiKey);
        /// <summary>
        /// [ASSETS] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>IssuedBatchesResponse</returns>
        IssuedBatchesResponse GetAssetIssuedBatches (string assetId, string productId, string xApiKey, string sortBy = null, string sort = null);

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of IssuedBatchesResponse</returns>
        ApiResponse<IssuedBatchesResponse> GetAssetIssuedBatchesWithHttpInfo (string assetId, string productId, string xApiKey, string sortBy = null, string sort = null);
        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s assets balances
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>List&lt;AssetBalance&gt;</returns>
        List<AssetBalance> GetBalances (string productId, string xApiKey, string ownedDisplayName = null);

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s assets balances
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetBalance&gt;</returns>
        ApiResponse<List<AssetBalance>> GetBalancesWithHttpInfo (string productId, string xApiKey, string ownedDisplayName = null);
        /// <summary>
        /// [MULTIASSETS] Get a specific multi asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>TrackerMultiAsset</returns>
        TrackerMultiAsset GetMultiAssetById (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [MULTIASSETS] Get a specific multi asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of TrackerMultiAsset</returns>
        ApiResponse<TrackerMultiAsset> GetMultiAssetByIdWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [MULTIASSETS] Get all transactions of a specific batch for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>IssuedBatchTransactionsResponse</returns>
        IssuedBatchTransactionsResponse GetMultiAssetIssuedBatchTransactions (string assetId, string batchId, string productId, string xApiKey);

        /// <summary>
        /// [MULTIASSETS] Get all transactions of a specific batch for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of IssuedBatchTransactionsResponse</returns>
        ApiResponse<IssuedBatchTransactionsResponse> GetMultiAssetIssuedBatchTransactionsWithHttpInfo (string assetId, string batchId, string productId, string xApiKey);
        /// <summary>
        /// [MULTIASSETS] Get all issued batches for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>IssuedBatchesResponse</returns>
        IssuedBatchesResponse GetMultiAssetIssuedBatches (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [MULTIASSETS] Get all issued batches for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of IssuedBatchesResponse</returns>
        ApiResponse<IssuedBatchesResponse> GetMultiAssetIssuedBatchesWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [ENTITIES] Get all entities of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>List&lt;NonUserResponse&gt;</returns>
        List<NonUserResponse> GetOwnedIdentities (string productId, string xApiKey);

        /// <summary>
        /// [ENTITIES] Get all entities of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of List&lt;NonUserResponse&gt;</returns>
        ApiResponse<List<NonUserResponse>> GetOwnedIdentitiesWithHttpInfo (string productId, string xApiKey);
        /// <summary>
        /// [ASSETS] Get all transactions for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        List<AssetTransaction> GetTransactionsByAssetId (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [ASSETS] Get all transactions for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        ApiResponse<List<AssetTransaction>> GetTransactionsByAssetIdWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [MULTIASSETS] Get all transactions for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        List<AssetTransaction> GetTransactionsByMultiAssetId (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [MULTIASSETS] Get all transactions for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        ApiResponse<List<AssetTransaction>> GetTransactionsByMultiAssetIdWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [ASSETS] Issue an amount of an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role. If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>AssetIssueResponse</returns>
        AssetIssueResponse IssueAsset (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null);

        /// <summary>
        /// [ASSETS] Issue an amount of an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role. If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of AssetIssueResponse</returns>
        ApiResponse<AssetIssueResponse> IssueAssetWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null);
        /// <summary>
        /// [ASSETS] Issue in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>List&lt;TrackerAssetIssueResponse&gt;</returns>
        List<TrackerAssetIssueResponse> IssueAssetBulk (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null);

        /// <summary>
        /// [ASSETS] Issue in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerAssetIssueResponse&gt;</returns>
        ApiResponse<List<TrackerAssetIssueResponse>> IssueAssetBulkWithHttpInfo (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null);
        /// <summary>
        /// [MULTIASSETS] Issue an amount of a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void IssueMultiAsset (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null);

        /// <summary>
        /// [MULTIASSETS] Issue an amount of a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IssueMultiAssetWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null);
        /// <summary>
        /// [MULTIASSETS] Issue multi asset in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>List&lt;TrackerAssetIssueResponse&gt;</returns>
        List<TrackerAssetIssueResponse> IssueMultiAssetBulk (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null);

        /// <summary>
        /// [MULTIASSETS] Issue multi asset in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerAssetIssueResponse&gt;</returns>
        ApiResponse<List<TrackerAssetIssueResponse>> IssueMultiAssetBulkWithHttpInfo (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null);
        /// <summary>
        /// [TRANSACTIONS] Revert a transaction
        /// </summary>
        /// <remarks>
        /// This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void Reverse (string transactionId, string productId, string xApiKey);

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction
        /// </summary>
        /// <remarks>
        /// This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReverseWithHttpInfo (string transactionId, string productId, string xApiKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [ASSETS] Create an asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerAsset</returns>
        System.Threading.Tasks.Task<TrackerAsset> CreateAssetAsync (string productId, string xApiKey, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [ASSETS] Create an asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> CreateAssetAsyncWithHttpInfo (string productId, string xApiKey, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [ASSETS] Create a transfer for one or many batches for an asset
        /// </summary>
        /// <remarks>
        /// The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAssetBatchTransferAsync (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null);

        /// <summary>
        /// [ASSETS] Create a transfer for one or many batches for an asset
        /// </summary>
        /// <remarks>
        /// The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAssetBatchTransferAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null);
        /// <summary>
        /// [ASSETS] Create a transfer for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<AssetTransaction>> CreateAssetTransferAsync (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null);

        /// <summary>
        /// [ASSETS] Create a transfer for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> CreateAssetTransferAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null);
        /// <summary>
        /// [ASSETS] Create transfers in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <param name="ownedId"> (optional)</param>
        /// <returns>Task of List&lt;TrackerBatchTransferBulkResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TrackerBatchTransferBulkResponse>> CreateAssetTransferBulkAsync (string productId, string xApiKey, List<TrackerBatchTransferBulkRequest> requests = null, string ownedId = null);

        /// <summary>
        /// [ASSETS] Create transfers in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <param name="ownedId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerBatchTransferBulkResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackerBatchTransferBulkResponse>>> CreateAssetTransferBulkAsyncWithHttpInfo (string productId, string xApiKey, List<TrackerBatchTransferBulkRequest> requests = null, string ownedId = null);
        /// <summary>
        /// [ENTITIES] Create an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of NonUser</returns>
        System.Threading.Tasks.Task<NonUser> CreateEntityAsync (string productId, string xApiKey, CreateEntityRequest request = null);

        /// <summary>
        /// [ENTITIES] Create an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (NonUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonUser>> CreateEntityAsyncWithHttpInfo (string productId, string xApiKey, CreateEntityRequest request = null);
        /// <summary>
        /// [MULTIASSETS] Creates a multi asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerMultiAsset</returns>
        System.Threading.Tasks.Task<TrackerMultiAsset> CreateMultiAssetAsync (string productId, string xApiKey, TrackerMultiAssetCreateRequest request = null);

        /// <summary>
        /// [MULTIASSETS] Creates a multi asset
        /// </summary>
        /// <remarks>
        /// This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerMultiAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerMultiAsset>> CreateMultiAssetAsyncWithHttpInfo (string productId, string xApiKey, TrackerMultiAssetCreateRequest request = null);
        /// <summary>
        /// [MULTIASSETS] Create a transfer for one or many batches for a multi asset
        /// </summary>
        /// <remarks>
        /// The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateMultiAssetBatchTransferAsync (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null);

        /// <summary>
        /// [MULTIASSETS] Create a transfer for one or many batches for a multi asset
        /// </summary>
        /// <remarks>
        /// The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateMultiAssetBatchTransferAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null);
        /// <summary>
        /// [MULTIASSETS] Create a transfer for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<AssetTransaction>> CreateMultiAssetTransferAsync (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null);

        /// <summary>
        /// [MULTIASSETS] Create a transfer for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> CreateMultiAssetTransferAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null);
        /// <summary>
        /// [ASSETS] Delete an asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssetAsync (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [ASSETS] Delete an asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [ENTITIES] Delete an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEntityAsync (string id, string productId, string xApiKey);

        /// <summary>
        /// [ENTITIES] Delete an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEntityAsyncWithHttpInfo (string id, string productId, string xApiKey);
        /// <summary>
        /// [MULTIASSETS] Delete a multi asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this multi asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMultiAssetAsync (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [MULTIASSETS] Delete a multi asset
        /// </summary>
        /// <remarks>
        /// It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this multi asset will still be visible.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMultiAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [ASSETS] Edit an asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditAssetAsync (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [ASSETS] Edit an asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [ENTITIES] Edit an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditEntityAsync (string id, string productId, string xApiKey, UpdateEntityRequest request = null);

        /// <summary>
        /// [ENTITIES] Edit an entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditEntityAsyncWithHttpInfo (string id, string productId, string xApiKey, UpdateEntityRequest request = null);
        /// <summary>
        /// [MULTIASSETS] Edit a multi asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditMultiAssetAsync (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null);

        /// <summary>
        /// [MULTIASSETS] Edit a multi asset
        /// </summary>
        /// <remarks>
        /// Only the name can be changed.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditMultiAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null);
        /// <summary>
        /// [ASSETS] Get all assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetDisplayNames">Filter assets using their display names.  Example: Asset1,Asset2,Asset3 (optional)</param>
        /// <returns>Task of List&lt;TrackerAsset&gt;</returns>
        System.Threading.Tasks.Task<List<TrackerAsset>> GetAllAssetsAsync (string productId, string xApiKey, int? limit = null, int? offset = null, string assetDisplayNames = null);

        /// <summary>
        /// [ASSETS] Get all assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetDisplayNames">Filter assets using their display names.  Example: Asset1,Asset2,Asset3 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerAsset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackerAsset>>> GetAllAssetsAsyncWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null, string assetDisplayNames = null);
        /// <summary>
        /// [MULTIASSETS] Get all multi assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <returns>Task of List&lt;TrackerMultiAsset&gt;</returns>
        System.Threading.Tasks.Task<List<TrackerMultiAsset>> GetAllMultiAssetsAsync (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null);

        /// <summary>
        /// [MULTIASSETS] Get all multi assets
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerMultiAsset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackerMultiAsset>>> GetAllMultiAssetsAsyncWithHttpInfo (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null);
        /// <summary>
        /// [TRANSACTIONS] Get all transactions
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<AssetTransaction>> GetAllTransactionsAsync (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null);

        /// <summary>
        /// [TRANSACTIONS] Get all transactions
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> GetAllTransactionsAsyncWithHttpInfo (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null);
        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of TrackerAsset</returns>
        System.Threading.Tasks.Task<TrackerAsset> GetAssetByIdAsync (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> GetAssetByIdAsyncWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s asset balance batches
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of List&lt;Batch&gt;</returns>
        System.Threading.Tasks.Task<List<Batch>> GetAssetDetailedBalanceAsync (string assetId, string productId, string xApiKey, string ownedDisplayName = null);

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s asset balance batches
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Batch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Batch>>> GetAssetDetailedBalanceAsyncWithHttpInfo (string assetId, string productId, string xApiKey, string ownedDisplayName = null);
        /// <summary>
        /// [ASSETS] Get all transactions of a specific batch for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of IssuedBatchTransactionsResponse</returns>
        System.Threading.Tasks.Task<IssuedBatchTransactionsResponse> GetAssetIssuedBatchTransactionsAsync (string assetId, string batchId, string productId, string xApiKey);

        /// <summary>
        /// [ASSETS] Get all transactions of a specific batch for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (IssuedBatchTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedBatchTransactionsResponse>> GetAssetIssuedBatchTransactionsAsyncWithHttpInfo (string assetId, string batchId, string productId, string xApiKey);
        /// <summary>
        /// [ASSETS] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of IssuedBatchesResponse</returns>
        System.Threading.Tasks.Task<IssuedBatchesResponse> GetAssetIssuedBatchesAsync (string assetId, string productId, string xApiKey, string sortBy = null, string sort = null);

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (IssuedBatchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedBatchesResponse>> GetAssetIssuedBatchesAsyncWithHttpInfo (string assetId, string productId, string xApiKey, string sortBy = null, string sort = null);
        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s assets balances
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of List&lt;AssetBalance&gt;</returns>
        System.Threading.Tasks.Task<List<AssetBalance>> GetBalancesAsync (string productId, string xApiKey, string ownedDisplayName = null);

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s assets balances
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetBalance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetBalance>>> GetBalancesAsyncWithHttpInfo (string productId, string xApiKey, string ownedDisplayName = null);
        /// <summary>
        /// [MULTIASSETS] Get a specific multi asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of TrackerMultiAsset</returns>
        System.Threading.Tasks.Task<TrackerMultiAsset> GetMultiAssetByIdAsync (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [MULTIASSETS] Get a specific multi asset&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Track Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (TrackerMultiAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerMultiAsset>> GetMultiAssetByIdAsyncWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [MULTIASSETS] Get all transactions of a specific batch for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of IssuedBatchTransactionsResponse</returns>
        System.Threading.Tasks.Task<IssuedBatchTransactionsResponse> GetMultiAssetIssuedBatchTransactionsAsync (string assetId, string batchId, string productId, string xApiKey);

        /// <summary>
        /// [MULTIASSETS] Get all transactions of a specific batch for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (IssuedBatchTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedBatchTransactionsResponse>> GetMultiAssetIssuedBatchTransactionsAsyncWithHttpInfo (string assetId, string batchId, string productId, string xApiKey);
        /// <summary>
        /// [MULTIASSETS] Get all issued batches for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of IssuedBatchesResponse</returns>
        System.Threading.Tasks.Task<IssuedBatchesResponse> GetMultiAssetIssuedBatchesAsync (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [MULTIASSETS] Get all issued batches for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (IssuedBatchesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuedBatchesResponse>> GetMultiAssetIssuedBatchesAsyncWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [ENTITIES] Get all entities of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of List&lt;NonUserResponse&gt;</returns>
        System.Threading.Tasks.Task<List<NonUserResponse>> GetOwnedIdentitiesAsync (string productId, string xApiKey);

        /// <summary>
        /// [ENTITIES] Get all entities of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (List&lt;NonUserResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NonUserResponse>>> GetOwnedIdentitiesAsyncWithHttpInfo (string productId, string xApiKey);
        /// <summary>
        /// [ASSETS] Get all transactions for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<AssetTransaction>> GetTransactionsByAssetIdAsync (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [ASSETS] Get all transactions for an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> GetTransactionsByAssetIdAsyncWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [MULTIASSETS] Get all transactions for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<AssetTransaction>> GetTransactionsByMultiAssetIdAsync (string assetId, string productId, string xApiKey);

        /// <summary>
        /// [MULTIASSETS] Get all transactions for a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role or Tracker User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> GetTransactionsByMultiAssetIdAsyncWithHttpInfo (string assetId, string productId, string xApiKey);
        /// <summary>
        /// [ASSETS] Issue an amount of an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role. If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of AssetIssueResponse</returns>
        System.Threading.Tasks.Task<AssetIssueResponse> IssueAssetAsync (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null);

        /// <summary>
        /// [ASSETS] Issue an amount of an asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role. If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (AssetIssueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetIssueResponse>> IssueAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null);
        /// <summary>
        /// [ASSETS] Issue in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>Task of List&lt;TrackerAssetIssueResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TrackerAssetIssueResponse>> IssueAssetBulkAsync (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null);

        /// <summary>
        /// [ASSETS] Issue in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.  If you want to transfer to an entity, you should put the id of it.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerAssetIssueResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackerAssetIssueResponse>>> IssueAssetBulkAsyncWithHttpInfo (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null);
        /// <summary>
        /// [MULTIASSETS] Issue an amount of a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IssueMultiAssetAsync (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null);

        /// <summary>
        /// [MULTIASSETS] Issue an amount of a multi asset
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IssueMultiAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null);
        /// <summary>
        /// [MULTIASSETS] Issue multi asset in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>Task of List&lt;TrackerAssetIssueResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TrackerAssetIssueResponse>> IssueMultiAssetBulkAsync (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null);

        /// <summary>
        /// [MULTIASSETS] Issue multi asset in bulk
        /// </summary>
        /// <remarks>
        /// Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerAssetIssueResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackerAssetIssueResponse>>> IssueMultiAssetBulkAsyncWithHttpInfo (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null);
        /// <summary>
        /// [TRANSACTIONS] Revert a transaction
        /// </summary>
        /// <remarks>
        /// This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReverseAsync (string transactionId, string productId, string xApiKey);

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction
        /// </summary>
        /// <remarks>
        /// This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReverseAsyncWithHttpInfo (string transactionId, string productId, string xApiKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrackerApi : ITrackerApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrackerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [ASSETS] Create an asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerAsset</returns>
        public TrackerAsset CreateAsset (string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
             ApiResponse<TrackerAsset> localVarResponse = CreateAssetWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Create an asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        public ApiResponse< TrackerAsset > CreateAssetWithHttpInfo (string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateAsset");

            var localVarPath = "/tracker/{productId}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
            
        }

        /// <summary>
        /// [ASSETS] Create an asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerAsset</returns>
        public async System.Threading.Tasks.Task<TrackerAsset> CreateAssetAsync (string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
             ApiResponse<TrackerAsset> localVarResponse = await CreateAssetAsyncWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Create an asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> CreateAssetAsyncWithHttpInfo (string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateAsset");

            var localVarPath = "/tracker/{productId}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
            
        }

        /// <summary>
        /// [ASSETS] Create a transfer for one or many batches for an asset The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns></returns>
        public void CreateAssetBatchTransfer (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null)
        {
             CreateAssetBatchTransferWithHttpInfo(assetId, productId, xApiKey, request, ownedDisplayName);
        }

        /// <summary>
        /// [ASSETS] Create a transfer for one or many batches for an asset The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateAssetBatchTransferWithHttpInfo (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->CreateAssetBatchTransfer");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateAssetBatchTransfer");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateAssetBatchTransfer");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/batches/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetBatchTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Create a transfer for one or many batches for an asset The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAssetBatchTransferAsync (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null)
        {
             await CreateAssetBatchTransferAsyncWithHttpInfo(assetId, productId, xApiKey, request, ownedDisplayName);

        }

        /// <summary>
        /// [ASSETS] Create a transfer for one or many batches for an asset The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAssetBatchTransferAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->CreateAssetBatchTransfer");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateAssetBatchTransfer");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateAssetBatchTransfer");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/batches/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetBatchTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Create a transfer for an asset Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        public List<AssetTransaction> CreateAssetTransfer (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = CreateAssetTransferWithHttpInfo(assetId, productId, xApiKey, request, ownedDisplayName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Create a transfer for an asset Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        public ApiResponse< List<AssetTransaction> > CreateAssetTransferWithHttpInfo (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->CreateAssetTransfer");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateAssetTransfer");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateAssetTransfer");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
            
        }

        /// <summary>
        /// [ASSETS] Create a transfer for an asset Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetTransaction>> CreateAssetTransferAsync (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = await CreateAssetTransferAsyncWithHttpInfo(assetId, productId, xApiKey, request, ownedDisplayName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Create a transfer for an asset Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> CreateAssetTransferAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->CreateAssetTransfer");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateAssetTransfer");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateAssetTransfer");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
            
        }

        /// <summary>
        /// [ASSETS] Create transfers in bulk Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <param name="ownedId"> (optional)</param>
        /// <returns>List&lt;TrackerBatchTransferBulkResponse&gt;</returns>
        public List<TrackerBatchTransferBulkResponse> CreateAssetTransferBulk (string productId, string xApiKey, List<TrackerBatchTransferBulkRequest> requests = null, string ownedId = null)
        {
             ApiResponse<List<TrackerBatchTransferBulkResponse>> localVarResponse = CreateAssetTransferBulkWithHttpInfo(productId, xApiKey, requests, ownedId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Create transfers in bulk Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <param name="ownedId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerBatchTransferBulkResponse&gt;</returns>
        public ApiResponse< List<TrackerBatchTransferBulkResponse> > CreateAssetTransferBulkWithHttpInfo (string productId, string xApiKey, List<TrackerBatchTransferBulkRequest> requests = null, string ownedId = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateAssetTransferBulk");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateAssetTransferBulk");

            var localVarPath = "/tracker/{productId}/assets/transfer/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedId != null) localVarHeaderParams.Add("ownedId", Configuration.ApiClient.ParameterToString(ownedId)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (requests != null && requests.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requests); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requests; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetTransferBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerBatchTransferBulkResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackerBatchTransferBulkResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerBatchTransferBulkResponse>)));
            
        }

        /// <summary>
        /// [ASSETS] Create transfers in bulk Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <param name="ownedId"> (optional)</param>
        /// <returns>Task of List&lt;TrackerBatchTransferBulkResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackerBatchTransferBulkResponse>> CreateAssetTransferBulkAsync (string productId, string xApiKey, List<TrackerBatchTransferBulkRequest> requests = null, string ownedId = null)
        {
             ApiResponse<List<TrackerBatchTransferBulkResponse>> localVarResponse = await CreateAssetTransferBulkAsyncWithHttpInfo(productId, xApiKey, requests, ownedId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Create transfers in bulk Requires the Tracker Admin Role or Tracker User Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <param name="ownedId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerBatchTransferBulkResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackerBatchTransferBulkResponse>>> CreateAssetTransferBulkAsyncWithHttpInfo (string productId, string xApiKey, List<TrackerBatchTransferBulkRequest> requests = null, string ownedId = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateAssetTransferBulk");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateAssetTransferBulk");

            var localVarPath = "/tracker/{productId}/assets/transfer/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedId != null) localVarHeaderParams.Add("ownedId", Configuration.ApiClient.ParameterToString(ownedId)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (requests != null && requests.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requests); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requests; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetTransferBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerBatchTransferBulkResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackerBatchTransferBulkResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerBatchTransferBulkResponse>)));
            
        }

        /// <summary>
        /// [ENTITIES] Create an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>NonUser</returns>
        public NonUser CreateEntity (string productId, string xApiKey, CreateEntityRequest request = null)
        {
             ApiResponse<NonUser> localVarResponse = CreateEntityWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ENTITIES] Create an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of NonUser</returns>
        public ApiResponse< NonUser > CreateEntityWithHttpInfo (string productId, string xApiKey, CreateEntityRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateEntity");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateEntity");

            var localVarPath = "/tracker/{productId}/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonUser) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonUser)));
            
        }

        /// <summary>
        /// [ENTITIES] Create an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of NonUser</returns>
        public async System.Threading.Tasks.Task<NonUser> CreateEntityAsync (string productId, string xApiKey, CreateEntityRequest request = null)
        {
             ApiResponse<NonUser> localVarResponse = await CreateEntityAsyncWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ENTITIES] Create an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (NonUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NonUser>> CreateEntityAsyncWithHttpInfo (string productId, string xApiKey, CreateEntityRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateEntity");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateEntity");

            var localVarPath = "/tracker/{productId}/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NonUser) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonUser)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Creates a multi asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerMultiAsset</returns>
        public TrackerMultiAsset CreateMultiAsset (string productId, string xApiKey, TrackerMultiAssetCreateRequest request = null)
        {
             ApiResponse<TrackerMultiAsset> localVarResponse = CreateMultiAssetWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [MULTIASSETS] Creates a multi asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerMultiAsset</returns>
        public ApiResponse< TrackerMultiAsset > CreateMultiAssetWithHttpInfo (string productId, string xApiKey, TrackerMultiAssetCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateMultiAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateMultiAsset");

            var localVarPath = "/tracker/{productId}/multiassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultiAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerMultiAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackerMultiAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerMultiAsset)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Creates a multi asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerMultiAsset</returns>
        public async System.Threading.Tasks.Task<TrackerMultiAsset> CreateMultiAssetAsync (string productId, string xApiKey, TrackerMultiAssetCreateRequest request = null)
        {
             ApiResponse<TrackerMultiAsset> localVarResponse = await CreateMultiAssetAsyncWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [MULTIASSETS] Creates a multi asset This asset will then be issuable and transferable between entities.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerMultiAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerMultiAsset>> CreateMultiAssetAsyncWithHttpInfo (string productId, string xApiKey, TrackerMultiAssetCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateMultiAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateMultiAsset");

            var localVarPath = "/tracker/{productId}/multiassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultiAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerMultiAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackerMultiAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerMultiAsset)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Create a transfer for one or many batches for a multi asset The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns></returns>
        public void CreateMultiAssetBatchTransfer (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null)
        {
             CreateMultiAssetBatchTransferWithHttpInfo(assetId, productId, xApiKey, request, ownedDisplayName);
        }

        /// <summary>
        /// [MULTIASSETS] Create a transfer for one or many batches for a multi asset The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateMultiAssetBatchTransferWithHttpInfo (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->CreateMultiAssetBatchTransfer");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateMultiAssetBatchTransfer");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateMultiAssetBatchTransfer");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/batches/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultiAssetBatchTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [MULTIASSETS] Create a transfer for one or many batches for a multi asset The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateMultiAssetBatchTransferAsync (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null)
        {
             await CreateMultiAssetBatchTransferAsyncWithHttpInfo(assetId, productId, xApiKey, request, ownedDisplayName);

        }

        /// <summary>
        /// [MULTIASSETS] Create a transfer for one or many batches for a multi asset The authenticated must have the specific batches                Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateMultiAssetBatchTransferAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerBatchTransferRequest request = null, string ownedDisplayName = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->CreateMultiAssetBatchTransfer");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateMultiAssetBatchTransfer");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateMultiAssetBatchTransfer");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/batches/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultiAssetBatchTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [MULTIASSETS] Create a transfer for a multi asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        public List<AssetTransaction> CreateMultiAssetTransfer (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = CreateMultiAssetTransferWithHttpInfo(assetId, productId, xApiKey, request, ownedDisplayName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [MULTIASSETS] Create a transfer for a multi asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        public ApiResponse< List<AssetTransaction> > CreateMultiAssetTransferWithHttpInfo (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->CreateMultiAssetTransfer");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateMultiAssetTransfer");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateMultiAssetTransfer");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultiAssetTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Create a transfer for a multi asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetTransaction>> CreateMultiAssetTransferAsync (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = await CreateMultiAssetTransferAsyncWithHttpInfo(assetId, productId, xApiKey, request, ownedDisplayName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [MULTIASSETS] Create a transfer for a multi asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> CreateMultiAssetTransferAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerTransferRequest request = null, string ownedDisplayName = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->CreateMultiAssetTransfer");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->CreateMultiAssetTransfer");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->CreateMultiAssetTransfer");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultiAssetTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
            
        }

        /// <summary>
        /// [ASSETS] Delete an asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void DeleteAsset (string assetId, string productId, string xApiKey)
        {
             DeleteAssetWithHttpInfo(assetId, productId, xApiKey);
        }

        /// <summary>
        /// [ASSETS] Delete an asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAssetWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->DeleteAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->DeleteAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->DeleteAsset");

            var localVarPath = "/tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Delete an asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssetAsync (string assetId, string productId, string xApiKey)
        {
             await DeleteAssetAsyncWithHttpInfo(assetId, productId, xApiKey);

        }

        /// <summary>
        /// [ASSETS] Delete an asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->DeleteAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->DeleteAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->DeleteAsset");

            var localVarPath = "/tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ENTITIES] Delete an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void DeleteEntity (string id, string productId, string xApiKey)
        {
             DeleteEntityWithHttpInfo(id, productId, xApiKey);
        }

        /// <summary>
        /// [ENTITIES] Delete an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEntityWithHttpInfo (string id, string productId, string xApiKey)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TrackerApi->DeleteEntity");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->DeleteEntity");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->DeleteEntity");

            var localVarPath = "/tracker/{productId}/entities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ENTITIES] Delete an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEntityAsync (string id, string productId, string xApiKey)
        {
             await DeleteEntityAsyncWithHttpInfo(id, productId, xApiKey);

        }

        /// <summary>
        /// [ENTITIES] Delete an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEntityAsyncWithHttpInfo (string id, string productId, string xApiKey)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TrackerApi->DeleteEntity");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->DeleteEntity");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->DeleteEntity");

            var localVarPath = "/tracker/{productId}/entities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [MULTIASSETS] Delete a multi asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this multi asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void DeleteMultiAsset (string assetId, string productId, string xApiKey)
        {
             DeleteMultiAssetWithHttpInfo(assetId, productId, xApiKey);
        }

        /// <summary>
        /// [MULTIASSETS] Delete a multi asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this multi asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMultiAssetWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->DeleteMultiAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->DeleteMultiAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->DeleteMultiAsset");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMultiAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [MULTIASSETS] Delete a multi asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this multi asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMultiAssetAsync (string assetId, string productId, string xApiKey)
        {
             await DeleteMultiAssetAsyncWithHttpInfo(assetId, productId, xApiKey);

        }

        /// <summary>
        /// [MULTIASSETS] Delete a multi asset It won&#39;t be issuable and transferable anymore, but all transactions made in the past with this multi asset will still be visible.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMultiAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->DeleteMultiAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->DeleteMultiAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->DeleteMultiAsset");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMultiAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Edit an asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void EditAsset (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
             EditAssetWithHttpInfo(assetId, productId, xApiKey, request);
        }

        /// <summary>
        /// [ASSETS] Edit an asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditAssetWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->EditAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->EditAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->EditAsset");

            var localVarPath = "/tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Edit an asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditAssetAsync (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
             await EditAssetAsyncWithHttpInfo(assetId, productId, xApiKey, request);

        }

        /// <summary>
        /// [ASSETS] Edit an asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->EditAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->EditAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->EditAsset");

            var localVarPath = "/tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ENTITIES] Edit an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void EditEntity (string id, string productId, string xApiKey, UpdateEntityRequest request = null)
        {
             EditEntityWithHttpInfo(id, productId, xApiKey, request);
        }

        /// <summary>
        /// [ENTITIES] Edit an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditEntityWithHttpInfo (string id, string productId, string xApiKey, UpdateEntityRequest request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TrackerApi->EditEntity");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->EditEntity");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->EditEntity");

            var localVarPath = "/tracker/{productId}/entities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ENTITIES] Edit an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditEntityAsync (string id, string productId, string xApiKey, UpdateEntityRequest request = null)
        {
             await EditEntityAsyncWithHttpInfo(id, productId, xApiKey, request);

        }

        /// <summary>
        /// [ENTITIES] Edit an entity 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditEntityAsyncWithHttpInfo (string id, string productId, string xApiKey, UpdateEntityRequest request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TrackerApi->EditEntity");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->EditEntity");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->EditEntity");

            var localVarPath = "/tracker/{productId}/entities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [MULTIASSETS] Edit a multi asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void EditMultiAsset (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
             EditMultiAssetWithHttpInfo(assetId, productId, xApiKey, request);
        }

        /// <summary>
        /// [MULTIASSETS] Edit a multi asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditMultiAssetWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->EditMultiAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->EditMultiAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->EditMultiAsset");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditMultiAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [MULTIASSETS] Edit a multi asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditMultiAssetAsync (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
             await EditMultiAssetAsyncWithHttpInfo(assetId, productId, xApiKey, request);

        }

        /// <summary>
        /// [MULTIASSETS] Edit a multi asset Only the name can be changed.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditMultiAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetCreateRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->EditMultiAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->EditMultiAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->EditMultiAsset");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditMultiAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [ASSETS] Get all assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetDisplayNames">Filter assets using their display names.  Example: Asset1,Asset2,Asset3 (optional)</param>
        /// <returns>List&lt;TrackerAsset&gt;</returns>
        public List<TrackerAsset> GetAllAssets (string productId, string xApiKey, int? limit = null, int? offset = null, string assetDisplayNames = null)
        {
             ApiResponse<List<TrackerAsset>> localVarResponse = GetAllAssetsWithHttpInfo(productId, xApiKey, limit, offset, assetDisplayNames);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Get all assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetDisplayNames">Filter assets using their display names.  Example: Asset1,Asset2,Asset3 (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerAsset&gt;</returns>
        public ApiResponse< List<TrackerAsset> > GetAllAssetsWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null, string assetDisplayNames = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAllAssets");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAllAssets");

            var localVarPath = "/tracker/{productId}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (assetDisplayNames != null) localVarQueryParams.Add("assetDisplayNames", Configuration.ApiClient.ParameterToString(assetDisplayNames)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackerAsset>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerAsset>)));
            
        }

        /// <summary>
        /// [ASSETS] Get all assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetDisplayNames">Filter assets using their display names.  Example: Asset1,Asset2,Asset3 (optional)</param>
        /// <returns>Task of List&lt;TrackerAsset&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackerAsset>> GetAllAssetsAsync (string productId, string xApiKey, int? limit = null, int? offset = null, string assetDisplayNames = null)
        {
             ApiResponse<List<TrackerAsset>> localVarResponse = await GetAllAssetsAsyncWithHttpInfo(productId, xApiKey, limit, offset, assetDisplayNames);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Get all assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetDisplayNames">Filter assets using their display names.  Example: Asset1,Asset2,Asset3 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerAsset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackerAsset>>> GetAllAssetsAsyncWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null, string assetDisplayNames = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAllAssets");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAllAssets");

            var localVarPath = "/tracker/{productId}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (assetDisplayNames != null) localVarQueryParams.Add("assetDisplayNames", Configuration.ApiClient.ParameterToString(assetDisplayNames)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackerAsset>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerAsset>)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Get all multi assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <returns>List&lt;TrackerMultiAsset&gt;</returns>
        public List<TrackerMultiAsset> GetAllMultiAssets (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null)
        {
             ApiResponse<List<TrackerMultiAsset>> localVarResponse = GetAllMultiAssetsWithHttpInfo(productId, xApiKey, beforeDateTime, limit, offset, assetIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [MULTIASSETS] Get all multi assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerMultiAsset&gt;</returns>
        public ApiResponse< List<TrackerMultiAsset> > GetAllMultiAssetsWithHttpInfo (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAllMultiAssets");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAllMultiAssets");

            var localVarPath = "/tracker/{productId}/multiassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (beforeDateTime != null) localVarQueryParams.Add("beforeDateTime", Configuration.ApiClient.ParameterToString(beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (assetIds != null) localVarQueryParams.Add("assetIds", Configuration.ApiClient.ParameterToString(assetIds)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMultiAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerMultiAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackerMultiAsset>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerMultiAsset>)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Get all multi assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <returns>Task of List&lt;TrackerMultiAsset&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackerMultiAsset>> GetAllMultiAssetsAsync (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null)
        {
             ApiResponse<List<TrackerMultiAsset>> localVarResponse = await GetAllMultiAssetsAsyncWithHttpInfo(productId, xApiKey, beforeDateTime, limit, offset, assetIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [MULTIASSETS] Get all multi assets Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="assetIds"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerMultiAsset&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackerMultiAsset>>> GetAllMultiAssetsAsyncWithHttpInfo (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null, string assetIds = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAllMultiAssets");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAllMultiAssets");

            var localVarPath = "/tracker/{productId}/multiassets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (beforeDateTime != null) localVarQueryParams.Add("beforeDateTime", Configuration.ApiClient.ParameterToString(beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (assetIds != null) localVarQueryParams.Add("assetIds", Configuration.ApiClient.ParameterToString(assetIds)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMultiAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerMultiAsset>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackerMultiAsset>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerMultiAsset>)));
            
        }

        /// <summary>
        /// [TRANSACTIONS] Get all transactions Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        public List<AssetTransaction> GetAllTransactions (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = GetAllTransactionsWithHttpInfo(productId, xApiKey, beforeDateTime, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [TRANSACTIONS] Get all transactions Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        public ApiResponse< List<AssetTransaction> > GetAllTransactionsWithHttpInfo (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAllTransactions");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAllTransactions");

            var localVarPath = "/tracker/{productId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (beforeDateTime != null) localVarQueryParams.Add("beforeDateTime", Configuration.ApiClient.ParameterToString(beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
            
        }

        /// <summary>
        /// [TRANSACTIONS] Get all transactions Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetTransaction>> GetAllTransactionsAsync (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = await GetAllTransactionsAsyncWithHttpInfo(productId, xApiKey, beforeDateTime, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [TRANSACTIONS] Get all transactions Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="beforeDateTime"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> GetAllTransactionsAsyncWithHttpInfo (string productId, string xApiKey, DateTime? beforeDateTime = null, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAllTransactions");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAllTransactions");

            var localVarPath = "/tracker/{productId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (beforeDateTime != null) localVarQueryParams.Add("beforeDateTime", Configuration.ApiClient.ParameterToString(beforeDateTime)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
            
        }

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>TrackerAsset</returns>
        public TrackerAsset GetAssetById (string assetId, string productId, string xApiKey)
        {
             ApiResponse<TrackerAsset> localVarResponse = GetAssetByIdWithHttpInfo(assetId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of TrackerAsset</returns>
        public ApiResponse< TrackerAsset > GetAssetByIdWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetAssetById");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAssetById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAssetById");

            var localVarPath = "/tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
            
        }

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of TrackerAsset</returns>
        public async System.Threading.Tasks.Task<TrackerAsset> GetAssetByIdAsync (string assetId, string productId, string xApiKey)
        {
             ApiResponse<TrackerAsset> localVarResponse = await GetAssetByIdAsyncWithHttpInfo(assetId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Get a specific asset&#39;s details Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (TrackerAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerAsset>> GetAssetByIdAsyncWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetAssetById");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAssetById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAssetById");

            var localVarPath = "/tracker/{productId}/assets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackerAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerAsset)));
            
        }

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s asset balance batches Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>List&lt;Batch&gt;</returns>
        public List<Batch> GetAssetDetailedBalance (string assetId, string productId, string xApiKey, string ownedDisplayName = null)
        {
             ApiResponse<List<Batch>> localVarResponse = GetAssetDetailedBalanceWithHttpInfo(assetId, productId, xApiKey, ownedDisplayName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s asset balance batches Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Batch&gt;</returns>
        public ApiResponse< List<Batch> > GetAssetDetailedBalanceWithHttpInfo (string assetId, string productId, string xApiKey, string ownedDisplayName = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetAssetDetailedBalance");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAssetDetailedBalance");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAssetDetailedBalance");

            var localVarPath = "/tracker/{productId}/balances/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetDetailedBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Batch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Batch>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Batch>)));
            
        }

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s asset balance batches Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of List&lt;Batch&gt;</returns>
        public async System.Threading.Tasks.Task<List<Batch>> GetAssetDetailedBalanceAsync (string assetId, string productId, string xApiKey, string ownedDisplayName = null)
        {
             ApiResponse<List<Batch>> localVarResponse = await GetAssetDetailedBalanceAsyncWithHttpInfo(assetId, productId, xApiKey, ownedDisplayName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s asset balance batches Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Batch&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Batch>>> GetAssetDetailedBalanceAsyncWithHttpInfo (string assetId, string productId, string xApiKey, string ownedDisplayName = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetAssetDetailedBalance");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAssetDetailedBalance");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAssetDetailedBalance");

            var localVarPath = "/tracker/{productId}/balances/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetDetailedBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Batch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Batch>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Batch>)));
            
        }

        /// <summary>
        /// [ASSETS] Get all transactions of a specific batch for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>IssuedBatchTransactionsResponse</returns>
        public IssuedBatchTransactionsResponse GetAssetIssuedBatchTransactions (string assetId, string batchId, string productId, string xApiKey)
        {
             ApiResponse<IssuedBatchTransactionsResponse> localVarResponse = GetAssetIssuedBatchTransactionsWithHttpInfo(assetId, batchId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Get all transactions of a specific batch for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of IssuedBatchTransactionsResponse</returns>
        public ApiResponse< IssuedBatchTransactionsResponse > GetAssetIssuedBatchTransactionsWithHttpInfo (string assetId, string batchId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetAssetIssuedBatchTransactions");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling TrackerApi->GetAssetIssuedBatchTransactions");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAssetIssuedBatchTransactions");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAssetIssuedBatchTransactions");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/batches/{batchId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", Configuration.ApiClient.ParameterToString(batchId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetIssuedBatchTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuedBatchTransactionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchTransactionsResponse)));
            
        }

        /// <summary>
        /// [ASSETS] Get all transactions of a specific batch for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of IssuedBatchTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<IssuedBatchTransactionsResponse> GetAssetIssuedBatchTransactionsAsync (string assetId, string batchId, string productId, string xApiKey)
        {
             ApiResponse<IssuedBatchTransactionsResponse> localVarResponse = await GetAssetIssuedBatchTransactionsAsyncWithHttpInfo(assetId, batchId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Get all transactions of a specific batch for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (IssuedBatchTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuedBatchTransactionsResponse>> GetAssetIssuedBatchTransactionsAsyncWithHttpInfo (string assetId, string batchId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetAssetIssuedBatchTransactions");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling TrackerApi->GetAssetIssuedBatchTransactions");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAssetIssuedBatchTransactions");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAssetIssuedBatchTransactions");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/batches/{batchId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", Configuration.ApiClient.ParameterToString(batchId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetIssuedBatchTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuedBatchTransactionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchTransactionsResponse)));
            
        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>IssuedBatchesResponse</returns>
        public IssuedBatchesResponse GetAssetIssuedBatches (string assetId, string productId, string xApiKey, string sortBy = null, string sort = null)
        {
             ApiResponse<IssuedBatchesResponse> localVarResponse = GetAssetIssuedBatchesWithHttpInfo(assetId, productId, xApiKey, sortBy, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of IssuedBatchesResponse</returns>
        public ApiResponse< IssuedBatchesResponse > GetAssetIssuedBatchesWithHttpInfo (string assetId, string productId, string xApiKey, string sortBy = null, string sort = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetAssetIssuedBatches");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAssetIssuedBatches");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAssetIssuedBatches");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetIssuedBatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuedBatchesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchesResponse)));
            
        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of IssuedBatchesResponse</returns>
        public async System.Threading.Tasks.Task<IssuedBatchesResponse> GetAssetIssuedBatchesAsync (string assetId, string productId, string xApiKey, string sortBy = null, string sort = null)
        {
             ApiResponse<IssuedBatchesResponse> localVarResponse = await GetAssetIssuedBatchesAsyncWithHttpInfo(assetId, productId, xApiKey, sortBy, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Get all issued batches for an asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (IssuedBatchesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuedBatchesResponse>> GetAssetIssuedBatchesAsyncWithHttpInfo (string assetId, string productId, string xApiKey, string sortBy = null, string sort = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetAssetIssuedBatches");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetAssetIssuedBatches");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetAssetIssuedBatches");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetIssuedBatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuedBatchesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchesResponse)));
            
        }

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s assets balances Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>List&lt;AssetBalance&gt;</returns>
        public List<AssetBalance> GetBalances (string productId, string xApiKey, string ownedDisplayName = null)
        {
             ApiResponse<List<AssetBalance>> localVarResponse = GetBalancesWithHttpInfo(productId, xApiKey, ownedDisplayName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s assets balances Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AssetBalance&gt;</returns>
        public ApiResponse< List<AssetBalance> > GetBalancesWithHttpInfo (string productId, string xApiKey, string ownedDisplayName = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetBalances");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetBalances");

            var localVarPath = "/tracker/{productId}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetBalance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetBalance>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetBalance>)));
            
        }

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s assets balances Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of List&lt;AssetBalance&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetBalance>> GetBalancesAsync (string productId, string xApiKey, string ownedDisplayName = null)
        {
             ApiResponse<List<AssetBalance>> localVarResponse = await GetBalancesAsyncWithHttpInfo(productId, xApiKey, ownedDisplayName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BALANCES] Get all authenticated user&#39;s assets balances Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ownedDisplayName"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssetBalance&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetBalance>>> GetBalancesAsyncWithHttpInfo (string productId, string xApiKey, string ownedDisplayName = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetBalances");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetBalances");

            var localVarPath = "/tracker/{productId}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (ownedDisplayName != null) localVarHeaderParams.Add("ownedDisplayName", Configuration.ApiClient.ParameterToString(ownedDisplayName)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetBalance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetBalance>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetBalance>)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Get a specific multi asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>TrackerMultiAsset</returns>
        public TrackerMultiAsset GetMultiAssetById (string assetId, string productId, string xApiKey)
        {
             ApiResponse<TrackerMultiAsset> localVarResponse = GetMultiAssetByIdWithHttpInfo(assetId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [MULTIASSETS] Get a specific multi asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of TrackerMultiAsset</returns>
        public ApiResponse< TrackerMultiAsset > GetMultiAssetByIdWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetMultiAssetById");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetMultiAssetById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetMultiAssetById");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiAssetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerMultiAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackerMultiAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerMultiAsset)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Get a specific multi asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of TrackerMultiAsset</returns>
        public async System.Threading.Tasks.Task<TrackerMultiAsset> GetMultiAssetByIdAsync (string assetId, string productId, string xApiKey)
        {
             ApiResponse<TrackerMultiAsset> localVarResponse = await GetMultiAssetByIdAsyncWithHttpInfo(assetId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [MULTIASSETS] Get a specific multi asset&#39;s details Requires the Track Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (TrackerMultiAsset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerMultiAsset>> GetMultiAssetByIdAsyncWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetMultiAssetById");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetMultiAssetById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetMultiAssetById");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiAssetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerMultiAsset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackerMultiAsset) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerMultiAsset)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Get all transactions of a specific batch for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>IssuedBatchTransactionsResponse</returns>
        public IssuedBatchTransactionsResponse GetMultiAssetIssuedBatchTransactions (string assetId, string batchId, string productId, string xApiKey)
        {
             ApiResponse<IssuedBatchTransactionsResponse> localVarResponse = GetMultiAssetIssuedBatchTransactionsWithHttpInfo(assetId, batchId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [MULTIASSETS] Get all transactions of a specific batch for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of IssuedBatchTransactionsResponse</returns>
        public ApiResponse< IssuedBatchTransactionsResponse > GetMultiAssetIssuedBatchTransactionsWithHttpInfo (string assetId, string batchId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetMultiAssetIssuedBatchTransactions");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling TrackerApi->GetMultiAssetIssuedBatchTransactions");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetMultiAssetIssuedBatchTransactions");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetMultiAssetIssuedBatchTransactions");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/batches/{batchId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", Configuration.ApiClient.ParameterToString(batchId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiAssetIssuedBatchTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuedBatchTransactionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchTransactionsResponse)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Get all transactions of a specific batch for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of IssuedBatchTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<IssuedBatchTransactionsResponse> GetMultiAssetIssuedBatchTransactionsAsync (string assetId, string batchId, string productId, string xApiKey)
        {
             ApiResponse<IssuedBatchTransactionsResponse> localVarResponse = await GetMultiAssetIssuedBatchTransactionsAsyncWithHttpInfo(assetId, batchId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [MULTIASSETS] Get all transactions of a specific batch for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="batchId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (IssuedBatchTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuedBatchTransactionsResponse>> GetMultiAssetIssuedBatchTransactionsAsyncWithHttpInfo (string assetId, string batchId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetMultiAssetIssuedBatchTransactions");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling TrackerApi->GetMultiAssetIssuedBatchTransactions");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetMultiAssetIssuedBatchTransactions");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetMultiAssetIssuedBatchTransactions");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/batches/{batchId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", Configuration.ApiClient.ParameterToString(batchId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiAssetIssuedBatchTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuedBatchTransactionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchTransactionsResponse)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Get all issued batches for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>IssuedBatchesResponse</returns>
        public IssuedBatchesResponse GetMultiAssetIssuedBatches (string assetId, string productId, string xApiKey)
        {
             ApiResponse<IssuedBatchesResponse> localVarResponse = GetMultiAssetIssuedBatchesWithHttpInfo(assetId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [MULTIASSETS] Get all issued batches for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of IssuedBatchesResponse</returns>
        public ApiResponse< IssuedBatchesResponse > GetMultiAssetIssuedBatchesWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetMultiAssetIssuedBatches");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetMultiAssetIssuedBatches");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetMultiAssetIssuedBatches");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiAssetIssuedBatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuedBatchesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchesResponse)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Get all issued batches for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of IssuedBatchesResponse</returns>
        public async System.Threading.Tasks.Task<IssuedBatchesResponse> GetMultiAssetIssuedBatchesAsync (string assetId, string productId, string xApiKey)
        {
             ApiResponse<IssuedBatchesResponse> localVarResponse = await GetMultiAssetIssuedBatchesAsyncWithHttpInfo(assetId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [MULTIASSETS] Get all issued batches for a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (IssuedBatchesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuedBatchesResponse>> GetMultiAssetIssuedBatchesAsyncWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetMultiAssetIssuedBatches");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetMultiAssetIssuedBatches");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetMultiAssetIssuedBatches");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiAssetIssuedBatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuedBatchesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuedBatchesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuedBatchesResponse)));
            
        }

        /// <summary>
        /// [ENTITIES] Get all entities of a user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>List&lt;NonUserResponse&gt;</returns>
        public List<NonUserResponse> GetOwnedIdentities (string productId, string xApiKey)
        {
             ApiResponse<List<NonUserResponse>> localVarResponse = GetOwnedIdentitiesWithHttpInfo(productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ENTITIES] Get all entities of a user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of List&lt;NonUserResponse&gt;</returns>
        public ApiResponse< List<NonUserResponse> > GetOwnedIdentitiesWithHttpInfo (string productId, string xApiKey)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetOwnedIdentities");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetOwnedIdentities");

            var localVarPath = "/tracker/{productId}/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedIdentities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NonUserResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NonUserResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NonUserResponse>)));
            
        }

        /// <summary>
        /// [ENTITIES] Get all entities of a user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of List&lt;NonUserResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<NonUserResponse>> GetOwnedIdentitiesAsync (string productId, string xApiKey)
        {
             ApiResponse<List<NonUserResponse>> localVarResponse = await GetOwnedIdentitiesAsyncWithHttpInfo(productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ENTITIES] Get all entities of a user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (List&lt;NonUserResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NonUserResponse>>> GetOwnedIdentitiesAsyncWithHttpInfo (string productId, string xApiKey)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetOwnedIdentities");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetOwnedIdentities");

            var localVarPath = "/tracker/{productId}/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOwnedIdentities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NonUserResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NonUserResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NonUserResponse>)));
            
        }

        /// <summary>
        /// [ASSETS] Get all transactions for an asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        public List<AssetTransaction> GetTransactionsByAssetId (string assetId, string productId, string xApiKey)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = GetTransactionsByAssetIdWithHttpInfo(assetId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Get all transactions for an asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        public ApiResponse< List<AssetTransaction> > GetTransactionsByAssetIdWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetTransactionsByAssetId");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetTransactionsByAssetId");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetTransactionsByAssetId");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionsByAssetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
            
        }

        /// <summary>
        /// [ASSETS] Get all transactions for an asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetTransaction>> GetTransactionsByAssetIdAsync (string assetId, string productId, string xApiKey)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = await GetTransactionsByAssetIdAsyncWithHttpInfo(assetId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Get all transactions for an asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> GetTransactionsByAssetIdAsyncWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetTransactionsByAssetId");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetTransactionsByAssetId");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetTransactionsByAssetId");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionsByAssetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Get all transactions for a multi asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>List&lt;AssetTransaction&gt;</returns>
        public List<AssetTransaction> GetTransactionsByMultiAssetId (string assetId, string productId, string xApiKey)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = GetTransactionsByMultiAssetIdWithHttpInfo(assetId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [MULTIASSETS] Get all transactions for a multi asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of List&lt;AssetTransaction&gt;</returns>
        public ApiResponse< List<AssetTransaction> > GetTransactionsByMultiAssetIdWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetTransactionsByMultiAssetId");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetTransactionsByMultiAssetId");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetTransactionsByMultiAssetId");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionsByMultiAssetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Get all transactions for a multi asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of List&lt;AssetTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetTransaction>> GetTransactionsByMultiAssetIdAsync (string assetId, string productId, string xApiKey)
        {
             ApiResponse<List<AssetTransaction>> localVarResponse = await GetTransactionsByMultiAssetIdAsyncWithHttpInfo(assetId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [MULTIASSETS] Get all transactions for a multi asset Requires the Tracker Admin Role or Tracker User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (List&lt;AssetTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetTransaction>>> GetTransactionsByMultiAssetIdAsyncWithHttpInfo (string assetId, string productId, string xApiKey)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->GetTransactionsByMultiAssetId");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->GetTransactionsByMultiAssetId");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->GetTransactionsByMultiAssetId");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionsByMultiAssetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssetTransaction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetTransaction>)));
            
        }

        /// <summary>
        /// [ASSETS] Issue an amount of an asset Requires the Tracker Admin Role. If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>AssetIssueResponse</returns>
        public AssetIssueResponse IssueAsset (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null)
        {
             ApiResponse<AssetIssueResponse> localVarResponse = IssueAssetWithHttpInfo(assetId, productId, xApiKey, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Issue an amount of an asset Requires the Tracker Admin Role. If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of AssetIssueResponse</returns>
        public ApiResponse< AssetIssueResponse > IssueAssetWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->IssueAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->IssueAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->IssueAsset");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetIssueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetIssueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetIssueResponse)));
            
        }

        /// <summary>
        /// [ASSETS] Issue an amount of an asset Requires the Tracker Admin Role. If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of AssetIssueResponse</returns>
        public async System.Threading.Tasks.Task<AssetIssueResponse> IssueAssetAsync (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null)
        {
             ApiResponse<AssetIssueResponse> localVarResponse = await IssueAssetAsyncWithHttpInfo(assetId, productId, xApiKey, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Issue an amount of an asset Requires the Tracker Admin Role. If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (AssetIssueResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetIssueResponse>> IssueAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->IssueAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->IssueAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->IssueAsset");

            var localVarPath = "/tracker/{productId}/assets/{assetId}/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetIssueResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetIssueResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetIssueResponse)));
            
        }

        /// <summary>
        /// [ASSETS] Issue in bulk Requires the Tracker Admin Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>List&lt;TrackerAssetIssueResponse&gt;</returns>
        public List<TrackerAssetIssueResponse> IssueAssetBulk (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null)
        {
             ApiResponse<List<TrackerAssetIssueResponse>> localVarResponse = IssueAssetBulkWithHttpInfo(productId, xApiKey, requests);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [ASSETS] Issue in bulk Requires the Tracker Admin Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerAssetIssueResponse&gt;</returns>
        public ApiResponse< List<TrackerAssetIssueResponse> > IssueAssetBulkWithHttpInfo (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->IssueAssetBulk");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->IssueAssetBulk");

            var localVarPath = "/tracker/{productId}/assets/issue/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (requests != null && requests.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requests); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requests; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueAssetBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerAssetIssueResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackerAssetIssueResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerAssetIssueResponse>)));
            
        }

        /// <summary>
        /// [ASSETS] Issue in bulk Requires the Tracker Admin Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>Task of List&lt;TrackerAssetIssueResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackerAssetIssueResponse>> IssueAssetBulkAsync (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null)
        {
             ApiResponse<List<TrackerAssetIssueResponse>> localVarResponse = await IssueAssetBulkAsyncWithHttpInfo(productId, xApiKey, requests);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [ASSETS] Issue in bulk Requires the Tracker Admin Role.  If you want to transfer to an entity, you should put the id of it.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerAssetIssueResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackerAssetIssueResponse>>> IssueAssetBulkAsyncWithHttpInfo (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->IssueAssetBulk");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->IssueAssetBulk");

            var localVarPath = "/tracker/{productId}/assets/issue/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (requests != null && requests.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requests); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requests; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueAssetBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerAssetIssueResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackerAssetIssueResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerAssetIssueResponse>)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Issue an amount of a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void IssueMultiAsset (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null)
        {
             IssueMultiAssetWithHttpInfo(assetId, productId, xApiKey, request);
        }

        /// <summary>
        /// [MULTIASSETS] Issue an amount of a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IssueMultiAssetWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->IssueMultiAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->IssueMultiAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->IssueMultiAsset");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueMultiAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [MULTIASSETS] Issue an amount of a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IssueMultiAssetAsync (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null)
        {
             await IssueMultiAssetAsyncWithHttpInfo(assetId, productId, xApiKey, request);

        }

        /// <summary>
        /// [MULTIASSETS] Issue an amount of a multi asset Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IssueMultiAssetAsyncWithHttpInfo (string assetId, string productId, string xApiKey, TrackerAssetIssueRequest request = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling TrackerApi->IssueMultiAsset");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->IssueMultiAsset");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->IssueMultiAsset");

            var localVarPath = "/tracker/{productId}/multiassets/{assetId}/issue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (assetId != null) localVarPathParams.Add("assetId", Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueMultiAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [MULTIASSETS] Issue multi asset in bulk Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>List&lt;TrackerAssetIssueResponse&gt;</returns>
        public List<TrackerAssetIssueResponse> IssueMultiAssetBulk (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null)
        {
             ApiResponse<List<TrackerAssetIssueResponse>> localVarResponse = IssueMultiAssetBulkWithHttpInfo(productId, xApiKey, requests);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [MULTIASSETS] Issue multi asset in bulk Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackerAssetIssueResponse&gt;</returns>
        public ApiResponse< List<TrackerAssetIssueResponse> > IssueMultiAssetBulkWithHttpInfo (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->IssueMultiAssetBulk");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->IssueMultiAssetBulk");

            var localVarPath = "/tracker/{productId}/multiassets/issue/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (requests != null && requests.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requests); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requests; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueMultiAssetBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerAssetIssueResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackerAssetIssueResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerAssetIssueResponse>)));
            
        }

        /// <summary>
        /// [MULTIASSETS] Issue multi asset in bulk Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>Task of List&lt;TrackerAssetIssueResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackerAssetIssueResponse>> IssueMultiAssetBulkAsync (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null)
        {
             ApiResponse<List<TrackerAssetIssueResponse>> localVarResponse = await IssueMultiAssetBulkAsyncWithHttpInfo(productId, xApiKey, requests);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [MULTIASSETS] Issue multi asset in bulk Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="requests"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackerAssetIssueResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackerAssetIssueResponse>>> IssueMultiAssetBulkAsyncWithHttpInfo (string productId, string xApiKey, List<TrackerAssetIssueBulkRequest> requests = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->IssueMultiAssetBulk");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->IssueMultiAssetBulk");

            var localVarPath = "/tracker/{productId}/multiassets/issue/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (requests != null && requests.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requests); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requests; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueMultiAssetBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackerAssetIssueResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackerAssetIssueResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackerAssetIssueResponse>)));
            
        }

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void Reverse (string transactionId, string productId, string xApiKey)
        {
             ReverseWithHttpInfo(transactionId, productId, xApiKey);
        }

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReverseWithHttpInfo (string transactionId, string productId, string xApiKey)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TrackerApi->Reverse");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->Reverse");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->Reverse");

            var localVarPath = "/tracker/{productId}/transactions/{transactionId}/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (transactionId != null) localVarPathParams.Add("transactionId", Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reverse", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReverseAsync (string transactionId, string productId, string xApiKey)
        {
             await ReverseAsyncWithHttpInfo(transactionId, productId, xApiKey);

        }

        /// <summary>
        /// [TRANSACTIONS] Revert a transaction This operation will refund the amounts that have been sent from a user to another by creating a new transaction.                Requires the Tracker Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReverseAsyncWithHttpInfo (string transactionId, string productId, string xApiKey)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TrackerApi->Reverse");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling TrackerApi->Reverse");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling TrackerApi->Reverse");

            var localVarPath = "/tracker/{productId}/transactions/{transactionId}/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (transactionId != null) localVarPathParams.Add("transactionId", Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reverse", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
