/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a specific user&#39;s details and roles
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        User UsersByUserIdGet (string userId);

        /// <summary>
        /// Get a specific user&#39;s details and roles
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersByUserIdGetWithHttpInfo (string userId);
        /// <summary>
        /// Edit a user&#39;s details
        /// </summary>
        /// <remarks>
        /// If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void UsersByUserIdPut (string userId, EditUserRequest request = null);

        /// <summary>
        /// Edit a user&#39;s details
        /// </summary>
        /// <remarks>
        /// If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersByUserIdPutWithHttpInfo (string userId, EditUserRequest request = null);
        /// <summary>
        /// Disable a specific user
        /// </summary>
        /// <remarks>
        /// This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns></returns>
        void UsersDisableByUserIdPut (string userId);

        /// <summary>
        /// Disable a specific user
        /// </summary>
        /// <remarks>
        /// This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersDisableByUserIdPutWithHttpInfo (string userId);
        /// <summary>
        /// Enable a specific user
        /// </summary>
        /// <remarks>
        /// This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns></returns>
        void UsersEnableByUserIdPut (string userId);

        /// <summary>
        /// Enable a specific user
        /// </summary>
        /// <remarks>
        /// This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersEnableByUserIdPutWithHttpInfo (string userId);
        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UsersGet (bool? isEnabled = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UsersGetWithHttpInfo (bool? isEnabled = null, int? limit = null, int? offset = null);
        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> UsersSelfRolesGet ();

        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> UsersSelfRolesGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a specific user&#39;s details and roles
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersByUserIdGetAsync (string userId);

        /// <summary>
        /// Get a specific user&#39;s details and roles
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersByUserIdGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Edit a user&#39;s details
        /// </summary>
        /// <remarks>
        /// If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersByUserIdPutAsync (string userId, EditUserRequest request = null);

        /// <summary>
        /// Edit a user&#39;s details
        /// </summary>
        /// <remarks>
        /// If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersByUserIdPutAsyncWithHttpInfo (string userId, EditUserRequest request = null);
        /// <summary>
        /// Disable a specific user
        /// </summary>
        /// <remarks>
        /// This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersDisableByUserIdPutAsync (string userId);

        /// <summary>
        /// Disable a specific user
        /// </summary>
        /// <remarks>
        /// This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersDisableByUserIdPutAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Enable a specific user
        /// </summary>
        /// <remarks>
        /// This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersEnableByUserIdPutAsync (string userId);

        /// <summary>
        /// Enable a specific user
        /// </summary>
        /// <remarks>
        /// This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersEnableByUserIdPutAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UsersGetAsync (bool? isEnabled = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersGetAsyncWithHttpInfo (bool? isEnabled = null, int? limit = null, int? offset = null);
        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> UsersSelfRolesGetAsync ();

        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> UsersSelfRolesGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a specific user&#39;s details and roles Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        public User UsersByUserIdGet (string userId)
        {
             ApiResponse<User> localVarResponse = UsersByUserIdGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific user&#39;s details and roles Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UsersByUserIdGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersByUserIdGet");

            var localVarPath = "./users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersByUserIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a specific user&#39;s details and roles Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersByUserIdGetAsync (string userId)
        {
             ApiResponse<User> localVarResponse = await UsersByUserIdGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific user&#39;s details and roles Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersByUserIdGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersByUserIdGet");

            var localVarPath = "./users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersByUserIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Edit a user&#39;s details If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void UsersByUserIdPut (string userId, EditUserRequest request = null)
        {
             UsersByUserIdPutWithHttpInfo(userId, request);
        }

        /// <summary>
        /// Edit a user&#39;s details If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersByUserIdPutWithHttpInfo (string userId, EditUserRequest request = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersByUserIdPut");

            var localVarPath = "./users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersByUserIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a user&#39;s details If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersByUserIdPutAsync (string userId, EditUserRequest request = null)
        {
             await UsersByUserIdPutAsyncWithHttpInfo(userId, request);

        }

        /// <summary>
        /// Edit a user&#39;s details If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersByUserIdPutAsyncWithHttpInfo (string userId, EditUserRequest request = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersByUserIdPut");

            var localVarPath = "./users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersByUserIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disable a specific user This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns></returns>
        public void UsersDisableByUserIdPut (string userId)
        {
             UsersDisableByUserIdPutWithHttpInfo(userId);
        }

        /// <summary>
        /// Disable a specific user This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersDisableByUserIdPutWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersDisableByUserIdPut");

            var localVarPath = "./users/disable/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDisableByUserIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disable a specific user This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersDisableByUserIdPutAsync (string userId)
        {
             await UsersDisableByUserIdPutAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Disable a specific user This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersDisableByUserIdPutAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersDisableByUserIdPut");

            var localVarPath = "./users/disable/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDisableByUserIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enable a specific user This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns></returns>
        public void UsersEnableByUserIdPut (string userId)
        {
             UsersEnableByUserIdPutWithHttpInfo(userId);
        }

        /// <summary>
        /// Enable a specific user This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersEnableByUserIdPutWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersEnableByUserIdPut");

            var localVarPath = "./users/enable/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersEnableByUserIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enable a specific user This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersEnableByUserIdPutAsync (string userId)
        {
             await UsersEnableByUserIdPutAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Enable a specific user This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersEnableByUserIdPutAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersEnableByUserIdPut");

            var localVarPath = "./users/enable/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersEnableByUserIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all users Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UsersGet (bool? isEnabled = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<User>> localVarResponse = UsersGetWithHttpInfo(isEnabled, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all users Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > UsersGetWithHttpInfo (bool? isEnabled = null, int? limit = null, int? offset = null)
        {

            var localVarPath = "./users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isEnabled != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isEnabled", isEnabled)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<User>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get all users Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UsersGetAsync (bool? isEnabled = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<User>> localVarResponse = await UsersGetAsyncWithHttpInfo(isEnabled, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all users Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersGetAsyncWithHttpInfo (bool? isEnabled = null, int? limit = null, int? offset = null)
        {

            var localVarPath = "./users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isEnabled != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isEnabled", isEnabled)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<User>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get all roles Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> UsersSelfRolesGet ()
        {
             ApiResponse<List<string>> localVarResponse = UsersSelfRolesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > UsersSelfRolesGetWithHttpInfo ()
        {

            var localVarPath = "./users/self/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersSelfRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get all roles Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> UsersSelfRolesGetAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await UsersSelfRolesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all roles Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> UsersSelfRolesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./users/self/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersSelfRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

    }
}
