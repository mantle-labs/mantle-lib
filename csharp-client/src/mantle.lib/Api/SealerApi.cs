/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISealerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [] Delete a contract
        /// </summary>
        /// <remarks>
        /// Cannot if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        void SealerByProductIdContractsByContractIdDelete (string contractId, string productId);

        /// <summary>
        /// [] Delete a contract
        /// </summary>
        /// <remarks>
        /// Cannot if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SealerByProductIdContractsByContractIdDeleteWithHttpInfo (string contractId, string productId);
        /// <summary>
        /// [] Compare a local contract file
        /// </summary>
        /// <remarks>
        ///  Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        SealerBreadcrumbingCompareResponse SealerByProductIdContractsCompareContractPost (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local contract file
        /// </summary>
        /// <remarks>
        ///  Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        ApiResponse<SealerBreadcrumbingCompareResponse> SealerByProductIdContractsCompareContractPostWithHttpInfo (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Compare a local signature file to all the signatures of the contract to see if one matches
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ContractSignatureDiffResponse</returns>
        ContractSignatureDiffResponse SealerByProductIdContractsCompareSignaturePost (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local signature file to all the signatures of the contract to see if one matches
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of ContractSignatureDiffResponse</returns>
        ApiResponse<ContractSignatureDiffResponse> SealerByProductIdContractsCompareSignaturePostWithHttpInfo (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Get all the contracts grouped by signer
        /// </summary>
        /// <remarks>
        /// A status defines if the contract is signed, partially signed, currently being signed or unsigned
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> SealerByProductIdContractsGet (string productId, int? limit = null, int? offset = null);

        /// <summary>
        /// [] Get all the contracts grouped by signer
        /// </summary>
        /// <remarks>
        /// A status defines if the contract is signed, partially signed, currently being signed or unsigned
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> SealerByProductIdContractsGetWithHttpInfo (string productId, int? limit = null, int? offset = null);
        /// <summary>
        /// [] Create a contract for specified emails
        /// </summary>
        /// <remarks>
        /// The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Contract</returns>
        Contract SealerByProductIdContractsPost (System.IO.Stream file, string displayName, List<string> signerEmails, string signatures, string productId, string templateId = null, string request = null);

        /// <summary>
        /// [] Create a contract for specified emails
        /// </summary>
        /// <remarks>
        /// The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> SealerByProductIdContractsPostWithHttpInfo (System.IO.Stream file, string displayName, List<string> signerEmails, string signatures, string productId, string templateId = null, string request = null);
        /// <summary>
        /// [] Get all of the authenticated user’s contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> SealerByProductIdContractsSelfGet (string productId, int? limit = null, int? offset = null);

        /// <summary>
        /// [] Get all of the authenticated user’s contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> SealerByProductIdContractsSelfGetWithHttpInfo (string productId, int? limit = null, int? offset = null);
        /// <summary>
        /// [] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="reuseLastSignature"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void SealerByProductIdContractsSignByContractIdPost (string contractId, System.IO.Stream signature, System.IO.Stream contract, string productId, bool? reuseLastSignature = null, string request = null);

        /// <summary>
        /// [] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="reuseLastSignature"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SealerByProductIdContractsSignByContractIdPostWithHttpInfo (string contractId, System.IO.Stream signature, System.IO.Stream contract, string productId, bool? reuseLastSignature = null, string request = null);
        /// <summary>
        /// [] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires no role, as someone outside of the Mantle software could sign this contract.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void SealerByProductIdContractsSignPost (System.IO.Stream signature, System.IO.Stream contract, string productId, string request = null);

        /// <summary>
        /// [] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires no role, as someone outside of the Mantle software could sign this contract.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SealerByProductIdContractsSignPostWithHttpInfo (System.IO.Stream signature, System.IO.Stream contract, string productId, string request = null);
        /// <summary>
        /// [] Delete a signature
        /// </summary>
        /// <remarks>
        /// Cannot if used in one or more contracts.                Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        void SealerByProductIdSignaturesBySignatureIdDelete (string signatureId, string productId);

        /// <summary>
        /// [] Delete a signature
        /// </summary>
        /// <remarks>
        /// Cannot if used in one or more contracts.                Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SealerByProductIdSignaturesBySignatureIdDeleteWithHttpInfo (string signatureId, string productId);
        /// <summary>
        /// [] Compare a local signature file to a signature
        /// </summary>
        /// <remarks>
        /// Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        SealerBreadcrumbingCompareResponse SealerByProductIdSignaturesComparePost (string signatureId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local signature file to a signature
        /// </summary>
        /// <remarks>
        /// Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        ApiResponse<SealerBreadcrumbingCompareResponse> SealerByProductIdSignaturesComparePostWithHttpInfo (string signatureId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Get all of the authenticated user’s signatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> SealerByProductIdSignaturesGet (string productId, int? limit = null, int? offset = null);

        /// <summary>
        /// [] Get all of the authenticated user’s signatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> SealerByProductIdSignaturesGetWithHttpInfo (string productId, int? limit = null, int? offset = null);
        /// <summary>
        /// [] Create a signature for the authenticated user
        /// </summary>
        /// <remarks>
        /// Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Signature</returns>
        Signature SealerByProductIdSignaturesPost (System.IO.Stream file, string productId, string request = null);

        /// <summary>
        /// [] Create a signature for the authenticated user
        /// </summary>
        /// <remarks>
        /// Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Signature</returns>
        ApiResponse<Signature> SealerByProductIdSignaturesPostWithHttpInfo (System.IO.Stream file, string productId, string request = null);
        /// <summary>
        /// [] Get contracts attached to a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> SealerByProductIdTemplatesByTemplateIdContractsGet (string templateId, string productId, int? limit = null, int? offset = null);

        /// <summary>
        /// [] Get contracts attached to a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> SealerByProductIdTemplatesByTemplateIdContractsGetWithHttpInfo (string templateId, string productId, int? limit = null, int? offset = null);
        /// <summary>
        /// [] Delete a template
        /// </summary>
        /// <remarks>
        /// Cannot if it has linked contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        void SealerByProductIdTemplatesByTemplateIdDelete (string templateId, string productId);

        /// <summary>
        /// [] Delete a template
        /// </summary>
        /// <remarks>
        /// Cannot if it has linked contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SealerByProductIdTemplatesByTemplateIdDeleteWithHttpInfo (string templateId, string productId);
        /// <summary>
        /// [] Get a specific template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>Template</returns>
        Template SealerByProductIdTemplatesByTemplateIdGet (string templateId, string productId);

        /// <summary>
        /// [] Get a specific template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> SealerByProductIdTemplatesByTemplateIdGetWithHttpInfo (string templateId, string productId);
        /// <summary>
        /// [] Compare a local template file to the template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        SealerBreadcrumbingCompareResponse SealerByProductIdTemplatesComparePost (string templateId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local template file to the template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        ApiResponse<SealerBreadcrumbingCompareResponse> SealerByProductIdTemplatesComparePostWithHttpInfo (string templateId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Get all templates
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> SealerByProductIdTemplatesGet (string productId, int? limit = null, int? offset = null);

        /// <summary>
        /// [] Get all templates
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> SealerByProductIdTemplatesGetWithHttpInfo (string productId, int? limit = null, int? offset = null);
        /// <summary>
        /// [] Create a template
        /// </summary>
        /// <remarks>
        /// Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Template</returns>
        Template SealerByProductIdTemplatesPost (System.IO.Stream file, string displayName, string productId, string request = null);

        /// <summary>
        /// [] Create a template
        /// </summary>
        /// <remarks>
        /// Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> SealerByProductIdTemplatesPostWithHttpInfo (System.IO.Stream file, string displayName, string productId, string request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [] Delete a contract
        /// </summary>
        /// <remarks>
        /// Cannot if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SealerByProductIdContractsByContractIdDeleteAsync (string contractId, string productId);

        /// <summary>
        /// [] Delete a contract
        /// </summary>
        /// <remarks>
        /// Cannot if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SealerByProductIdContractsByContractIdDeleteAsyncWithHttpInfo (string contractId, string productId);
        /// <summary>
        /// [] Compare a local contract file
        /// </summary>
        /// <remarks>
        ///  Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> SealerByProductIdContractsCompareContractPostAsync (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local contract file
        /// </summary>
        /// <remarks>
        ///  Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> SealerByProductIdContractsCompareContractPostAsyncWithHttpInfo (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Compare a local signature file to all the signatures of the contract to see if one matches
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ContractSignatureDiffResponse</returns>
        System.Threading.Tasks.Task<ContractSignatureDiffResponse> SealerByProductIdContractsCompareSignaturePostAsync (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local signature file to all the signatures of the contract to see if one matches
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (ContractSignatureDiffResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractSignatureDiffResponse>> SealerByProductIdContractsCompareSignaturePostAsyncWithHttpInfo (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Get all the contracts grouped by signer
        /// </summary>
        /// <remarks>
        /// A status defines if the contract is signed, partially signed, currently being signed or unsigned
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> SealerByProductIdContractsGetAsync (string productId, int? limit = null, int? offset = null);

        /// <summary>
        /// [] Get all the contracts grouped by signer
        /// </summary>
        /// <remarks>
        /// A status defines if the contract is signed, partially signed, currently being signed or unsigned
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> SealerByProductIdContractsGetAsyncWithHttpInfo (string productId, int? limit = null, int? offset = null);
        /// <summary>
        /// [] Create a contract for specified emails
        /// </summary>
        /// <remarks>
        /// The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> SealerByProductIdContractsPostAsync (System.IO.Stream file, string displayName, List<string> signerEmails, string signatures, string productId, string templateId = null, string request = null);

        /// <summary>
        /// [] Create a contract for specified emails
        /// </summary>
        /// <remarks>
        /// The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> SealerByProductIdContractsPostAsyncWithHttpInfo (System.IO.Stream file, string displayName, List<string> signerEmails, string signatures, string productId, string templateId = null, string request = null);
        /// <summary>
        /// [] Get all of the authenticated user’s contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> SealerByProductIdContractsSelfGetAsync (string productId, int? limit = null, int? offset = null);

        /// <summary>
        /// [] Get all of the authenticated user’s contracts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> SealerByProductIdContractsSelfGetAsyncWithHttpInfo (string productId, int? limit = null, int? offset = null);
        /// <summary>
        /// [] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="reuseLastSignature"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SealerByProductIdContractsSignByContractIdPostAsync (string contractId, System.IO.Stream signature, System.IO.Stream contract, string productId, bool? reuseLastSignature = null, string request = null);

        /// <summary>
        /// [] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="reuseLastSignature"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SealerByProductIdContractsSignByContractIdPostAsyncWithHttpInfo (string contractId, System.IO.Stream signature, System.IO.Stream contract, string productId, bool? reuseLastSignature = null, string request = null);
        /// <summary>
        /// [] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires no role, as someone outside of the Mantle software could sign this contract.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SealerByProductIdContractsSignPostAsync (System.IO.Stream signature, System.IO.Stream contract, string productId, string request = null);

        /// <summary>
        /// [] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires no role, as someone outside of the Mantle software could sign this contract.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SealerByProductIdContractsSignPostAsyncWithHttpInfo (System.IO.Stream signature, System.IO.Stream contract, string productId, string request = null);
        /// <summary>
        /// [] Delete a signature
        /// </summary>
        /// <remarks>
        /// Cannot if used in one or more contracts.                Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SealerByProductIdSignaturesBySignatureIdDeleteAsync (string signatureId, string productId);

        /// <summary>
        /// [] Delete a signature
        /// </summary>
        /// <remarks>
        /// Cannot if used in one or more contracts.                Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SealerByProductIdSignaturesBySignatureIdDeleteAsyncWithHttpInfo (string signatureId, string productId);
        /// <summary>
        /// [] Compare a local signature file to a signature
        /// </summary>
        /// <remarks>
        /// Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> SealerByProductIdSignaturesComparePostAsync (string signatureId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local signature file to a signature
        /// </summary>
        /// <remarks>
        /// Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> SealerByProductIdSignaturesComparePostAsyncWithHttpInfo (string signatureId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Get all of the authenticated user’s signatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> SealerByProductIdSignaturesGetAsync (string productId, int? limit = null, int? offset = null);

        /// <summary>
        /// [] Get all of the authenticated user’s signatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> SealerByProductIdSignaturesGetAsyncWithHttpInfo (string productId, int? limit = null, int? offset = null);
        /// <summary>
        /// [] Create a signature for the authenticated user
        /// </summary>
        /// <remarks>
        /// Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Signature</returns>
        System.Threading.Tasks.Task<Signature> SealerByProductIdSignaturesPostAsync (System.IO.Stream file, string productId, string request = null);

        /// <summary>
        /// [] Create a signature for the authenticated user
        /// </summary>
        /// <remarks>
        /// Requires the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Signature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Signature>> SealerByProductIdSignaturesPostAsyncWithHttpInfo (System.IO.Stream file, string productId, string request = null);
        /// <summary>
        /// [] Get contracts attached to a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> SealerByProductIdTemplatesByTemplateIdContractsGetAsync (string templateId, string productId, int? limit = null, int? offset = null);

        /// <summary>
        /// [] Get contracts attached to a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> SealerByProductIdTemplatesByTemplateIdContractsGetAsyncWithHttpInfo (string templateId, string productId, int? limit = null, int? offset = null);
        /// <summary>
        /// [] Delete a template
        /// </summary>
        /// <remarks>
        /// Cannot if it has linked contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SealerByProductIdTemplatesByTemplateIdDeleteAsync (string templateId, string productId);

        /// <summary>
        /// [] Delete a template
        /// </summary>
        /// <remarks>
        /// Cannot if it has linked contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SealerByProductIdTemplatesByTemplateIdDeleteAsyncWithHttpInfo (string templateId, string productId);
        /// <summary>
        /// [] Get a specific template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> SealerByProductIdTemplatesByTemplateIdGetAsync (string templateId, string productId);

        /// <summary>
        /// [] Get a specific template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> SealerByProductIdTemplatesByTemplateIdGetAsyncWithHttpInfo (string templateId, string productId);
        /// <summary>
        /// [] Compare a local template file to the template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> SealerByProductIdTemplatesComparePostAsync (string templateId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local template file to the template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> SealerByProductIdTemplatesComparePostAsyncWithHttpInfo (string templateId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Get all templates
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> SealerByProductIdTemplatesGetAsync (string productId, int? limit = null, int? offset = null);

        /// <summary>
        /// [] Get all templates
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> SealerByProductIdTemplatesGetAsyncWithHttpInfo (string productId, int? limit = null, int? offset = null);
        /// <summary>
        /// [] Create a template
        /// </summary>
        /// <remarks>
        /// Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> SealerByProductIdTemplatesPostAsync (System.IO.Stream file, string displayName, string productId, string request = null);

        /// <summary>
        /// [] Create a template
        /// </summary>
        /// <remarks>
        /// Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> SealerByProductIdTemplatesPostAsyncWithHttpInfo (System.IO.Stream file, string displayName, string productId, string request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SealerApi : ISealerApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SealerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SealerApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SealerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SealerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [] Delete a contract Cannot if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        public void SealerByProductIdContractsByContractIdDelete (string contractId, string productId)
        {
             SealerByProductIdContractsByContractIdDeleteWithHttpInfo(contractId, productId);
        }

        /// <summary>
        /// [] Delete a contract Cannot if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SealerByProductIdContractsByContractIdDeleteWithHttpInfo (string contractId, string productId)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->SealerByProductIdContractsByContractIdDelete");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsByContractIdDelete");

            var localVarPath = "./sealer/{productId}/contracts/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsByContractIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Delete a contract Cannot if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SealerByProductIdContractsByContractIdDeleteAsync (string contractId, string productId)
        {
             await SealerByProductIdContractsByContractIdDeleteAsyncWithHttpInfo(contractId, productId);

        }

        /// <summary>
        /// [] Delete a contract Cannot if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SealerByProductIdContractsByContractIdDeleteAsyncWithHttpInfo (string contractId, string productId)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->SealerByProductIdContractsByContractIdDelete");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsByContractIdDelete");

            var localVarPath = "./sealer/{productId}/contracts/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsByContractIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Compare a local contract file  Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        public SealerBreadcrumbingCompareResponse SealerByProductIdContractsCompareContractPost (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = SealerByProductIdContractsCompareContractPostWithHttpInfo(file, contractId, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Compare a local contract file  Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        public ApiResponse< SealerBreadcrumbingCompareResponse > SealerByProductIdContractsCompareContractPostWithHttpInfo (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdContractsCompareContractPost");
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->SealerByProductIdContractsCompareContractPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsCompareContractPost");

            var localVarPath = "./sealer/{productId}/contracts/compare/contract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (contractId != null) localVarFormParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // form parameter
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsCompareContractPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Compare a local contract file  Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> SealerByProductIdContractsCompareContractPostAsync (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = await SealerByProductIdContractsCompareContractPostAsyncWithHttpInfo(file, contractId, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Compare a local contract file  Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> SealerByProductIdContractsCompareContractPostAsyncWithHttpInfo (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdContractsCompareContractPost");
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->SealerByProductIdContractsCompareContractPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsCompareContractPost");

            var localVarPath = "./sealer/{productId}/contracts/compare/contract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (contractId != null) localVarFormParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // form parameter
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsCompareContractPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Compare a local signature file to all the signatures of the contract to see if one matches Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ContractSignatureDiffResponse</returns>
        public ContractSignatureDiffResponse SealerByProductIdContractsCompareSignaturePost (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<ContractSignatureDiffResponse> localVarResponse = SealerByProductIdContractsCompareSignaturePostWithHttpInfo(file, contractId, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Compare a local signature file to all the signatures of the contract to see if one matches Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of ContractSignatureDiffResponse</returns>
        public ApiResponse< ContractSignatureDiffResponse > SealerByProductIdContractsCompareSignaturePostWithHttpInfo (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdContractsCompareSignaturePost");
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->SealerByProductIdContractsCompareSignaturePost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsCompareSignaturePost");

            var localVarPath = "./sealer/{productId}/contracts/compare/signature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (contractId != null) localVarFormParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // form parameter
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsCompareSignaturePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractSignatureDiffResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ContractSignatureDiffResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractSignatureDiffResponse)));
        }

        /// <summary>
        /// [] Compare a local signature file to all the signatures of the contract to see if one matches Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ContractSignatureDiffResponse</returns>
        public async System.Threading.Tasks.Task<ContractSignatureDiffResponse> SealerByProductIdContractsCompareSignaturePostAsync (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<ContractSignatureDiffResponse> localVarResponse = await SealerByProductIdContractsCompareSignaturePostAsyncWithHttpInfo(file, contractId, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Compare a local signature file to all the signatures of the contract to see if one matches Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (ContractSignatureDiffResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContractSignatureDiffResponse>> SealerByProductIdContractsCompareSignaturePostAsyncWithHttpInfo (System.IO.Stream file, string contractId, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdContractsCompareSignaturePost");
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->SealerByProductIdContractsCompareSignaturePost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsCompareSignaturePost");

            var localVarPath = "./sealer/{productId}/contracts/compare/signature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (contractId != null) localVarFormParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // form parameter
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsCompareSignaturePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractSignatureDiffResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ContractSignatureDiffResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractSignatureDiffResponse)));
        }

        /// <summary>
        /// [] Get all the contracts grouped by signer A status defines if the contract is signed, partially signed, currently being signed or unsigned
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> SealerByProductIdContractsGet (string productId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = SealerByProductIdContractsGetWithHttpInfo(productId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all the contracts grouped by signer A status defines if the contract is signed, partially signed, currently being signed or unsigned
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > SealerByProductIdContractsGetWithHttpInfo (string productId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsGet");

            var localVarPath = "./sealer/{productId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        /// [] Get all the contracts grouped by signer A status defines if the contract is signed, partially signed, currently being signed or unsigned
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> SealerByProductIdContractsGetAsync (string productId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = await SealerByProductIdContractsGetAsyncWithHttpInfo(productId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all the contracts grouped by signer A status defines if the contract is signed, partially signed, currently being signed or unsigned
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> SealerByProductIdContractsGetAsyncWithHttpInfo (string productId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsGet");

            var localVarPath = "./sealer/{productId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        /// [] Create a contract for specified emails The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Contract</returns>
        public Contract SealerByProductIdContractsPost (System.IO.Stream file, string displayName, List<string> signerEmails, string signatures, string productId, string templateId = null, string request = null)
        {
             ApiResponse<Contract> localVarResponse = SealerByProductIdContractsPostWithHttpInfo(file, displayName, signerEmails, signatures, productId, templateId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Create a contract for specified emails The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse< Contract > SealerByProductIdContractsPostWithHttpInfo (System.IO.Stream file, string displayName, List<string> signerEmails, string signatures, string productId, string templateId = null, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdContractsPost");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling SealerApi->SealerByProductIdContractsPost");
            // verify the required parameter 'signerEmails' is set
            if (signerEmails == null)
                throw new ApiException(400, "Missing required parameter 'signerEmails' when calling SealerApi->SealerByProductIdContractsPost");
            // verify the required parameter 'signatures' is set
            if (signatures == null)
                throw new ApiException(400, "Missing required parameter 'signatures' when calling SealerApi->SealerByProductIdContractsPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsPost");

            var localVarPath = "./sealer/{productId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter
            if (signerEmails != null) localVarFormParams.Add("signerEmails", Configuration.ApiClient.ParameterToString(signerEmails)); // form parameter
            if (signatures != null) localVarFormParams.Add("signatures", Configuration.ApiClient.ParameterToString(signatures)); // form parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Contract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// [] Create a contract for specified emails The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> SealerByProductIdContractsPostAsync (System.IO.Stream file, string displayName, List<string> signerEmails, string signatures, string productId, string templateId = null, string request = null)
        {
             ApiResponse<Contract> localVarResponse = await SealerByProductIdContractsPostAsyncWithHttpInfo(file, displayName, signerEmails, signatures, productId, templateId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Create a contract for specified emails The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> SealerByProductIdContractsPostAsyncWithHttpInfo (System.IO.Stream file, string displayName, List<string> signerEmails, string signatures, string productId, string templateId = null, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdContractsPost");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling SealerApi->SealerByProductIdContractsPost");
            // verify the required parameter 'signerEmails' is set
            if (signerEmails == null)
                throw new ApiException(400, "Missing required parameter 'signerEmails' when calling SealerApi->SealerByProductIdContractsPost");
            // verify the required parameter 'signatures' is set
            if (signatures == null)
                throw new ApiException(400, "Missing required parameter 'signatures' when calling SealerApi->SealerByProductIdContractsPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsPost");

            var localVarPath = "./sealer/{productId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter
            if (signerEmails != null) localVarFormParams.Add("signerEmails", Configuration.ApiClient.ParameterToString(signerEmails)); // form parameter
            if (signatures != null) localVarFormParams.Add("signatures", Configuration.ApiClient.ParameterToString(signatures)); // form parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Contract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// [] Get all of the authenticated user’s contracts 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> SealerByProductIdContractsSelfGet (string productId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = SealerByProductIdContractsSelfGetWithHttpInfo(productId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all of the authenticated user’s contracts 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > SealerByProductIdContractsSelfGetWithHttpInfo (string productId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsSelfGet");

            var localVarPath = "./sealer/{productId}/contracts/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsSelfGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        /// [] Get all of the authenticated user’s contracts 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> SealerByProductIdContractsSelfGetAsync (string productId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = await SealerByProductIdContractsSelfGetAsyncWithHttpInfo(productId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all of the authenticated user’s contracts 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> SealerByProductIdContractsSelfGetAsyncWithHttpInfo (string productId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsSelfGet");

            var localVarPath = "./sealer/{productId}/contracts/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsSelfGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        /// [] Sign a contract Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="reuseLastSignature"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void SealerByProductIdContractsSignByContractIdPost (string contractId, System.IO.Stream signature, System.IO.Stream contract, string productId, bool? reuseLastSignature = null, string request = null)
        {
             SealerByProductIdContractsSignByContractIdPostWithHttpInfo(contractId, signature, contract, productId, reuseLastSignature, request);
        }

        /// <summary>
        /// [] Sign a contract Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="reuseLastSignature"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SealerByProductIdContractsSignByContractIdPostWithHttpInfo (string contractId, System.IO.Stream signature, System.IO.Stream contract, string productId, bool? reuseLastSignature = null, string request = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->SealerByProductIdContractsSignByContractIdPost");
            // verify the required parameter 'signature' is set
            if (signature == null)
                throw new ApiException(400, "Missing required parameter 'signature' when calling SealerApi->SealerByProductIdContractsSignByContractIdPost");
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling SealerApi->SealerByProductIdContractsSignByContractIdPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsSignByContractIdPost");

            var localVarPath = "./sealer/{productId}/contracts/sign/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (signature != null) localVarFileParams.Add("signature", Configuration.ApiClient.ParameterToFile("signature", signature));
            if (contract != null) localVarFileParams.Add("contract", Configuration.ApiClient.ParameterToFile("contract", contract));
            if (reuseLastSignature != null) localVarFormParams.Add("reuseLastSignature", Configuration.ApiClient.ParameterToString(reuseLastSignature)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsSignByContractIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Sign a contract Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="reuseLastSignature"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SealerByProductIdContractsSignByContractIdPostAsync (string contractId, System.IO.Stream signature, System.IO.Stream contract, string productId, bool? reuseLastSignature = null, string request = null)
        {
             await SealerByProductIdContractsSignByContractIdPostAsyncWithHttpInfo(contractId, signature, contract, productId, reuseLastSignature, request);

        }

        /// <summary>
        /// [] Sign a contract Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="reuseLastSignature"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SealerByProductIdContractsSignByContractIdPostAsyncWithHttpInfo (string contractId, System.IO.Stream signature, System.IO.Stream contract, string productId, bool? reuseLastSignature = null, string request = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->SealerByProductIdContractsSignByContractIdPost");
            // verify the required parameter 'signature' is set
            if (signature == null)
                throw new ApiException(400, "Missing required parameter 'signature' when calling SealerApi->SealerByProductIdContractsSignByContractIdPost");
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling SealerApi->SealerByProductIdContractsSignByContractIdPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsSignByContractIdPost");

            var localVarPath = "./sealer/{productId}/contracts/sign/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (signature != null) localVarFileParams.Add("signature", Configuration.ApiClient.ParameterToFile("signature", signature));
            if (contract != null) localVarFileParams.Add("contract", Configuration.ApiClient.ParameterToFile("contract", contract));
            if (reuseLastSignature != null) localVarFormParams.Add("reuseLastSignature", Configuration.ApiClient.ParameterToString(reuseLastSignature)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsSignByContractIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Sign a contract Requires no role, as someone outside of the Mantle software could sign this contract.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void SealerByProductIdContractsSignPost (System.IO.Stream signature, System.IO.Stream contract, string productId, string request = null)
        {
             SealerByProductIdContractsSignPostWithHttpInfo(signature, contract, productId, request);
        }

        /// <summary>
        /// [] Sign a contract Requires no role, as someone outside of the Mantle software could sign this contract.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SealerByProductIdContractsSignPostWithHttpInfo (System.IO.Stream signature, System.IO.Stream contract, string productId, string request = null)
        {
            // verify the required parameter 'signature' is set
            if (signature == null)
                throw new ApiException(400, "Missing required parameter 'signature' when calling SealerApi->SealerByProductIdContractsSignPost");
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling SealerApi->SealerByProductIdContractsSignPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsSignPost");

            var localVarPath = "./sealer/{productId}/contracts/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (signature != null) localVarFileParams.Add("signature", Configuration.ApiClient.ParameterToFile("signature", signature));
            if (contract != null) localVarFileParams.Add("contract", Configuration.ApiClient.ParameterToFile("contract", contract));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsSignPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Sign a contract Requires no role, as someone outside of the Mantle software could sign this contract.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SealerByProductIdContractsSignPostAsync (System.IO.Stream signature, System.IO.Stream contract, string productId, string request = null)
        {
             await SealerByProductIdContractsSignPostAsyncWithHttpInfo(signature, contract, productId, request);

        }

        /// <summary>
        /// [] Sign a contract Requires no role, as someone outside of the Mantle software could sign this contract.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SealerByProductIdContractsSignPostAsyncWithHttpInfo (System.IO.Stream signature, System.IO.Stream contract, string productId, string request = null)
        {
            // verify the required parameter 'signature' is set
            if (signature == null)
                throw new ApiException(400, "Missing required parameter 'signature' when calling SealerApi->SealerByProductIdContractsSignPost");
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling SealerApi->SealerByProductIdContractsSignPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdContractsSignPost");

            var localVarPath = "./sealer/{productId}/contracts/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (signature != null) localVarFileParams.Add("signature", Configuration.ApiClient.ParameterToFile("signature", signature));
            if (contract != null) localVarFileParams.Add("contract", Configuration.ApiClient.ParameterToFile("contract", contract));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdContractsSignPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Delete a signature Cannot if used in one or more contracts.                Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        public void SealerByProductIdSignaturesBySignatureIdDelete (string signatureId, string productId)
        {
             SealerByProductIdSignaturesBySignatureIdDeleteWithHttpInfo(signatureId, productId);
        }

        /// <summary>
        /// [] Delete a signature Cannot if used in one or more contracts.                Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SealerByProductIdSignaturesBySignatureIdDeleteWithHttpInfo (string signatureId, string productId)
        {
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
                throw new ApiException(400, "Missing required parameter 'signatureId' when calling SealerApi->SealerByProductIdSignaturesBySignatureIdDelete");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdSignaturesBySignatureIdDelete");

            var localVarPath = "./sealer/{productId}/signatures/{signatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signatureId != null) localVarPathParams.Add("signatureId", Configuration.ApiClient.ParameterToString(signatureId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdSignaturesBySignatureIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Delete a signature Cannot if used in one or more contracts.                Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SealerByProductIdSignaturesBySignatureIdDeleteAsync (string signatureId, string productId)
        {
             await SealerByProductIdSignaturesBySignatureIdDeleteAsyncWithHttpInfo(signatureId, productId);

        }

        /// <summary>
        /// [] Delete a signature Cannot if used in one or more contracts.                Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SealerByProductIdSignaturesBySignatureIdDeleteAsyncWithHttpInfo (string signatureId, string productId)
        {
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
                throw new ApiException(400, "Missing required parameter 'signatureId' when calling SealerApi->SealerByProductIdSignaturesBySignatureIdDelete");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdSignaturesBySignatureIdDelete");

            var localVarPath = "./sealer/{productId}/signatures/{signatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signatureId != null) localVarPathParams.Add("signatureId", Configuration.ApiClient.ParameterToString(signatureId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdSignaturesBySignatureIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Compare a local signature file to a signature Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        public SealerBreadcrumbingCompareResponse SealerByProductIdSignaturesComparePost (string signatureId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = SealerByProductIdSignaturesComparePostWithHttpInfo(signatureId, file, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Compare a local signature file to a signature Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        public ApiResponse< SealerBreadcrumbingCompareResponse > SealerByProductIdSignaturesComparePostWithHttpInfo (string signatureId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
                throw new ApiException(400, "Missing required parameter 'signatureId' when calling SealerApi->SealerByProductIdSignaturesComparePost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdSignaturesComparePost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdSignaturesComparePost");

            var localVarPath = "./sealer/{productId}/signatures/compare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (signatureId != null) localVarFormParams.Add("signatureId", Configuration.ApiClient.ParameterToString(signatureId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdSignaturesComparePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Compare a local signature file to a signature Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> SealerByProductIdSignaturesComparePostAsync (string signatureId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = await SealerByProductIdSignaturesComparePostAsyncWithHttpInfo(signatureId, file, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Compare a local signature file to a signature Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> SealerByProductIdSignaturesComparePostAsyncWithHttpInfo (string signatureId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
                throw new ApiException(400, "Missing required parameter 'signatureId' when calling SealerApi->SealerByProductIdSignaturesComparePost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdSignaturesComparePost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdSignaturesComparePost");

            var localVarPath = "./sealer/{productId}/signatures/compare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (signatureId != null) localVarFormParams.Add("signatureId", Configuration.ApiClient.ParameterToString(signatureId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdSignaturesComparePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Get all of the authenticated user’s signatures 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> SealerByProductIdSignaturesGet (string productId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = SealerByProductIdSignaturesGetWithHttpInfo(productId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all of the authenticated user’s signatures 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > SealerByProductIdSignaturesGetWithHttpInfo (string productId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdSignaturesGet");

            var localVarPath = "./sealer/{productId}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdSignaturesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        /// [] Get all of the authenticated user’s signatures 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> SealerByProductIdSignaturesGetAsync (string productId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = await SealerByProductIdSignaturesGetAsyncWithHttpInfo(productId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all of the authenticated user’s signatures 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> SealerByProductIdSignaturesGetAsyncWithHttpInfo (string productId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdSignaturesGet");

            var localVarPath = "./sealer/{productId}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdSignaturesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        /// [] Create a signature for the authenticated user Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Signature</returns>
        public Signature SealerByProductIdSignaturesPost (System.IO.Stream file, string productId, string request = null)
        {
             ApiResponse<Signature> localVarResponse = SealerByProductIdSignaturesPostWithHttpInfo(file, productId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Create a signature for the authenticated user Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Signature</returns>
        public ApiResponse< Signature > SealerByProductIdSignaturesPostWithHttpInfo (System.IO.Stream file, string productId, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdSignaturesPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdSignaturesPost");

            var localVarPath = "./sealer/{productId}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdSignaturesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Signature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Signature) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Signature)));
        }

        /// <summary>
        /// [] Create a signature for the authenticated user Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Signature</returns>
        public async System.Threading.Tasks.Task<Signature> SealerByProductIdSignaturesPostAsync (System.IO.Stream file, string productId, string request = null)
        {
             ApiResponse<Signature> localVarResponse = await SealerByProductIdSignaturesPostAsyncWithHttpInfo(file, productId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Create a signature for the authenticated user Requires the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Signature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Signature>> SealerByProductIdSignaturesPostAsyncWithHttpInfo (System.IO.Stream file, string productId, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdSignaturesPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdSignaturesPost");

            var localVarPath = "./sealer/{productId}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdSignaturesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Signature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Signature) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Signature)));
        }

        /// <summary>
        /// [] Get contracts attached to a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> SealerByProductIdTemplatesByTemplateIdContractsGet (string templateId, string productId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = SealerByProductIdTemplatesByTemplateIdContractsGetWithHttpInfo(templateId, productId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get contracts attached to a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > SealerByProductIdTemplatesByTemplateIdContractsGetWithHttpInfo (string templateId, string productId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdContractsGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdContractsGet");

            var localVarPath = "./sealer/{productId}/templates/{templateId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesByTemplateIdContractsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        /// [] Get contracts attached to a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> SealerByProductIdTemplatesByTemplateIdContractsGetAsync (string templateId, string productId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = await SealerByProductIdTemplatesByTemplateIdContractsGetAsyncWithHttpInfo(templateId, productId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get contracts attached to a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> SealerByProductIdTemplatesByTemplateIdContractsGetAsyncWithHttpInfo (string templateId, string productId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdContractsGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdContractsGet");

            var localVarPath = "./sealer/{productId}/templates/{templateId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesByTemplateIdContractsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        /// [] Delete a template Cannot if it has linked contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        public void SealerByProductIdTemplatesByTemplateIdDelete (string templateId, string productId)
        {
             SealerByProductIdTemplatesByTemplateIdDeleteWithHttpInfo(templateId, productId);
        }

        /// <summary>
        /// [] Delete a template Cannot if it has linked contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SealerByProductIdTemplatesByTemplateIdDeleteWithHttpInfo (string templateId, string productId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdDelete");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdDelete");

            var localVarPath = "./sealer/{productId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesByTemplateIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Delete a template Cannot if it has linked contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SealerByProductIdTemplatesByTemplateIdDeleteAsync (string templateId, string productId)
        {
             await SealerByProductIdTemplatesByTemplateIdDeleteAsyncWithHttpInfo(templateId, productId);

        }

        /// <summary>
        /// [] Delete a template Cannot if it has linked contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SealerByProductIdTemplatesByTemplateIdDeleteAsyncWithHttpInfo (string templateId, string productId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdDelete");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdDelete");

            var localVarPath = "./sealer/{productId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesByTemplateIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Get a specific template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>Template</returns>
        public Template SealerByProductIdTemplatesByTemplateIdGet (string templateId, string productId)
        {
             ApiResponse<Template> localVarResponse = SealerByProductIdTemplatesByTemplateIdGetWithHttpInfo(templateId, productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get a specific template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > SealerByProductIdTemplatesByTemplateIdGetWithHttpInfo (string templateId, string productId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdGet");

            var localVarPath = "./sealer/{productId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesByTemplateIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        /// [] Get a specific template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> SealerByProductIdTemplatesByTemplateIdGetAsync (string templateId, string productId)
        {
             ApiResponse<Template> localVarResponse = await SealerByProductIdTemplatesByTemplateIdGetAsyncWithHttpInfo(templateId, productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get a specific template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> SealerByProductIdTemplatesByTemplateIdGetAsyncWithHttpInfo (string templateId, string productId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesByTemplateIdGet");

            var localVarPath = "./sealer/{productId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesByTemplateIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        /// [] Compare a local template file to the template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        public SealerBreadcrumbingCompareResponse SealerByProductIdTemplatesComparePost (string templateId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = SealerByProductIdTemplatesComparePostWithHttpInfo(templateId, file, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Compare a local template file to the template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        public ApiResponse< SealerBreadcrumbingCompareResponse > SealerByProductIdTemplatesComparePostWithHttpInfo (string templateId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->SealerByProductIdTemplatesComparePost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdTemplatesComparePost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesComparePost");

            var localVarPath = "./sealer/{productId}/templates/compare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesComparePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Compare a local template file to the template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> SealerByProductIdTemplatesComparePostAsync (string templateId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = await SealerByProductIdTemplatesComparePostAsyncWithHttpInfo(templateId, file, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Compare a local template file to the template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> SealerByProductIdTemplatesComparePostAsyncWithHttpInfo (string templateId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->SealerByProductIdTemplatesComparePost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdTemplatesComparePost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesComparePost");

            var localVarPath = "./sealer/{productId}/templates/compare";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesComparePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Get all templates Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> SealerByProductIdTemplatesGet (string productId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Template>> localVarResponse = SealerByProductIdTemplatesGetWithHttpInfo(productId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all templates Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse< List<Template> > SealerByProductIdTemplatesGetWithHttpInfo (string productId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesGet");

            var localVarPath = "./sealer/{productId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
        }

        /// <summary>
        /// [] Get all templates Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> SealerByProductIdTemplatesGetAsync (string productId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Template>> localVarResponse = await SealerByProductIdTemplatesGetAsyncWithHttpInfo(productId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all templates Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Template>>> SealerByProductIdTemplatesGetAsyncWithHttpInfo (string productId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesGet");

            var localVarPath = "./sealer/{productId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
        }

        /// <summary>
        /// [] Create a template Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Template</returns>
        public Template SealerByProductIdTemplatesPost (System.IO.Stream file, string displayName, string productId, string request = null)
        {
             ApiResponse<Template> localVarResponse = SealerByProductIdTemplatesPostWithHttpInfo(file, displayName, productId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Create a template Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > SealerByProductIdTemplatesPostWithHttpInfo (System.IO.Stream file, string displayName, string productId, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdTemplatesPost");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling SealerApi->SealerByProductIdTemplatesPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesPost");

            var localVarPath = "./sealer/{productId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        /// [] Create a template Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> SealerByProductIdTemplatesPostAsync (System.IO.Stream file, string displayName, string productId, string request = null)
        {
             ApiResponse<Template> localVarResponse = await SealerByProductIdTemplatesPostAsyncWithHttpInfo(file, displayName, productId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Create a template Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> SealerByProductIdTemplatesPostAsyncWithHttpInfo (System.IO.Stream file, string displayName, string productId, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->SealerByProductIdTemplatesPost");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling SealerApi->SealerByProductIdTemplatesPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SealerByProductIdTemplatesPost");

            var localVarPath = "./sealer/{productId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SealerByProductIdTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

    }
}
