/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISealerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [CONTRACTS] Compare a local contract file
        /// </summary>
        /// <remarks>
        /// Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        SealerBreadcrumbingCompareResponse CompareContract (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [CONTRACTS] Compare a local contract file
        /// </summary>
        /// <remarks>
        /// Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        ApiResponse<SealerBreadcrumbingCompareResponse> CompareContractWithHttpInfo (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [CONTRACTS] Compare a local signature
        /// </summary>
        /// <remarks>
        /// Compare a local signature file to all the signatures of the contract to see if one matches                Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ContractSignatureDiffResponse</returns>
        ContractSignatureDiffResponse CompareContractSignature (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [CONTRACTS] Compare a local signature
        /// </summary>
        /// <remarks>
        /// Compare a local signature file to all the signatures of the contract to see if one matches                Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of ContractSignatureDiffResponse</returns>
        ApiResponse<ContractSignatureDiffResponse> CompareContractSignatureWithHttpInfo (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [SIGNATURES] Compare a local signature file to a signature
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        SealerBreadcrumbingCompareResponse CompareSignature (string signatureId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [SIGNATURES] Compare a local signature file to a signature
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        ApiResponse<SealerBreadcrumbingCompareResponse> CompareSignatureWithHttpInfo (string signatureId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [TEMPLATES] Compare a local template file to the template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        SealerBreadcrumbingCompareResponse CompareTemplate (string templateId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [TEMPLATES] Compare a local template file to the template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        ApiResponse<SealerBreadcrumbingCompareResponse> CompareTemplateWithHttpInfo (string templateId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [CONTRACTS] Create a contract for specified emails
        /// </summary>
        /// <remarks>
        /// The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="signatureRequestMessage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>Contract</returns>
        Contract CreateContract (System.IO.Stream file, string displayName, List<string> signerEmails, List<string> signatures, string productId, string xApiKey, string signatureRequestMessage = null, string templateId = null);

        /// <summary>
        /// [CONTRACTS] Create a contract for specified emails
        /// </summary>
        /// <remarks>
        /// The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="signatureRequestMessage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> CreateContractWithHttpInfo (System.IO.Stream file, string displayName, List<string> signerEmails, List<string> signatures, string productId, string xApiKey, string signatureRequestMessage = null, string templateId = null);
        /// <summary>
        /// [SIGNATURES] Create a signature for the authenticated user
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Signature</returns>
        Signature CreateSignature (System.IO.Stream file, string productId, string xApiKey);

        /// <summary>
        /// [SIGNATURES] Create a signature for the authenticated user
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Signature</returns>
        ApiResponse<Signature> CreateSignatureWithHttpInfo (System.IO.Stream file, string productId, string xApiKey);
        /// <summary>
        /// [TEMPLATES] Create a template
        /// </summary>
        /// <remarks>
        /// Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Template</returns>
        Template CreateTemplate (System.IO.Stream file, string displayName, string productId, string xApiKey);

        /// <summary>
        /// [TEMPLATES] Create a template
        /// </summary>
        /// <remarks>
        /// Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> CreateTemplateWithHttpInfo (System.IO.Stream file, string displayName, string productId, string xApiKey);
        /// <summary>
        /// [CONTRACTS] Delete a contract
        /// </summary>
        /// <remarks>
        /// Cannot be deleted if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void DeleteContract (string contractId, string productId, string xApiKey);

        /// <summary>
        /// [CONTRACTS] Delete a contract
        /// </summary>
        /// <remarks>
        /// Cannot be deleted if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContractWithHttpInfo (string contractId, string productId, string xApiKey);
        /// <summary>
        /// [TEMPLATES] Delete a template
        /// </summary>
        /// <remarks>
        /// Cannot be deleted if it has linked contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void DeleteTemplate (string templateId, string productId, string xApiKey);

        /// <summary>
        /// [TEMPLATES] Delete a template
        /// </summary>
        /// <remarks>
        /// Cannot be deleted if it has linked contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateWithHttpInfo (string templateId, string productId, string xApiKey);
        /// <summary>
        /// [CONTRACTS] Get all the contracts grouped by signer
        /// </summary>
        /// <remarks>
        /// A status defines if the contract is signed, partially signed, currently being signed or unsigned                Require the Sealer Admin Role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> GetAllContracts (string productId, string xApiKey, int? limit = null, int? offset = null);

        /// <summary>
        /// [CONTRACTS] Get all the contracts grouped by signer
        /// </summary>
        /// <remarks>
        /// A status defines if the contract is signed, partially signed, currently being signed or unsigned                Require the Sealer Admin Role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> GetAllContractsWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null);
        /// <summary>
        /// [SIGNATURES] Get all signatures of the authenticated user’s
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> GetAllSignatures (string productId, string xApiKey, int? limit = null, int? offset = null);

        /// <summary>
        /// [SIGNATURES] Get all signatures of the authenticated user’s
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> GetAllSignaturesWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null);
        /// <summary>
        /// [TEMPLATES] Get all templates
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> GetAllTemplates (string productId, string xApiKey, int? limit = null, int? offset = null);

        /// <summary>
        /// [TEMPLATES] Get all templates
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> GetAllTemplatesWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null);
        /// <summary>
        /// [CONTRACTS] Get all of the authenticated user’s contracts
        /// </summary>
        /// <remarks>
        /// Require the Sealer Admin Role or Sealer User Role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> GetAuthenticatedUserContracts (string productId, string xApiKey, int? limit = null, int? offset = null);

        /// <summary>
        /// [CONTRACTS] Get all of the authenticated user’s contracts
        /// </summary>
        /// <remarks>
        /// Require the Sealer Admin Role or Sealer User Role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> GetAuthenticatedUserContractsWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null);
        /// <summary>
        /// [TEMPLATES] Get contracts attached to a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        List<Contract> GetContractsByTemplateId (string templateId, string productId, string xApiKey, int? limit = null, int? offset = null);

        /// <summary>
        /// [TEMPLATES] Get contracts attached to a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        ApiResponse<List<Contract>> GetContractsByTemplateIdWithHttpInfo (string templateId, string productId, string xApiKey, int? limit = null, int? offset = null);
        /// <summary>
        /// [CONTRACTS] Give a link to download the file uploaded to the gcloud bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>string</returns>
        string GetLinkToDownloadOriginalFile (string fileId, string productId, string xApiKey);

        /// <summary>
        /// [CONTRACTS] Give a link to download the file uploaded to the gcloud bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetLinkToDownloadOriginalFileWithHttpInfo (string fileId, string productId, string xApiKey);
        /// <summary>
        /// [TEMPLATES] Get a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Template</returns>
        Template GetTemplateById (string templateId, string productId, string xApiKey);

        /// <summary>
        /// [TEMPLATES] Get a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> GetTemplateByIdWithHttpInfo (string templateId, string productId, string xApiKey);
        /// <summary>
        /// [CONTRACTS] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="reuseLastSignature"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void SignContractWhenAuthenticated (string contractId, System.IO.Stream signature, System.IO.Stream contract, bool? reuseLastSignature, string productId, string xApiKey);

        /// <summary>
        /// [CONTRACTS] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="reuseLastSignature"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SignContractWhenAuthenticatedWithHttpInfo (string contractId, System.IO.Stream signature, System.IO.Stream contract, bool? reuseLastSignature, string productId, string xApiKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [CONTRACTS] Compare a local contract file
        /// </summary>
        /// <remarks>
        /// Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> CompareContractAsync (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [CONTRACTS] Compare a local contract file
        /// </summary>
        /// <remarks>
        /// Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> CompareContractAsyncWithHttpInfo (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [CONTRACTS] Compare a local signature
        /// </summary>
        /// <remarks>
        /// Compare a local signature file to all the signatures of the contract to see if one matches                Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ContractSignatureDiffResponse</returns>
        System.Threading.Tasks.Task<ContractSignatureDiffResponse> CompareContractSignatureAsync (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [CONTRACTS] Compare a local signature
        /// </summary>
        /// <remarks>
        /// Compare a local signature file to all the signatures of the contract to see if one matches                Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (ContractSignatureDiffResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractSignatureDiffResponse>> CompareContractSignatureAsyncWithHttpInfo (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [SIGNATURES] Compare a local signature file to a signature
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> CompareSignatureAsync (string signatureId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [SIGNATURES] Compare a local signature file to a signature
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> CompareSignatureAsyncWithHttpInfo (string signatureId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [TEMPLATES] Compare a local template file to the template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> CompareTemplateAsync (string templateId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [TEMPLATES] Compare a local template file to the template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> CompareTemplateAsyncWithHttpInfo (string templateId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [CONTRACTS] Create a contract for specified emails
        /// </summary>
        /// <remarks>
        /// The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="signatureRequestMessage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> CreateContractAsync (System.IO.Stream file, string displayName, List<string> signerEmails, List<string> signatures, string productId, string xApiKey, string signatureRequestMessage = null, string templateId = null);

        /// <summary>
        /// [CONTRACTS] Create a contract for specified emails
        /// </summary>
        /// <remarks>
        /// The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="signatureRequestMessage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> CreateContractAsyncWithHttpInfo (System.IO.Stream file, string displayName, List<string> signerEmails, List<string> signatures, string productId, string xApiKey, string signatureRequestMessage = null, string templateId = null);
        /// <summary>
        /// [SIGNATURES] Create a signature for the authenticated user
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of Signature</returns>
        System.Threading.Tasks.Task<Signature> CreateSignatureAsync (System.IO.Stream file, string productId, string xApiKey);

        /// <summary>
        /// [SIGNATURES] Create a signature for the authenticated user
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role or the Sealer User Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (Signature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Signature>> CreateSignatureAsyncWithHttpInfo (System.IO.Stream file, string productId, string xApiKey);
        /// <summary>
        /// [TEMPLATES] Create a template
        /// </summary>
        /// <remarks>
        /// Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> CreateTemplateAsync (System.IO.Stream file, string displayName, string productId, string xApiKey);

        /// <summary>
        /// [TEMPLATES] Create a template
        /// </summary>
        /// <remarks>
        /// Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> CreateTemplateAsyncWithHttpInfo (System.IO.Stream file, string displayName, string productId, string xApiKey);
        /// <summary>
        /// [CONTRACTS] Delete a contract
        /// </summary>
        /// <remarks>
        /// Cannot be deleted if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContractAsync (string contractId, string productId, string xApiKey);

        /// <summary>
        /// [CONTRACTS] Delete a contract
        /// </summary>
        /// <remarks>
        /// Cannot be deleted if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContractAsyncWithHttpInfo (string contractId, string productId, string xApiKey);
        /// <summary>
        /// [TEMPLATES] Delete a template
        /// </summary>
        /// <remarks>
        /// Cannot be deleted if it has linked contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplateAsync (string templateId, string productId, string xApiKey);

        /// <summary>
        /// [TEMPLATES] Delete a template
        /// </summary>
        /// <remarks>
        /// Cannot be deleted if it has linked contracts.                Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo (string templateId, string productId, string xApiKey);
        /// <summary>
        /// [CONTRACTS] Get all the contracts grouped by signer
        /// </summary>
        /// <remarks>
        /// A status defines if the contract is signed, partially signed, currently being signed or unsigned                Require the Sealer Admin Role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> GetAllContractsAsync (string productId, string xApiKey, int? limit = null, int? offset = null);

        /// <summary>
        /// [CONTRACTS] Get all the contracts grouped by signer
        /// </summary>
        /// <remarks>
        /// A status defines if the contract is signed, partially signed, currently being signed or unsigned                Require the Sealer Admin Role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> GetAllContractsAsyncWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null);
        /// <summary>
        /// [SIGNATURES] Get all signatures of the authenticated user’s
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> GetAllSignaturesAsync (string productId, string xApiKey, int? limit = null, int? offset = null);

        /// <summary>
        /// [SIGNATURES] Get all signatures of the authenticated user’s
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> GetAllSignaturesAsyncWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null);
        /// <summary>
        /// [TEMPLATES] Get all templates
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> GetAllTemplatesAsync (string productId, string xApiKey, int? limit = null, int? offset = null);

        /// <summary>
        /// [TEMPLATES] Get all templates
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> GetAllTemplatesAsyncWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null);
        /// <summary>
        /// [CONTRACTS] Get all of the authenticated user’s contracts
        /// </summary>
        /// <remarks>
        /// Require the Sealer Admin Role or Sealer User Role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> GetAuthenticatedUserContractsAsync (string productId, string xApiKey, int? limit = null, int? offset = null);

        /// <summary>
        /// [CONTRACTS] Get all of the authenticated user’s contracts
        /// </summary>
        /// <remarks>
        /// Require the Sealer Admin Role or Sealer User Role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> GetAuthenticatedUserContractsAsyncWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null);
        /// <summary>
        /// [TEMPLATES] Get contracts attached to a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        System.Threading.Tasks.Task<List<Contract>> GetContractsByTemplateIdAsync (string templateId, string productId, string xApiKey, int? limit = null, int? offset = null);

        /// <summary>
        /// [TEMPLATES] Get contracts attached to a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> GetContractsByTemplateIdAsyncWithHttpInfo (string templateId, string productId, string xApiKey, int? limit = null, int? offset = null);
        /// <summary>
        /// [CONTRACTS] Give a link to download the file uploaded to the gcloud bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetLinkToDownloadOriginalFileAsync (string fileId, string productId, string xApiKey);

        /// <summary>
        /// [CONTRACTS] Give a link to download the file uploaded to the gcloud bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetLinkToDownloadOriginalFileAsyncWithHttpInfo (string fileId, string productId, string xApiKey);
        /// <summary>
        /// [TEMPLATES] Get a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> GetTemplateByIdAsync (string templateId, string productId, string xApiKey);

        /// <summary>
        /// [TEMPLATES] Get a template
        /// </summary>
        /// <remarks>
        /// Requires the Sealer Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> GetTemplateByIdAsyncWithHttpInfo (string templateId, string productId, string xApiKey);
        /// <summary>
        /// [CONTRACTS] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="reuseLastSignature"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SignContractWhenAuthenticatedAsync (string contractId, System.IO.Stream signature, System.IO.Stream contract, bool? reuseLastSignature, string productId, string xApiKey);

        /// <summary>
        /// [CONTRACTS] Sign a contract
        /// </summary>
        /// <remarks>
        /// Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="reuseLastSignature"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SignContractWhenAuthenticatedAsyncWithHttpInfo (string contractId, System.IO.Stream signature, System.IO.Stream contract, bool? reuseLastSignature, string productId, string xApiKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SealerApi : ISealerApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SealerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SealerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SealerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SealerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [CONTRACTS] Compare a local contract file Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        public SealerBreadcrumbingCompareResponse CompareContract (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = CompareContractWithHttpInfo(contractId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [CONTRACTS] Compare a local contract file Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        public ApiResponse< SealerBreadcrumbingCompareResponse > CompareContractWithHttpInfo (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->CompareContract");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CompareContract");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CompareContract");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CompareContract");

            var localVarPath = "/sealer/{productId}/contracts/{contractId}/compare/contract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
            
        }

        /// <summary>
        /// [CONTRACTS] Compare a local contract file Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> CompareContractAsync (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = await CompareContractAsyncWithHttpInfo(contractId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [CONTRACTS] Compare a local contract file Compare a local contract file to the unsigned contract document.                Requires the Sealer Admin Role for all contracts, but a Sealer User can compare their signed contract.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> CompareContractAsyncWithHttpInfo (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->CompareContract");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CompareContract");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CompareContract");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CompareContract");

            var localVarPath = "/sealer/{productId}/contracts/{contractId}/compare/contract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
            
        }

        /// <summary>
        /// [CONTRACTS] Compare a local signature Compare a local signature file to all the signatures of the contract to see if one matches                Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ContractSignatureDiffResponse</returns>
        public ContractSignatureDiffResponse CompareContractSignature (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<ContractSignatureDiffResponse> localVarResponse = CompareContractSignatureWithHttpInfo(contractId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [CONTRACTS] Compare a local signature Compare a local signature file to all the signatures of the contract to see if one matches                Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of ContractSignatureDiffResponse</returns>
        public ApiResponse< ContractSignatureDiffResponse > CompareContractSignatureWithHttpInfo (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->CompareContractSignature");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CompareContractSignature");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CompareContractSignature");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CompareContractSignature");

            var localVarPath = "/sealer/{productId}/contracts/{contractId}/compare/signature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareContractSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractSignatureDiffResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContractSignatureDiffResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractSignatureDiffResponse)));
            
        }

        /// <summary>
        /// [CONTRACTS] Compare a local signature Compare a local signature file to all the signatures of the contract to see if one matches                Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ContractSignatureDiffResponse</returns>
        public async System.Threading.Tasks.Task<ContractSignatureDiffResponse> CompareContractSignatureAsync (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<ContractSignatureDiffResponse> localVarResponse = await CompareContractSignatureAsyncWithHttpInfo(contractId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [CONTRACTS] Compare a local signature Compare a local signature file to all the signatures of the contract to see if one matches                Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (ContractSignatureDiffResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContractSignatureDiffResponse>> CompareContractSignatureAsyncWithHttpInfo (string contractId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->CompareContractSignature");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CompareContractSignature");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CompareContractSignature");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CompareContractSignature");

            var localVarPath = "/sealer/{productId}/contracts/{contractId}/compare/signature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareContractSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractSignatureDiffResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContractSignatureDiffResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractSignatureDiffResponse)));
            
        }

        /// <summary>
        /// [SIGNATURES] Compare a local signature file to a signature Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        public SealerBreadcrumbingCompareResponse CompareSignature (string signatureId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = CompareSignatureWithHttpInfo(signatureId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [SIGNATURES] Compare a local signature file to a signature Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        public ApiResponse< SealerBreadcrumbingCompareResponse > CompareSignatureWithHttpInfo (string signatureId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
                throw new ApiException(400, "Missing required parameter 'signatureId' when calling SealerApi->CompareSignature");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CompareSignature");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CompareSignature");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CompareSignature");

            var localVarPath = "/sealer/{productId}/signatures/compare/{signatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (signatureId != null) localVarPathParams.Add("signatureId", Configuration.ApiClient.ParameterToString(signatureId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
            
        }

        /// <summary>
        /// [SIGNATURES] Compare a local signature file to a signature Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> CompareSignatureAsync (string signatureId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = await CompareSignatureAsyncWithHttpInfo(signatureId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [SIGNATURES] Compare a local signature file to a signature Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> CompareSignatureAsyncWithHttpInfo (string signatureId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
                throw new ApiException(400, "Missing required parameter 'signatureId' when calling SealerApi->CompareSignature");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CompareSignature");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CompareSignature");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CompareSignature");

            var localVarPath = "/sealer/{productId}/signatures/compare/{signatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (signatureId != null) localVarPathParams.Add("signatureId", Configuration.ApiClient.ParameterToString(signatureId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
            
        }

        /// <summary>
        /// [TEMPLATES] Compare a local template file to the template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>SealerBreadcrumbingCompareResponse</returns>
        public SealerBreadcrumbingCompareResponse CompareTemplate (string templateId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = CompareTemplateWithHttpInfo(templateId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [TEMPLATES] Compare a local template file to the template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of SealerBreadcrumbingCompareResponse</returns>
        public ApiResponse< SealerBreadcrumbingCompareResponse > CompareTemplateWithHttpInfo (string templateId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->CompareTemplate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CompareTemplate");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CompareTemplate");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CompareTemplate");

            var localVarPath = "/sealer/{productId}/templates/compare/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
            
        }

        /// <summary>
        /// [TEMPLATES] Compare a local template file to the template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of SealerBreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<SealerBreadcrumbingCompareResponse> CompareTemplateAsync (string templateId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<SealerBreadcrumbingCompareResponse> localVarResponse = await CompareTemplateAsyncWithHttpInfo(templateId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [TEMPLATES] Compare a local template file to the template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerBreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SealerBreadcrumbingCompareResponse>> CompareTemplateAsyncWithHttpInfo (string templateId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->CompareTemplate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CompareTemplate");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CompareTemplate");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CompareTemplate");

            var localVarPath = "/sealer/{productId}/templates/compare/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerBreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SealerBreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerBreadcrumbingCompareResponse)));
            
        }

        /// <summary>
        /// [CONTRACTS] Create a contract for specified emails The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="signatureRequestMessage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>Contract</returns>
        public Contract CreateContract (System.IO.Stream file, string displayName, List<string> signerEmails, List<string> signatures, string productId, string xApiKey, string signatureRequestMessage = null, string templateId = null)
        {
             ApiResponse<Contract> localVarResponse = CreateContractWithHttpInfo(file, displayName, signerEmails, signatures, productId, xApiKey, signatureRequestMessage, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [CONTRACTS] Create a contract for specified emails The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="signatureRequestMessage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse< Contract > CreateContractWithHttpInfo (System.IO.Stream file, string displayName, List<string> signerEmails, List<string> signatures, string productId, string xApiKey, string signatureRequestMessage = null, string templateId = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CreateContract");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling SealerApi->CreateContract");
            // verify the required parameter 'signerEmails' is set
            if (signerEmails == null)
                throw new ApiException(400, "Missing required parameter 'signerEmails' when calling SealerApi->CreateContract");
            // verify the required parameter 'signatures' is set
            if (signatures == null)
                throw new ApiException(400, "Missing required parameter 'signatures' when calling SealerApi->CreateContract");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CreateContract");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CreateContract");

            var localVarPath = "/sealer/{productId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter
            if (signatureRequestMessage != null) localVarFormParams.Add("signatureRequestMessage", Configuration.ApiClient.ParameterToString(signatureRequestMessage)); // form parameter
            if (signerEmails != null) localVarFormParams.Add("signerEmails", Configuration.ApiClient.ParameterToString(signerEmails)); // form parameter
            if (signatures != null) localVarFormParams.Add("signatures", Configuration.ApiClient.ParameterToString(signatures)); // form parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
            
        }

        /// <summary>
        /// [CONTRACTS] Create a contract for specified emails The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="signatureRequestMessage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> CreateContractAsync (System.IO.Stream file, string displayName, List<string> signerEmails, List<string> signatures, string productId, string xApiKey, string signatureRequestMessage = null, string templateId = null)
        {
             ApiResponse<Contract> localVarResponse = await CreateContractAsyncWithHttpInfo(file, displayName, signerEmails, signatures, productId, xApiKey, signatureRequestMessage, templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [CONTRACTS] Create a contract for specified emails The contract can also be signed at the same time if signature files are provided at the same time.  If provided, the signature files must match the SignerEmails provided in the same order.  If signatures are not provided, an email will be sent to the users to ask for their signatures when the contract is ready.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="signerEmails"></param>
        /// <param name="signatures">The files to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="signatureRequestMessage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> CreateContractAsyncWithHttpInfo (System.IO.Stream file, string displayName, List<string> signerEmails, List<string> signatures, string productId, string xApiKey, string signatureRequestMessage = null, string templateId = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CreateContract");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling SealerApi->CreateContract");
            // verify the required parameter 'signerEmails' is set
            if (signerEmails == null)
                throw new ApiException(400, "Missing required parameter 'signerEmails' when calling SealerApi->CreateContract");
            // verify the required parameter 'signatures' is set
            if (signatures == null)
                throw new ApiException(400, "Missing required parameter 'signatures' when calling SealerApi->CreateContract");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CreateContract");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CreateContract");

            var localVarPath = "/sealer/{productId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter
            if (signatureRequestMessage != null) localVarFormParams.Add("signatureRequestMessage", Configuration.ApiClient.ParameterToString(signatureRequestMessage)); // form parameter
            if (signerEmails != null) localVarFormParams.Add("signerEmails", Configuration.ApiClient.ParameterToString(signerEmails)); // form parameter
            if (signatures != null) localVarFormParams.Add("signatures", Configuration.ApiClient.ParameterToString(signatures)); // form parameter
            if (templateId != null) localVarFormParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
            
        }

        /// <summary>
        /// [SIGNATURES] Create a signature for the authenticated user Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Signature</returns>
        public Signature CreateSignature (System.IO.Stream file, string productId, string xApiKey)
        {
             ApiResponse<Signature> localVarResponse = CreateSignatureWithHttpInfo(file, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [SIGNATURES] Create a signature for the authenticated user Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Signature</returns>
        public ApiResponse< Signature > CreateSignatureWithHttpInfo (System.IO.Stream file, string productId, string xApiKey)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CreateSignature");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CreateSignature");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CreateSignature");

            var localVarPath = "/sealer/{productId}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Signature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Signature) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Signature)));
            
        }

        /// <summary>
        /// [SIGNATURES] Create a signature for the authenticated user Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of Signature</returns>
        public async System.Threading.Tasks.Task<Signature> CreateSignatureAsync (System.IO.Stream file, string productId, string xApiKey)
        {
             ApiResponse<Signature> localVarResponse = await CreateSignatureAsyncWithHttpInfo(file, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [SIGNATURES] Create a signature for the authenticated user Requires the Sealer Admin Role or the Sealer User Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (Signature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Signature>> CreateSignatureAsyncWithHttpInfo (System.IO.Stream file, string productId, string xApiKey)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CreateSignature");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CreateSignature");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CreateSignature");

            var localVarPath = "/sealer/{productId}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Signature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Signature) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Signature)));
            
        }

        /// <summary>
        /// [TEMPLATES] Create a template Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Template</returns>
        public Template CreateTemplate (System.IO.Stream file, string displayName, string productId, string xApiKey)
        {
             ApiResponse<Template> localVarResponse = CreateTemplateWithHttpInfo(file, displayName, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [TEMPLATES] Create a template Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > CreateTemplateWithHttpInfo (System.IO.Stream file, string displayName, string productId, string xApiKey)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CreateTemplate");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling SealerApi->CreateTemplate");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CreateTemplate");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CreateTemplate");

            var localVarPath = "/sealer/{productId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// [TEMPLATES] Create a template Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> CreateTemplateAsync (System.IO.Stream file, string displayName, string productId, string xApiKey)
        {
             ApiResponse<Template> localVarResponse = await CreateTemplateAsyncWithHttpInfo(file, displayName, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [TEMPLATES] Create a template Used to regroup contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> CreateTemplateAsyncWithHttpInfo (System.IO.Stream file, string displayName, string productId, string xApiKey)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SealerApi->CreateTemplate");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling SealerApi->CreateTemplate");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->CreateTemplate");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->CreateTemplate");

            var localVarPath = "/sealer/{productId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// [CONTRACTS] Delete a contract Cannot be deleted if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void DeleteContract (string contractId, string productId, string xApiKey)
        {
             DeleteContractWithHttpInfo(contractId, productId, xApiKey);
        }

        /// <summary>
        /// [CONTRACTS] Delete a contract Cannot be deleted if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContractWithHttpInfo (string contractId, string productId, string xApiKey)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->DeleteContract");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->DeleteContract");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->DeleteContract");

            var localVarPath = "/sealer/{productId}/contracts/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContract", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [CONTRACTS] Delete a contract Cannot be deleted if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContractAsync (string contractId, string productId, string xApiKey)
        {
             await DeleteContractAsyncWithHttpInfo(contractId, productId, xApiKey);

        }

        /// <summary>
        /// [CONTRACTS] Delete a contract Cannot be deleted if the contract was signed by at least one person.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContractAsyncWithHttpInfo (string contractId, string productId, string xApiKey)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->DeleteContract");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->DeleteContract");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->DeleteContract");

            var localVarPath = "/sealer/{productId}/contracts/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContract", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [TEMPLATES] Delete a template Cannot be deleted if it has linked contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void DeleteTemplate (string templateId, string productId, string xApiKey)
        {
             DeleteTemplateWithHttpInfo(templateId, productId, xApiKey);
        }

        /// <summary>
        /// [TEMPLATES] Delete a template Cannot be deleted if it has linked contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplateWithHttpInfo (string templateId, string productId, string xApiKey)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->DeleteTemplate");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->DeleteTemplate");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->DeleteTemplate");

            var localVarPath = "/sealer/{productId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [TEMPLATES] Delete a template Cannot be deleted if it has linked contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplateAsync (string templateId, string productId, string xApiKey)
        {
             await DeleteTemplateAsyncWithHttpInfo(templateId, productId, xApiKey);

        }

        /// <summary>
        /// [TEMPLATES] Delete a template Cannot be deleted if it has linked contracts.                Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo (string templateId, string productId, string xApiKey)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->DeleteTemplate");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->DeleteTemplate");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->DeleteTemplate");

            var localVarPath = "/sealer/{productId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [CONTRACTS] Get all the contracts grouped by signer A status defines if the contract is signed, partially signed, currently being signed or unsigned                Require the Sealer Admin Role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> GetAllContracts (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = GetAllContractsWithHttpInfo(productId, xApiKey, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [CONTRACTS] Get all the contracts grouped by signer A status defines if the contract is signed, partially signed, currently being signed or unsigned                Require the Sealer Admin Role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > GetAllContractsWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetAllContracts");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetAllContracts");

            var localVarPath = "/sealer/{productId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
            
        }

        /// <summary>
        /// [CONTRACTS] Get all the contracts grouped by signer A status defines if the contract is signed, partially signed, currently being signed or unsigned                Require the Sealer Admin Role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> GetAllContractsAsync (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = await GetAllContractsAsyncWithHttpInfo(productId, xApiKey, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [CONTRACTS] Get all the contracts grouped by signer A status defines if the contract is signed, partially signed, currently being signed or unsigned                Require the Sealer Admin Role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> GetAllContractsAsyncWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetAllContracts");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetAllContracts");

            var localVarPath = "/sealer/{productId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
            
        }

        /// <summary>
        /// [SIGNATURES] Get all signatures of the authenticated user’s 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> GetAllSignatures (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = GetAllSignaturesWithHttpInfo(productId, xApiKey, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [SIGNATURES] Get all signatures of the authenticated user’s 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > GetAllSignaturesWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetAllSignatures");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetAllSignatures");

            var localVarPath = "/sealer/{productId}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSignatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
            
        }

        /// <summary>
        /// [SIGNATURES] Get all signatures of the authenticated user’s 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> GetAllSignaturesAsync (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = await GetAllSignaturesAsyncWithHttpInfo(productId, xApiKey, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [SIGNATURES] Get all signatures of the authenticated user’s 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> GetAllSignaturesAsyncWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetAllSignatures");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetAllSignatures");

            var localVarPath = "/sealer/{productId}/signatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSignatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
            
        }

        /// <summary>
        /// [TEMPLATES] Get all templates Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> GetAllTemplates (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Template>> localVarResponse = GetAllTemplatesWithHttpInfo(productId, xApiKey, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [TEMPLATES] Get all templates Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse< List<Template> > GetAllTemplatesWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetAllTemplates");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetAllTemplates");

            var localVarPath = "/sealer/{productId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        /// [TEMPLATES] Get all templates Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> GetAllTemplatesAsync (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Template>> localVarResponse = await GetAllTemplatesAsyncWithHttpInfo(productId, xApiKey, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [TEMPLATES] Get all templates Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Template>>> GetAllTemplatesAsyncWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetAllTemplates");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetAllTemplates");

            var localVarPath = "/sealer/{productId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        /// [CONTRACTS] Get all of the authenticated user’s contracts Require the Sealer Admin Role or Sealer User Role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> GetAuthenticatedUserContracts (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = GetAuthenticatedUserContractsWithHttpInfo(productId, xApiKey, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [CONTRACTS] Get all of the authenticated user’s contracts Require the Sealer Admin Role or Sealer User Role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > GetAuthenticatedUserContractsWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetAuthenticatedUserContracts");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetAuthenticatedUserContracts");

            var localVarPath = "/sealer/{productId}/contracts/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthenticatedUserContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
            
        }

        /// <summary>
        /// [CONTRACTS] Get all of the authenticated user’s contracts Require the Sealer Admin Role or Sealer User Role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> GetAuthenticatedUserContractsAsync (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = await GetAuthenticatedUserContractsAsyncWithHttpInfo(productId, xApiKey, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [CONTRACTS] Get all of the authenticated user’s contracts Require the Sealer Admin Role or Sealer User Role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> GetAuthenticatedUserContractsAsyncWithHttpInfo (string productId, string xApiKey, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetAuthenticatedUserContracts");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetAuthenticatedUserContracts");

            var localVarPath = "/sealer/{productId}/contracts/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthenticatedUserContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
            
        }

        /// <summary>
        /// [TEMPLATES] Get contracts attached to a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Contract&gt;</returns>
        public List<Contract> GetContractsByTemplateId (string templateId, string productId, string xApiKey, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = GetContractsByTemplateIdWithHttpInfo(templateId, productId, xApiKey, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [TEMPLATES] Get contracts attached to a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Contract&gt;</returns>
        public ApiResponse< List<Contract> > GetContractsByTemplateIdWithHttpInfo (string templateId, string productId, string xApiKey, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->GetContractsByTemplateId");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetContractsByTemplateId");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetContractsByTemplateId");

            var localVarPath = "/sealer/{productId}/templates/{templateId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractsByTemplateId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
            
        }

        /// <summary>
        /// [TEMPLATES] Get contracts attached to a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Contract&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contract>> GetContractsByTemplateIdAsync (string templateId, string productId, string xApiKey, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Contract>> localVarResponse = await GetContractsByTemplateIdAsyncWithHttpInfo(templateId, productId, xApiKey, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [TEMPLATES] Get contracts attached to a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> GetContractsByTemplateIdAsyncWithHttpInfo (string templateId, string productId, string xApiKey, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->GetContractsByTemplateId");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetContractsByTemplateId");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetContractsByTemplateId");

            var localVarPath = "/sealer/{productId}/templates/{templateId}/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractsByTemplateId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
            
        }

        /// <summary>
        /// [CONTRACTS] Give a link to download the file uploaded to the gcloud bucket 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>string</returns>
        public string GetLinkToDownloadOriginalFile (string fileId, string productId, string xApiKey)
        {
             ApiResponse<string> localVarResponse = GetLinkToDownloadOriginalFileWithHttpInfo(fileId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [CONTRACTS] Give a link to download the file uploaded to the gcloud bucket 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetLinkToDownloadOriginalFileWithHttpInfo (string fileId, string productId, string xApiKey)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling SealerApi->GetLinkToDownloadOriginalFile");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetLinkToDownloadOriginalFile");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetLinkToDownloadOriginalFile");

            var localVarPath = "/sealer/{productId}/contracts/download/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLinkToDownloadOriginalFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// [CONTRACTS] Give a link to download the file uploaded to the gcloud bucket 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetLinkToDownloadOriginalFileAsync (string fileId, string productId, string xApiKey)
        {
             ApiResponse<string> localVarResponse = await GetLinkToDownloadOriginalFileAsyncWithHttpInfo(fileId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [CONTRACTS] Give a link to download the file uploaded to the gcloud bucket 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetLinkToDownloadOriginalFileAsyncWithHttpInfo (string fileId, string productId, string xApiKey)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling SealerApi->GetLinkToDownloadOriginalFile");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetLinkToDownloadOriginalFile");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetLinkToDownloadOriginalFile");

            var localVarPath = "/sealer/{productId}/contracts/download/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLinkToDownloadOriginalFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// [TEMPLATES] Get a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Template</returns>
        public Template GetTemplateById (string templateId, string productId, string xApiKey)
        {
             ApiResponse<Template> localVarResponse = GetTemplateByIdWithHttpInfo(templateId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [TEMPLATES] Get a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > GetTemplateByIdWithHttpInfo (string templateId, string productId, string xApiKey)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->GetTemplateById");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetTemplateById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetTemplateById");

            var localVarPath = "/sealer/{productId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// [TEMPLATES] Get a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> GetTemplateByIdAsync (string templateId, string productId, string xApiKey)
        {
             ApiResponse<Template> localVarResponse = await GetTemplateByIdAsyncWithHttpInfo(templateId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [TEMPLATES] Get a template Requires the Sealer Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> GetTemplateByIdAsyncWithHttpInfo (string templateId, string productId, string xApiKey)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SealerApi->GetTemplateById");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->GetTemplateById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->GetTemplateById");

            var localVarPath = "/sealer/{productId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// [CONTRACTS] Sign a contract Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="reuseLastSignature"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void SignContractWhenAuthenticated (string contractId, System.IO.Stream signature, System.IO.Stream contract, bool? reuseLastSignature, string productId, string xApiKey)
        {
             SignContractWhenAuthenticatedWithHttpInfo(contractId, signature, contract, reuseLastSignature, productId, xApiKey);
        }

        /// <summary>
        /// [CONTRACTS] Sign a contract Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="reuseLastSignature"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SignContractWhenAuthenticatedWithHttpInfo (string contractId, System.IO.Stream signature, System.IO.Stream contract, bool? reuseLastSignature, string productId, string xApiKey)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->SignContractWhenAuthenticated");
            // verify the required parameter 'signature' is set
            if (signature == null)
                throw new ApiException(400, "Missing required parameter 'signature' when calling SealerApi->SignContractWhenAuthenticated");
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling SealerApi->SignContractWhenAuthenticated");
            // verify the required parameter 'reuseLastSignature' is set
            if (reuseLastSignature == null)
                throw new ApiException(400, "Missing required parameter 'reuseLastSignature' when calling SealerApi->SignContractWhenAuthenticated");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SignContractWhenAuthenticated");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->SignContractWhenAuthenticated");

            var localVarPath = "/sealer/{productId}/contracts/{contractId}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (signature != null) localVarFileParams.Add("signature", Configuration.ApiClient.ParameterToFile("signature", signature));
            if (contract != null) localVarFileParams.Add("contract", Configuration.ApiClient.ParameterToFile("contract", contract));
            if (reuseLastSignature != null) localVarFormParams.Add("reuseLastSignature", Configuration.ApiClient.ParameterToString(reuseLastSignature)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignContractWhenAuthenticated", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [CONTRACTS] Sign a contract Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="reuseLastSignature"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SignContractWhenAuthenticatedAsync (string contractId, System.IO.Stream signature, System.IO.Stream contract, bool? reuseLastSignature, string productId, string xApiKey)
        {
             await SignContractWhenAuthenticatedAsyncWithHttpInfo(contractId, signature, contract, reuseLastSignature, productId, xApiKey);

        }

        /// <summary>
        /// [CONTRACTS] Sign a contract Requires to be authenticated to the platform.  The original contract and signature must be provided and a Signature Request Id is used to link the email and the contract Id
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="signature">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="contract">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="reuseLastSignature"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SignContractWhenAuthenticatedAsyncWithHttpInfo (string contractId, System.IO.Stream signature, System.IO.Stream contract, bool? reuseLastSignature, string productId, string xApiKey)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling SealerApi->SignContractWhenAuthenticated");
            // verify the required parameter 'signature' is set
            if (signature == null)
                throw new ApiException(400, "Missing required parameter 'signature' when calling SealerApi->SignContractWhenAuthenticated");
            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new ApiException(400, "Missing required parameter 'contract' when calling SealerApi->SignContractWhenAuthenticated");
            // verify the required parameter 'reuseLastSignature' is set
            if (reuseLastSignature == null)
                throw new ApiException(400, "Missing required parameter 'reuseLastSignature' when calling SealerApi->SignContractWhenAuthenticated");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling SealerApi->SignContractWhenAuthenticated");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling SealerApi->SignContractWhenAuthenticated");

            var localVarPath = "/sealer/{productId}/contracts/{contractId}/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contractId != null) localVarPathParams.Add("contractId", Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (signature != null) localVarFileParams.Add("signature", Configuration.ApiClient.ParameterToFile("signature", signature));
            if (contract != null) localVarFileParams.Add("contract", Configuration.ApiClient.ParameterToFile("contract", contract));
            if (reuseLastSignature != null) localVarFormParams.Add("reuseLastSignature", Configuration.ApiClient.ParameterToString(reuseLastSignature)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignContractWhenAuthenticated", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
