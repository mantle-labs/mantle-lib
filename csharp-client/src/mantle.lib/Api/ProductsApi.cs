/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate a product in Mantle that was previously deactivated
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        void ProductsByClientIdActivateByProductIdPost (string clientId, string productId);

        /// <summary>
        /// Activate a product in Mantle that was previously deactivated
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsByClientIdActivateByProductIdPostWithHttpInfo (string clientId, string productId);
        /// <summary>
        /// Deactivate a product in Mantle. This will result in a
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        void ProductsByClientIdDeactivateByProductIdPost (string clientId, string productId);

        /// <summary>
        /// Deactivate a product in Mantle. This will result in a
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsByClientIdDeactivateByProductIdPostWithHttpInfo (string clientId, string productId);
        /// <summary>
        /// Get all available products for the logged in user&#39;s client including the ones that are disabled
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns>List&lt;ProductSubscription&gt;</returns>
        List<ProductSubscription> ProductsByClientIdGet (string clientId);

        /// <summary>
        /// Get all available products for the logged in user&#39;s client including the ones that are disabled
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns>ApiResponse of List&lt;ProductSubscription&gt;</returns>
        ApiResponse<List<ProductSubscription>> ProductsByClientIdGetWithHttpInfo (string clientId);
        /// <summary>
        /// Create a new product in Mantle
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ProductSubscription</returns>
        ProductSubscription ProductsByClientIdPost (string clientId, CreateProductRequest request = null);

        /// <summary>
        /// Create a new product in Mantle
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of ProductSubscription</returns>
        ApiResponse<ProductSubscription> ProductsByClientIdPostWithHttpInfo (string clientId, CreateProductRequest request = null);
        /// <summary>
        /// Update a product in Mantle
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ProductSubscription</returns>
        ProductSubscription ProductsByClientIdPut (string clientId, UpdateProductRequest request = null);

        /// <summary>
        /// Update a product in Mantle
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of ProductSubscription</returns>
        ApiResponse<ProductSubscription> ProductsByClientIdPutWithHttpInfo (string clientId, UpdateProductRequest request = null);
        /// <summary>
        /// Get the product menu for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProductMenuOption&gt;</returns>
        List<ProductMenuOption> ProductsMenuGet ();

        /// <summary>
        /// Get the product menu for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProductMenuOption&gt;</returns>
        ApiResponse<List<ProductMenuOption>> ProductsMenuGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate a product in Mantle that was previously deactivated
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsByClientIdActivateByProductIdPostAsync (string clientId, string productId);

        /// <summary>
        /// Activate a product in Mantle that was previously deactivated
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsByClientIdActivateByProductIdPostAsyncWithHttpInfo (string clientId, string productId);
        /// <summary>
        /// Deactivate a product in Mantle. This will result in a
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsByClientIdDeactivateByProductIdPostAsync (string clientId, string productId);

        /// <summary>
        /// Deactivate a product in Mantle. This will result in a
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsByClientIdDeactivateByProductIdPostAsyncWithHttpInfo (string clientId, string productId);
        /// <summary>
        /// Get all available products for the logged in user&#39;s client including the ones that are disabled
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns>Task of List&lt;ProductSubscription&gt;</returns>
        System.Threading.Tasks.Task<List<ProductSubscription>> ProductsByClientIdGetAsync (string clientId);

        /// <summary>
        /// Get all available products for the logged in user&#39;s client including the ones that are disabled
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns>Task of ApiResponse (List&lt;ProductSubscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductSubscription>>> ProductsByClientIdGetAsyncWithHttpInfo (string clientId);
        /// <summary>
        /// Create a new product in Mantle
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ProductSubscription</returns>
        System.Threading.Tasks.Task<ProductSubscription> ProductsByClientIdPostAsync (string clientId, CreateProductRequest request = null);

        /// <summary>
        /// Create a new product in Mantle
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSubscription>> ProductsByClientIdPostAsyncWithHttpInfo (string clientId, CreateProductRequest request = null);
        /// <summary>
        /// Update a product in Mantle
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ProductSubscription</returns>
        System.Threading.Tasks.Task<ProductSubscription> ProductsByClientIdPutAsync (string clientId, UpdateProductRequest request = null);

        /// <summary>
        /// Update a product in Mantle
        /// </summary>
        /// <remarks>
        /// Requires the Admin role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSubscription>> ProductsByClientIdPutAsyncWithHttpInfo (string clientId, UpdateProductRequest request = null);
        /// <summary>
        /// Get the product menu for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProductMenuOption&gt;</returns>
        System.Threading.Tasks.Task<List<ProductMenuOption>> ProductsMenuGetAsync ();

        /// <summary>
        /// Get the product menu for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProductMenuOption&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductMenuOption>>> ProductsMenuGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsApi : IProductsApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate a product in Mantle that was previously deactivated Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        public void ProductsByClientIdActivateByProductIdPost (string clientId, string productId)
        {
             ProductsByClientIdActivateByProductIdPostWithHttpInfo(clientId, productId);
        }

        /// <summary>
        /// Activate a product in Mantle that was previously deactivated Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsByClientIdActivateByProductIdPostWithHttpInfo (string clientId, string productId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->ProductsByClientIdActivateByProductIdPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ProductsByClientIdActivateByProductIdPost");

            var localVarPath = "./products/{clientId}/activate/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsByClientIdActivateByProductIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Activate a product in Mantle that was previously deactivated Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsByClientIdActivateByProductIdPostAsync (string clientId, string productId)
        {
             await ProductsByClientIdActivateByProductIdPostAsyncWithHttpInfo(clientId, productId);

        }

        /// <summary>
        /// Activate a product in Mantle that was previously deactivated Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsByClientIdActivateByProductIdPostAsyncWithHttpInfo (string clientId, string productId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->ProductsByClientIdActivateByProductIdPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ProductsByClientIdActivateByProductIdPost");

            var localVarPath = "./products/{clientId}/activate/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsByClientIdActivateByProductIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deactivate a product in Mantle. This will result in a Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        public void ProductsByClientIdDeactivateByProductIdPost (string clientId, string productId)
        {
             ProductsByClientIdDeactivateByProductIdPostWithHttpInfo(clientId, productId);
        }

        /// <summary>
        /// Deactivate a product in Mantle. This will result in a Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsByClientIdDeactivateByProductIdPostWithHttpInfo (string clientId, string productId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->ProductsByClientIdDeactivateByProductIdPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ProductsByClientIdDeactivateByProductIdPost");

            var localVarPath = "./products/{clientId}/deactivate/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsByClientIdDeactivateByProductIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deactivate a product in Mantle. This will result in a Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsByClientIdDeactivateByProductIdPostAsync (string clientId, string productId)
        {
             await ProductsByClientIdDeactivateByProductIdPostAsyncWithHttpInfo(clientId, productId);

        }

        /// <summary>
        /// Deactivate a product in Mantle. This will result in a Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsByClientIdDeactivateByProductIdPostAsyncWithHttpInfo (string clientId, string productId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->ProductsByClientIdDeactivateByProductIdPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ProductsByClientIdDeactivateByProductIdPost");

            var localVarPath = "./products/{clientId}/deactivate/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsByClientIdDeactivateByProductIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all available products for the logged in user&#39;s client including the ones that are disabled Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns>List&lt;ProductSubscription&gt;</returns>
        public List<ProductSubscription> ProductsByClientIdGet (string clientId)
        {
             ApiResponse<List<ProductSubscription>> localVarResponse = ProductsByClientIdGetWithHttpInfo(clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available products for the logged in user&#39;s client including the ones that are disabled Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns>ApiResponse of List&lt;ProductSubscription&gt;</returns>
        public ApiResponse< List<ProductSubscription> > ProductsByClientIdGetWithHttpInfo (string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->ProductsByClientIdGet");

            var localVarPath = "./products/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsByClientIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ProductSubscription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSubscription>)));
        }

        /// <summary>
        /// Get all available products for the logged in user&#39;s client including the ones that are disabled Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns>Task of List&lt;ProductSubscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductSubscription>> ProductsByClientIdGetAsync (string clientId)
        {
             ApiResponse<List<ProductSubscription>> localVarResponse = await ProductsByClientIdGetAsyncWithHttpInfo(clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available products for the logged in user&#39;s client including the ones that are disabled Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns>Task of ApiResponse (List&lt;ProductSubscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductSubscription>>> ProductsByClientIdGetAsyncWithHttpInfo (string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->ProductsByClientIdGet");

            var localVarPath = "./products/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsByClientIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSubscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ProductSubscription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSubscription>)));
        }

        /// <summary>
        /// Create a new product in Mantle Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ProductSubscription</returns>
        public ProductSubscription ProductsByClientIdPost (string clientId, CreateProductRequest request = null)
        {
             ApiResponse<ProductSubscription> localVarResponse = ProductsByClientIdPostWithHttpInfo(clientId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new product in Mantle Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of ProductSubscription</returns>
        public ApiResponse< ProductSubscription > ProductsByClientIdPostWithHttpInfo (string clientId, CreateProductRequest request = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->ProductsByClientIdPost");

            var localVarPath = "./products/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsByClientIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSubscription)));
        }

        /// <summary>
        /// Create a new product in Mantle Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ProductSubscription</returns>
        public async System.Threading.Tasks.Task<ProductSubscription> ProductsByClientIdPostAsync (string clientId, CreateProductRequest request = null)
        {
             ApiResponse<ProductSubscription> localVarResponse = await ProductsByClientIdPostAsyncWithHttpInfo(clientId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new product in Mantle Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSubscription>> ProductsByClientIdPostAsyncWithHttpInfo (string clientId, CreateProductRequest request = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->ProductsByClientIdPost");

            var localVarPath = "./products/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsByClientIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSubscription)));
        }

        /// <summary>
        /// Update a product in Mantle Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ProductSubscription</returns>
        public ProductSubscription ProductsByClientIdPut (string clientId, UpdateProductRequest request = null)
        {
             ApiResponse<ProductSubscription> localVarResponse = ProductsByClientIdPutWithHttpInfo(clientId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product in Mantle Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of ProductSubscription</returns>
        public ApiResponse< ProductSubscription > ProductsByClientIdPutWithHttpInfo (string clientId, UpdateProductRequest request = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->ProductsByClientIdPut");

            var localVarPath = "./products/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsByClientIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSubscription)));
        }

        /// <summary>
        /// Update a product in Mantle Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ProductSubscription</returns>
        public async System.Threading.Tasks.Task<ProductSubscription> ProductsByClientIdPutAsync (string clientId, UpdateProductRequest request = null)
        {
             ApiResponse<ProductSubscription> localVarResponse = await ProductsByClientIdPutAsyncWithHttpInfo(clientId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a product in Mantle Requires the Admin role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSubscription>> ProductsByClientIdPutAsyncWithHttpInfo (string clientId, UpdateProductRequest request = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProductsApi->ProductsByClientIdPut");

            var localVarPath = "./products/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsByClientIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSubscription)));
        }

        /// <summary>
        /// Get the product menu for the authenticated user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProductMenuOption&gt;</returns>
        public List<ProductMenuOption> ProductsMenuGet ()
        {
             ApiResponse<List<ProductMenuOption>> localVarResponse = ProductsMenuGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the product menu for the authenticated user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProductMenuOption&gt;</returns>
        public ApiResponse< List<ProductMenuOption> > ProductsMenuGetWithHttpInfo ()
        {

            var localVarPath = "./products/menu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsMenuGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMenuOption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ProductMenuOption>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMenuOption>)));
        }

        /// <summary>
        /// Get the product menu for the authenticated user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProductMenuOption&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductMenuOption>> ProductsMenuGetAsync ()
        {
             ApiResponse<List<ProductMenuOption>> localVarResponse = await ProductsMenuGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the product menu for the authenticated user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProductMenuOption&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductMenuOption>>> ProductsMenuGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./products/menu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsMenuGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMenuOption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ProductMenuOption>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMenuOption>)));
        }

    }
}
