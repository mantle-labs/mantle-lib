/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the products for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>List&lt;ProductMenuOption&gt;</returns>
        List<ProductMenuOption> GetAllProducts (string xApiKey);

        /// <summary>
        /// Get the products for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of List&lt;ProductMenuOption&gt;</returns>
        ApiResponse<List<ProductMenuOption>> GetAllProductsWithHttpInfo (string xApiKey);
        /// <summary>
        /// Get a product and its settings
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ProductSubscription</returns>
        ProductSubscription GetProductById (string productId, string xApiKey);

        /// <summary>
        /// Get a product and its settings
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of ProductSubscription</returns>
        ApiResponse<ProductSubscription> GetProductByIdWithHttpInfo (string productId, string xApiKey);
        /// <summary>
        /// Update a keeper instance&#39;s name
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperProductSubscription</returns>
        KeeperProductSubscription UpdateKeeperProduct (string productId, string xApiKey, UpdateKeeperProductRequest request = null);

        /// <summary>
        /// Update a keeper instance&#39;s name
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperProductSubscription</returns>
        ApiResponse<KeeperProductSubscription> UpdateKeeperProductWithHttpInfo (string productId, string xApiKey, UpdateKeeperProductRequest request = null);
        /// <summary>
        /// Update a sealer instance&#39;s name
        /// </summary>
        /// <remarks>
        /// When the Mode is set to API: Signatures must be provided on Contract Creation, Allow non-email Signers, Users cannot sign Contracts by themselves.  When the Mode is set to GUI: Signatures cannot be provided on Contract Creation, Only allow signer emails, An email will be sent to ask for a signature after the contract is confirmed in blockchain, Users must sign the contracts either logged in or using the link in the email that was sent.                Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>SealerProductSubscription</returns>
        SealerProductSubscription UpdateSealerProduct (string productId, string xApiKey, UpdateSealerProductRequest request = null);

        /// <summary>
        /// Update a sealer instance&#39;s name
        /// </summary>
        /// <remarks>
        /// When the Mode is set to API: Signatures must be provided on Contract Creation, Allow non-email Signers, Users cannot sign Contracts by themselves.  When the Mode is set to GUI: Signatures cannot be provided on Contract Creation, Only allow signer emails, An email will be sent to ask for a signature after the contract is confirmed in blockchain, Users must sign the contracts either logged in or using the link in the email that was sent.                Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of SealerProductSubscription</returns>
        ApiResponse<SealerProductSubscription> UpdateSealerProductWithHttpInfo (string productId, string xApiKey, UpdateSealerProductRequest request = null);
        /// <summary>
        /// Update a tracker instance&#39;s name
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerProductSubscription</returns>
        TrackerProductSubscription UpdateTrackerProduct (string productId, string xApiKey, UpdateTrackerProductRequest request = null);

        /// <summary>
        /// Update a tracker instance&#39;s name
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerProductSubscription</returns>
        ApiResponse<TrackerProductSubscription> UpdateTrackerProductWithHttpInfo (string productId, string xApiKey, UpdateTrackerProductRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the products for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>Task of List&lt;ProductMenuOption&gt;</returns>
        System.Threading.Tasks.Task<List<ProductMenuOption>> GetAllProductsAsync (string xApiKey);

        /// <summary>
        /// Get the products for the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (List&lt;ProductMenuOption&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductMenuOption>>> GetAllProductsAsyncWithHttpInfo (string xApiKey);
        /// <summary>
        /// Get a product and its settings
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ProductSubscription</returns>
        System.Threading.Tasks.Task<ProductSubscription> GetProductByIdAsync (string productId, string xApiKey);

        /// <summary>
        /// Get a product and its settings
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (ProductSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSubscription>> GetProductByIdAsyncWithHttpInfo (string productId, string xApiKey);
        /// <summary>
        /// Update a keeper instance&#39;s name
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperProductSubscription</returns>
        System.Threading.Tasks.Task<KeeperProductSubscription> UpdateKeeperProductAsync (string productId, string xApiKey, UpdateKeeperProductRequest request = null);

        /// <summary>
        /// Update a keeper instance&#39;s name
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperProductSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperProductSubscription>> UpdateKeeperProductAsyncWithHttpInfo (string productId, string xApiKey, UpdateKeeperProductRequest request = null);
        /// <summary>
        /// Update a sealer instance&#39;s name
        /// </summary>
        /// <remarks>
        /// When the Mode is set to API: Signatures must be provided on Contract Creation, Allow non-email Signers, Users cannot sign Contracts by themselves.  When the Mode is set to GUI: Signatures cannot be provided on Contract Creation, Only allow signer emails, An email will be sent to ask for a signature after the contract is confirmed in blockchain, Users must sign the contracts either logged in or using the link in the email that was sent.                Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of SealerProductSubscription</returns>
        System.Threading.Tasks.Task<SealerProductSubscription> UpdateSealerProductAsync (string productId, string xApiKey, UpdateSealerProductRequest request = null);

        /// <summary>
        /// Update a sealer instance&#39;s name
        /// </summary>
        /// <remarks>
        /// When the Mode is set to API: Signatures must be provided on Contract Creation, Allow non-email Signers, Users cannot sign Contracts by themselves.  When the Mode is set to GUI: Signatures cannot be provided on Contract Creation, Only allow signer emails, An email will be sent to ask for a signature after the contract is confirmed in blockchain, Users must sign the contracts either logged in or using the link in the email that was sent.                Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerProductSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<SealerProductSubscription>> UpdateSealerProductAsyncWithHttpInfo (string productId, string xApiKey, UpdateSealerProductRequest request = null);
        /// <summary>
        /// Update a tracker instance&#39;s name
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerProductSubscription</returns>
        System.Threading.Tasks.Task<TrackerProductSubscription> UpdateTrackerProductAsync (string productId, string xApiKey, UpdateTrackerProductRequest request = null);

        /// <summary>
        /// Update a tracker instance&#39;s name
        /// </summary>
        /// <remarks>
        /// Requires the Admin role
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerProductSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackerProductSubscription>> UpdateTrackerProductAsyncWithHttpInfo (string productId, string xApiKey, UpdateTrackerProductRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsApi : IProductsApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the products for the authenticated user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>List&lt;ProductMenuOption&gt;</returns>
        public List<ProductMenuOption> GetAllProducts (string xApiKey)
        {
             ApiResponse<List<ProductMenuOption>> localVarResponse = GetAllProductsWithHttpInfo(xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the products for the authenticated user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of List&lt;ProductMenuOption&gt;</returns>
        public ApiResponse< List<ProductMenuOption> > GetAllProductsWithHttpInfo (string xApiKey)
        {
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProductsApi->GetAllProducts");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMenuOption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMenuOption>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMenuOption>)));
            
        }

        /// <summary>
        /// Get the products for the authenticated user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>Task of List&lt;ProductMenuOption&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductMenuOption>> GetAllProductsAsync (string xApiKey)
        {
             ApiResponse<List<ProductMenuOption>> localVarResponse = await GetAllProductsAsyncWithHttpInfo(xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the products for the authenticated user 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (List&lt;ProductMenuOption&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductMenuOption>>> GetAllProductsAsyncWithHttpInfo (string xApiKey)
        {
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProductsApi->GetAllProducts");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMenuOption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMenuOption>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMenuOption>)));
            
        }

        /// <summary>
        /// Get a product and its settings Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ProductSubscription</returns>
        public ProductSubscription GetProductById (string productId, string xApiKey)
        {
             ApiResponse<ProductSubscription> localVarResponse = GetProductByIdWithHttpInfo(productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a product and its settings Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of ProductSubscription</returns>
        public ApiResponse< ProductSubscription > GetProductByIdWithHttpInfo (string productId, string xApiKey)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProductsApi->GetProductById");

            var localVarPath = "/products/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSubscription)));
            
        }

        /// <summary>
        /// Get a product and its settings Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ProductSubscription</returns>
        public async System.Threading.Tasks.Task<ProductSubscription> GetProductByIdAsync (string productId, string xApiKey)
        {
             ApiResponse<ProductSubscription> localVarResponse = await GetProductByIdAsyncWithHttpInfo(productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a product and its settings Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (ProductSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSubscription>> GetProductByIdAsyncWithHttpInfo (string productId, string xApiKey)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProductById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProductsApi->GetProductById");

            var localVarPath = "/products/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSubscription)));
            
        }

        /// <summary>
        /// Update a keeper instance&#39;s name Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperProductSubscription</returns>
        public KeeperProductSubscription UpdateKeeperProduct (string productId, string xApiKey, UpdateKeeperProductRequest request = null)
        {
             ApiResponse<KeeperProductSubscription> localVarResponse = UpdateKeeperProductWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a keeper instance&#39;s name Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperProductSubscription</returns>
        public ApiResponse< KeeperProductSubscription > UpdateKeeperProductWithHttpInfo (string productId, string xApiKey, UpdateKeeperProductRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateKeeperProduct");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProductsApi->UpdateKeeperProduct");

            var localVarPath = "/products/keeper/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeeperProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperProductSubscription)));
            
        }

        /// <summary>
        /// Update a keeper instance&#39;s name Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperProductSubscription</returns>
        public async System.Threading.Tasks.Task<KeeperProductSubscription> UpdateKeeperProductAsync (string productId, string xApiKey, UpdateKeeperProductRequest request = null)
        {
             ApiResponse<KeeperProductSubscription> localVarResponse = await UpdateKeeperProductAsyncWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a keeper instance&#39;s name Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperProductSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperProductSubscription>> UpdateKeeperProductAsyncWithHttpInfo (string productId, string xApiKey, UpdateKeeperProductRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateKeeperProduct");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProductsApi->UpdateKeeperProduct");

            var localVarPath = "/products/keeper/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeeperProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperProductSubscription)));
            
        }

        /// <summary>
        /// Update a sealer instance&#39;s name When the Mode is set to API: Signatures must be provided on Contract Creation, Allow non-email Signers, Users cannot sign Contracts by themselves.  When the Mode is set to GUI: Signatures cannot be provided on Contract Creation, Only allow signer emails, An email will be sent to ask for a signature after the contract is confirmed in blockchain, Users must sign the contracts either logged in or using the link in the email that was sent.                Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>SealerProductSubscription</returns>
        public SealerProductSubscription UpdateSealerProduct (string productId, string xApiKey, UpdateSealerProductRequest request = null)
        {
             ApiResponse<SealerProductSubscription> localVarResponse = UpdateSealerProductWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a sealer instance&#39;s name When the Mode is set to API: Signatures must be provided on Contract Creation, Allow non-email Signers, Users cannot sign Contracts by themselves.  When the Mode is set to GUI: Signatures cannot be provided on Contract Creation, Only allow signer emails, An email will be sent to ask for a signature after the contract is confirmed in blockchain, Users must sign the contracts either logged in or using the link in the email that was sent.                Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of SealerProductSubscription</returns>
        public ApiResponse< SealerProductSubscription > UpdateSealerProductWithHttpInfo (string productId, string xApiKey, UpdateSealerProductRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateSealerProduct");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProductsApi->UpdateSealerProduct");

            var localVarPath = "/products/sealer/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSealerProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SealerProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerProductSubscription)));
            
        }

        /// <summary>
        /// Update a sealer instance&#39;s name When the Mode is set to API: Signatures must be provided on Contract Creation, Allow non-email Signers, Users cannot sign Contracts by themselves.  When the Mode is set to GUI: Signatures cannot be provided on Contract Creation, Only allow signer emails, An email will be sent to ask for a signature after the contract is confirmed in blockchain, Users must sign the contracts either logged in or using the link in the email that was sent.                Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of SealerProductSubscription</returns>
        public async System.Threading.Tasks.Task<SealerProductSubscription> UpdateSealerProductAsync (string productId, string xApiKey, UpdateSealerProductRequest request = null)
        {
             ApiResponse<SealerProductSubscription> localVarResponse = await UpdateSealerProductAsyncWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a sealer instance&#39;s name When the Mode is set to API: Signatures must be provided on Contract Creation, Allow non-email Signers, Users cannot sign Contracts by themselves.  When the Mode is set to GUI: Signatures cannot be provided on Contract Creation, Only allow signer emails, An email will be sent to ask for a signature after the contract is confirmed in blockchain, Users must sign the contracts either logged in or using the link in the email that was sent.                Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (SealerProductSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SealerProductSubscription>> UpdateSealerProductAsyncWithHttpInfo (string productId, string xApiKey, UpdateSealerProductRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateSealerProduct");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProductsApi->UpdateSealerProduct");

            var localVarPath = "/products/sealer/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSealerProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SealerProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SealerProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SealerProductSubscription)));
            
        }

        /// <summary>
        /// Update a tracker instance&#39;s name Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>TrackerProductSubscription</returns>
        public TrackerProductSubscription UpdateTrackerProduct (string productId, string xApiKey, UpdateTrackerProductRequest request = null)
        {
             ApiResponse<TrackerProductSubscription> localVarResponse = UpdateTrackerProductWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a tracker instance&#39;s name Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of TrackerProductSubscription</returns>
        public ApiResponse< TrackerProductSubscription > UpdateTrackerProductWithHttpInfo (string productId, string xApiKey, UpdateTrackerProductRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateTrackerProduct");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProductsApi->UpdateTrackerProduct");

            var localVarPath = "/products/tracker/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackerProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackerProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerProductSubscription)));
            
        }

        /// <summary>
        /// Update a tracker instance&#39;s name Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of TrackerProductSubscription</returns>
        public async System.Threading.Tasks.Task<TrackerProductSubscription> UpdateTrackerProductAsync (string productId, string xApiKey, UpdateTrackerProductRequest request = null)
        {
             ApiResponse<TrackerProductSubscription> localVarResponse = await UpdateTrackerProductAsyncWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a tracker instance&#39;s name Requires the Admin role
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (TrackerProductSubscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackerProductSubscription>> UpdateTrackerProductAsyncWithHttpInfo (string productId, string xApiKey, UpdateTrackerProductRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateTrackerProduct");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProductsApi->UpdateTrackerProduct");

            var localVarPath = "/products/tracker/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackerProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackerProductSubscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackerProductSubscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackerProductSubscription)));
            
        }

    }
}
