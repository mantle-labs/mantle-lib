/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeeperApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [FILES] Delete a file from Keeper. Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns></returns>
        void KeeperFilesByFileIdDelete (string fileId);

        /// <summary>
        /// [FILES] Delete a file from Keeper. Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> KeeperFilesByFileIdDeleteWithHttpInfo (string fileId);
        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>KeeperFile</returns>
        KeeperFile KeeperFilesByFileIdGet (string fileId);

        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>ApiResponse of KeeperFile</returns>
        ApiResponse<KeeperFile> KeeperFilesByFileIdGetWithHttpInfo (string fileId);
        /// <summary>
        /// [FILES] Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        BreadcrumbingCompareResponse KeeperFilesDiffPost (string fileId, System.IO.Stream file, bool? generateDiffFile = null);

        /// <summary>
        /// [FILES] Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        ApiResponse<BreadcrumbingCompareResponse> KeeperFilesDiffPostWithHttpInfo (string fileId, System.IO.Stream file, bool? generateDiffFile = null);
        /// <summary>
        /// [FILES] Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        BreadcrumbingCompareResponse KeeperFilesDiffWithLatestPost (string fileId, System.IO.Stream file, bool? generateDiffFile = null);

        /// <summary>
        /// [FILES] Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        ApiResponse<BreadcrumbingCompareResponse> KeeperFilesDiffWithLatestPostWithHttpInfo (string fileId, System.IO.Stream file, bool? generateDiffFile = null);
        /// <summary>
        /// [FILES] Check if a file already exists in Keeper. We will verify if we have the fingerprint of the file you sent. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>bool?</returns>
        bool? KeeperFilesExistPost (string folderId, System.IO.Stream file, string accuracy = null);

        /// <summary>
        /// [FILES] Check if a file already exists in Keeper. We will verify if we have the fingerprint of the file you sent. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> KeeperFilesExistPostWithHttpInfo (string folderId, System.IO.Stream file, string accuracy = null);
        /// <summary>
        /// [FILES] Get all the files stored in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>List&lt;KeeperFile&gt;</returns>
        List<KeeperFile> KeeperFilesGet (string displayName = null, string folderId = null);

        /// <summary>
        /// [FILES] Get all the files stored in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFile&gt;</returns>
        ApiResponse<List<KeeperFile>> KeeperFilesGetWithHttpInfo (string displayName = null, string folderId = null);
        /// <summary>
        /// [FILES] Add a file to Keeper. This will create a cryptographic representation of the file and store its fingerprint in the blockchain. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>KeeperFile</returns>
        KeeperFile KeeperFilesPost (string folderId, System.IO.Stream file, string displayName, string accuracy = null);

        /// <summary>
        /// [FILES] Add a file to Keeper. This will create a cryptographic representation of the file and store its fingerprint in the blockchain. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>ApiResponse of KeeperFile</returns>
        ApiResponse<KeeperFile> KeeperFilesPostWithHttpInfo (string folderId, System.IO.Stream file, string displayName, string accuracy = null);
        /// <summary>
        /// [FOLDERS] Delete a folder in Keeper. This will also delete all the files it contains. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns></returns>
        void KeeperFoldersByFolderIdDelete (string folderId);

        /// <summary>
        /// [FOLDERS] Delete a folder in Keeper. This will also delete all the files it contains. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> KeeperFoldersByFolderIdDeleteWithHttpInfo (string folderId);
        /// <summary>
        /// [FOLDERS] Get a specific folder&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>KeeperFolder</returns>
        KeeperFolder KeeperFoldersByFolderIdGet (string folderId);

        /// <summary>
        /// [FOLDERS] Get a specific folder&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        ApiResponse<KeeperFolder> KeeperFoldersByFolderIdGetWithHttpInfo (string folderId);
        /// <summary>
        /// [FOLDERS] Get all folders that have been created in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>List&lt;KeeperFolder&gt;</returns>
        List<KeeperFolder> KeeperFoldersGet (string name = null);

        /// <summary>
        /// [FOLDERS] Get all folders that have been created in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFolder&gt;</returns>
        ApiResponse<List<KeeperFolder>> KeeperFoldersGetWithHttpInfo (string name = null);
        /// <summary>
        /// [FOLDERS] Create a folder in Keeper. This is necessary to add files in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperFolder</returns>
        KeeperFolder KeeperFoldersPost (KeeperFolderCreateRequest request = null);

        /// <summary>
        /// [FOLDERS] Create a folder in Keeper. This is necessary to add files in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        ApiResponse<KeeperFolder> KeeperFoldersPostWithHttpInfo (KeeperFolderCreateRequest request = null);
        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a specific file. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>List&lt;KeeperFileVersion&gt;</returns>
        List<KeeperFileVersion> KeeperVersionsByFileIdGet (string fileId);

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a specific file. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>ApiResponse of List&lt;KeeperFileVersion&gt;</returns>
        ApiResponse<List<KeeperFileVersion>> KeeperVersionsByFileIdGetWithHttpInfo (string fileId);
        /// <summary>
        /// [VERSIONS] Compare a local file to a specific version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        BreadcrumbingCompareResponse KeeperVersionsDiffPost (string versionId, System.IO.Stream file, bool? generateDiffFile = null);

        /// <summary>
        /// [VERSIONS] Compare a local file to a specific version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        ApiResponse<BreadcrumbingCompareResponse> KeeperVersionsDiffPostWithHttpInfo (string versionId, System.IO.Stream file, bool? generateDiffFile = null);
        /// <summary>
        /// [VERSIONS] Create a version for an existing file. This new version will also have its fingerprint stored in the blockchain. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <returns>KeeperFileVersion</returns>
        KeeperFileVersion KeeperVersionsPost (string fileId, System.IO.Stream file);

        /// <summary>
        /// [VERSIONS] Create a version for an existing file. This new version will also have its fingerprint stored in the blockchain. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <returns>ApiResponse of KeeperFileVersion</returns>
        ApiResponse<KeeperFileVersion> KeeperVersionsPostWithHttpInfo (string fileId, System.IO.Stream file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [FILES] Delete a file from Keeper. Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task KeeperFilesByFileIdDeleteAsync (string fileId);

        /// <summary>
        /// [FILES] Delete a file from Keeper. Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> KeeperFilesByFileIdDeleteAsyncWithHttpInfo (string fileId);
        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of KeeperFile</returns>
        System.Threading.Tasks.Task<KeeperFile> KeeperFilesByFileIdGetAsync (string fileId);

        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFile>> KeeperFilesByFileIdGetAsyncWithHttpInfo (string fileId);
        /// <summary>
        /// [FILES] Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperFilesDiffPostAsync (string fileId, System.IO.Stream file, bool? generateDiffFile = null);

        /// <summary>
        /// [FILES] Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperFilesDiffPostAsyncWithHttpInfo (string fileId, System.IO.Stream file, bool? generateDiffFile = null);
        /// <summary>
        /// [FILES] Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperFilesDiffWithLatestPostAsync (string fileId, System.IO.Stream file, bool? generateDiffFile = null);

        /// <summary>
        /// [FILES] Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperFilesDiffWithLatestPostAsyncWithHttpInfo (string fileId, System.IO.Stream file, bool? generateDiffFile = null);
        /// <summary>
        /// [FILES] Check if a file already exists in Keeper. We will verify if we have the fingerprint of the file you sent. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> KeeperFilesExistPostAsync (string folderId, System.IO.Stream file, string accuracy = null);

        /// <summary>
        /// [FILES] Check if a file already exists in Keeper. We will verify if we have the fingerprint of the file you sent. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> KeeperFilesExistPostAsyncWithHttpInfo (string folderId, System.IO.Stream file, string accuracy = null);
        /// <summary>
        /// [FILES] Get all the files stored in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFile&gt;</returns>
        System.Threading.Tasks.Task<List<KeeperFile>> KeeperFilesGetAsync (string displayName = null, string folderId = null);

        /// <summary>
        /// [FILES] Get all the files stored in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeeperFile>>> KeeperFilesGetAsyncWithHttpInfo (string displayName = null, string folderId = null);
        /// <summary>
        /// [FILES] Add a file to Keeper. This will create a cryptographic representation of the file and store its fingerprint in the blockchain. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>Task of KeeperFile</returns>
        System.Threading.Tasks.Task<KeeperFile> KeeperFilesPostAsync (string folderId, System.IO.Stream file, string displayName, string accuracy = null);

        /// <summary>
        /// [FILES] Add a file to Keeper. This will create a cryptographic representation of the file and store its fingerprint in the blockchain. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFile>> KeeperFilesPostAsyncWithHttpInfo (string folderId, System.IO.Stream file, string displayName, string accuracy = null);
        /// <summary>
        /// [FOLDERS] Delete a folder in Keeper. This will also delete all the files it contains. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task KeeperFoldersByFolderIdDeleteAsync (string folderId);

        /// <summary>
        /// [FOLDERS] Delete a folder in Keeper. This will also delete all the files it contains. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> KeeperFoldersByFolderIdDeleteAsyncWithHttpInfo (string folderId);
        /// <summary>
        /// [FOLDERS] Get a specific folder&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of KeeperFolder</returns>
        System.Threading.Tasks.Task<KeeperFolder> KeeperFoldersByFolderIdGetAsync (string folderId);

        /// <summary>
        /// [FOLDERS] Get a specific folder&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> KeeperFoldersByFolderIdGetAsyncWithHttpInfo (string folderId);
        /// <summary>
        /// [FOLDERS] Get all folders that have been created in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFolder&gt;</returns>
        System.Threading.Tasks.Task<List<KeeperFolder>> KeeperFoldersGetAsync (string name = null);

        /// <summary>
        /// [FOLDERS] Get all folders that have been created in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeeperFolder>>> KeeperFoldersGetAsyncWithHttpInfo (string name = null);
        /// <summary>
        /// [FOLDERS] Create a folder in Keeper. This is necessary to add files in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperFolder</returns>
        System.Threading.Tasks.Task<KeeperFolder> KeeperFoldersPostAsync (KeeperFolderCreateRequest request = null);

        /// <summary>
        /// [FOLDERS] Create a folder in Keeper. This is necessary to add files in Keeper. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> KeeperFoldersPostAsyncWithHttpInfo (KeeperFolderCreateRequest request = null);
        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a specific file. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of List&lt;KeeperFileVersion&gt;</returns>
        System.Threading.Tasks.Task<List<KeeperFileVersion>> KeeperVersionsByFileIdGetAsync (string fileId);

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a specific file. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFileVersion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeeperFileVersion>>> KeeperVersionsByFileIdGetAsyncWithHttpInfo (string fileId);
        /// <summary>
        /// [VERSIONS] Compare a local file to a specific version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperVersionsDiffPostAsync (string versionId, System.IO.Stream file, bool? generateDiffFile = null);

        /// <summary>
        /// [VERSIONS] Compare a local file to a specific version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperVersionsDiffPostAsyncWithHttpInfo (string versionId, System.IO.Stream file, bool? generateDiffFile = null);
        /// <summary>
        /// [VERSIONS] Create a version for an existing file. This new version will also have its fingerprint stored in the blockchain. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <returns>Task of KeeperFileVersion</returns>
        System.Threading.Tasks.Task<KeeperFileVersion> KeeperVersionsPostAsync (string fileId, System.IO.Stream file);

        /// <summary>
        /// [VERSIONS] Create a version for an existing file. This new version will also have its fingerprint stored in the blockchain. Requires the Keeper Admin Role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <returns>Task of ApiResponse (KeeperFileVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFileVersion>> KeeperVersionsPostAsyncWithHttpInfo (string fileId, System.IO.Stream file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KeeperApi : IKeeperApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeeperApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeeperApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeeperApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeeperApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [FILES] Delete a file from Keeper. Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns></returns>
        public void KeeperFilesByFileIdDelete (string fileId)
        {
             KeeperFilesByFileIdDeleteWithHttpInfo(fileId);
        }

        /// <summary>
        /// [FILES] Delete a file from Keeper. Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> KeeperFilesByFileIdDeleteWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperFilesByFileIdDelete");

            var localVarPath = "./keeper/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesByFileIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [FILES] Delete a file from Keeper. Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task KeeperFilesByFileIdDeleteAsync (string fileId)
        {
             await KeeperFilesByFileIdDeleteAsyncWithHttpInfo(fileId);

        }

        /// <summary>
        /// [FILES] Delete a file from Keeper. Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> KeeperFilesByFileIdDeleteAsyncWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperFilesByFileIdDelete");

            var localVarPath = "./keeper/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesByFileIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>KeeperFile</returns>
        public KeeperFile KeeperFilesByFileIdGet (string fileId)
        {
             ApiResponse<KeeperFile> localVarResponse = KeeperFilesByFileIdGetWithHttpInfo(fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>ApiResponse of KeeperFile</returns>
        public ApiResponse< KeeperFile > KeeperFilesByFileIdGetWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperFilesByFileIdGet");

            var localVarPath = "./keeper/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesByFileIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of KeeperFile</returns>
        public async System.Threading.Tasks.Task<KeeperFile> KeeperFilesByFileIdGetAsync (string fileId)
        {
             ApiResponse<KeeperFile> localVarResponse = await KeeperFilesByFileIdGetAsyncWithHttpInfo(fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFile>> KeeperFilesByFileIdGetAsyncWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperFilesByFileIdGet");

            var localVarPath = "./keeper/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesByFileIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [FILES] Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        public BreadcrumbingCompareResponse KeeperFilesDiffPost (string fileId, System.IO.Stream file, bool? generateDiffFile = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = KeeperFilesDiffPostWithHttpInfo(fileId, file, generateDiffFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        public ApiResponse< BreadcrumbingCompareResponse > KeeperFilesDiffPostWithHttpInfo (string fileId, System.IO.Stream file, bool? generateDiffFile = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperFilesDiffPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperFilesDiffPost");

            var localVarPath = "./keeper/files/diff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (generateDiffFile != null) localVarFormParams.Add("generateDiffFile", Configuration.ApiClient.ParameterToString(generateDiffFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesDiffPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [FILES] Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperFilesDiffPostAsync (string fileId, System.IO.Stream file, bool? generateDiffFile = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = await KeeperFilesDiffPostAsyncWithHttpInfo(fileId, file, generateDiffFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperFilesDiffPostAsyncWithHttpInfo (string fileId, System.IO.Stream file, bool? generateDiffFile = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperFilesDiffPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperFilesDiffPost");

            var localVarPath = "./keeper/files/diff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (generateDiffFile != null) localVarFormParams.Add("generateDiffFile", Configuration.ApiClient.ParameterToString(generateDiffFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesDiffPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [FILES] Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        public BreadcrumbingCompareResponse KeeperFilesDiffWithLatestPost (string fileId, System.IO.Stream file, bool? generateDiffFile = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = KeeperFilesDiffWithLatestPostWithHttpInfo(fileId, file, generateDiffFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        public ApiResponse< BreadcrumbingCompareResponse > KeeperFilesDiffWithLatestPostWithHttpInfo (string fileId, System.IO.Stream file, bool? generateDiffFile = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperFilesDiffWithLatestPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperFilesDiffWithLatestPost");

            var localVarPath = "./keeper/files/diffwithlatest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (generateDiffFile != null) localVarFormParams.Add("generateDiffFile", Configuration.ApiClient.ParameterToString(generateDiffFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesDiffWithLatestPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [FILES] Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperFilesDiffWithLatestPostAsync (string fileId, System.IO.Stream file, bool? generateDiffFile = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = await KeeperFilesDiffWithLatestPostAsyncWithHttpInfo(fileId, file, generateDiffFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperFilesDiffWithLatestPostAsyncWithHttpInfo (string fileId, System.IO.Stream file, bool? generateDiffFile = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperFilesDiffWithLatestPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperFilesDiffWithLatestPost");

            var localVarPath = "./keeper/files/diffwithlatest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (generateDiffFile != null) localVarFormParams.Add("generateDiffFile", Configuration.ApiClient.ParameterToString(generateDiffFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesDiffWithLatestPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [FILES] Check if a file already exists in Keeper. We will verify if we have the fingerprint of the file you sent. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? KeeperFilesExistPost (string folderId, System.IO.Stream file, string accuracy = null)
        {
             ApiResponse<bool?> localVarResponse = KeeperFilesExistPostWithHttpInfo(folderId, file, accuracy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Check if a file already exists in Keeper. We will verify if we have the fingerprint of the file you sent. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > KeeperFilesExistPostWithHttpInfo (string folderId, System.IO.Stream file, string accuracy = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperFilesExistPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperFilesExistPost");

            var localVarPath = "./keeper/files/exist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarFormParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // form parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesExistPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// [FILES] Check if a file already exists in Keeper. We will verify if we have the fingerprint of the file you sent. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> KeeperFilesExistPostAsync (string folderId, System.IO.Stream file, string accuracy = null)
        {
             ApiResponse<bool?> localVarResponse = await KeeperFilesExistPostAsyncWithHttpInfo(folderId, file, accuracy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Check if a file already exists in Keeper. We will verify if we have the fingerprint of the file you sent. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> KeeperFilesExistPostAsyncWithHttpInfo (string folderId, System.IO.Stream file, string accuracy = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperFilesExistPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperFilesExistPost");

            var localVarPath = "./keeper/files/exist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarFormParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // form parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesExistPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// [FILES] Get all the files stored in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>List&lt;KeeperFile&gt;</returns>
        public List<KeeperFile> KeeperFilesGet (string displayName = null, string folderId = null)
        {
             ApiResponse<List<KeeperFile>> localVarResponse = KeeperFilesGetWithHttpInfo(displayName, folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Get all the files stored in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFile&gt;</returns>
        public ApiResponse< List<KeeperFile> > KeeperFilesGetWithHttpInfo (string displayName = null, string folderId = null)
        {

            var localVarPath = "./keeper/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (displayName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displayName", displayName)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFile>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFile>)));
        }

        /// <summary>
        /// [FILES] Get all the files stored in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFile&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeeperFile>> KeeperFilesGetAsync (string displayName = null, string folderId = null)
        {
             ApiResponse<List<KeeperFile>> localVarResponse = await KeeperFilesGetAsyncWithHttpInfo(displayName, folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Get all the files stored in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeeperFile>>> KeeperFilesGetAsyncWithHttpInfo (string displayName = null, string folderId = null)
        {

            var localVarPath = "./keeper/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (displayName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displayName", displayName)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFile>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFile>)));
        }

        /// <summary>
        /// [FILES] Add a file to Keeper. This will create a cryptographic representation of the file and store its fingerprint in the blockchain. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>KeeperFile</returns>
        public KeeperFile KeeperFilesPost (string folderId, System.IO.Stream file, string displayName, string accuracy = null)
        {
             ApiResponse<KeeperFile> localVarResponse = KeeperFilesPostWithHttpInfo(folderId, file, displayName, accuracy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Add a file to Keeper. This will create a cryptographic representation of the file and store its fingerprint in the blockchain. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>ApiResponse of KeeperFile</returns>
        public ApiResponse< KeeperFile > KeeperFilesPostWithHttpInfo (string folderId, System.IO.Stream file, string displayName, string accuracy = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperFilesPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperFilesPost");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling KeeperApi->KeeperFilesPost");

            var localVarPath = "./keeper/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarFormParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // form parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [FILES] Add a file to Keeper. This will create a cryptographic representation of the file and store its fingerprint in the blockchain. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>Task of KeeperFile</returns>
        public async System.Threading.Tasks.Task<KeeperFile> KeeperFilesPostAsync (string folderId, System.IO.Stream file, string displayName, string accuracy = null)
        {
             ApiResponse<KeeperFile> localVarResponse = await KeeperFilesPostAsyncWithHttpInfo(folderId, file, displayName, accuracy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Add a file to Keeper. This will create a cryptographic representation of the file and store its fingerprint in the blockchain. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFile>> KeeperFilesPostAsyncWithHttpInfo (string folderId, System.IO.Stream file, string displayName, string accuracy = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperFilesPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperFilesPost");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling KeeperApi->KeeperFilesPost");

            var localVarPath = "./keeper/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarFormParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // form parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [FOLDERS] Delete a folder in Keeper. This will also delete all the files it contains. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns></returns>
        public void KeeperFoldersByFolderIdDelete (string folderId)
        {
             KeeperFoldersByFolderIdDeleteWithHttpInfo(folderId);
        }

        /// <summary>
        /// [FOLDERS] Delete a folder in Keeper. This will also delete all the files it contains. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> KeeperFoldersByFolderIdDeleteWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperFoldersByFolderIdDelete");

            var localVarPath = "./keeper/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFoldersByFolderIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [FOLDERS] Delete a folder in Keeper. This will also delete all the files it contains. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task KeeperFoldersByFolderIdDeleteAsync (string folderId)
        {
             await KeeperFoldersByFolderIdDeleteAsyncWithHttpInfo(folderId);

        }

        /// <summary>
        /// [FOLDERS] Delete a folder in Keeper. This will also delete all the files it contains. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> KeeperFoldersByFolderIdDeleteAsyncWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperFoldersByFolderIdDelete");

            var localVarPath = "./keeper/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFoldersByFolderIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [FOLDERS] Get a specific folder&#39;s details. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>KeeperFolder</returns>
        public KeeperFolder KeeperFoldersByFolderIdGet (string folderId)
        {
             ApiResponse<KeeperFolder> localVarResponse = KeeperFoldersByFolderIdGetWithHttpInfo(folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FOLDERS] Get a specific folder&#39;s details. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        public ApiResponse< KeeperFolder > KeeperFoldersByFolderIdGetWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperFoldersByFolderIdGet");

            var localVarPath = "./keeper/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFoldersByFolderIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [FOLDERS] Get a specific folder&#39;s details. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of KeeperFolder</returns>
        public async System.Threading.Tasks.Task<KeeperFolder> KeeperFoldersByFolderIdGetAsync (string folderId)
        {
             ApiResponse<KeeperFolder> localVarResponse = await KeeperFoldersByFolderIdGetAsyncWithHttpInfo(folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FOLDERS] Get a specific folder&#39;s details. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> KeeperFoldersByFolderIdGetAsyncWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperFoldersByFolderIdGet");

            var localVarPath = "./keeper/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFoldersByFolderIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [FOLDERS] Get all folders that have been created in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>List&lt;KeeperFolder&gt;</returns>
        public List<KeeperFolder> KeeperFoldersGet (string name = null)
        {
             ApiResponse<List<KeeperFolder>> localVarResponse = KeeperFoldersGetWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FOLDERS] Get all folders that have been created in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFolder&gt;</returns>
        public ApiResponse< List<KeeperFolder> > KeeperFoldersGetWithHttpInfo (string name = null)
        {

            var localVarPath = "./keeper/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFolder>)));
        }

        /// <summary>
        /// [FOLDERS] Get all folders that have been created in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeeperFolder>> KeeperFoldersGetAsync (string name = null)
        {
             ApiResponse<List<KeeperFolder>> localVarResponse = await KeeperFoldersGetAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FOLDERS] Get all folders that have been created in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeeperFolder>>> KeeperFoldersGetAsyncWithHttpInfo (string name = null)
        {

            var localVarPath = "./keeper/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFolder>)));
        }

        /// <summary>
        /// [FOLDERS] Create a folder in Keeper. This is necessary to add files in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperFolder</returns>
        public KeeperFolder KeeperFoldersPost (KeeperFolderCreateRequest request = null)
        {
             ApiResponse<KeeperFolder> localVarResponse = KeeperFoldersPostWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FOLDERS] Create a folder in Keeper. This is necessary to add files in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        public ApiResponse< KeeperFolder > KeeperFoldersPostWithHttpInfo (KeeperFolderCreateRequest request = null)
        {

            var localVarPath = "./keeper/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [FOLDERS] Create a folder in Keeper. This is necessary to add files in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperFolder</returns>
        public async System.Threading.Tasks.Task<KeeperFolder> KeeperFoldersPostAsync (KeeperFolderCreateRequest request = null)
        {
             ApiResponse<KeeperFolder> localVarResponse = await KeeperFoldersPostAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FOLDERS] Create a folder in Keeper. This is necessary to add files in Keeper. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> KeeperFoldersPostAsyncWithHttpInfo (KeeperFolderCreateRequest request = null)
        {

            var localVarPath = "./keeper/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a specific file. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>List&lt;KeeperFileVersion&gt;</returns>
        public List<KeeperFileVersion> KeeperVersionsByFileIdGet (string fileId)
        {
             ApiResponse<List<KeeperFileVersion>> localVarResponse = KeeperVersionsByFileIdGetWithHttpInfo(fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a specific file. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>ApiResponse of List&lt;KeeperFileVersion&gt;</returns>
        public ApiResponse< List<KeeperFileVersion> > KeeperVersionsByFileIdGetWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperVersionsByFileIdGet");

            var localVarPath = "./keeper/versions/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperVersionsByFileIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFileVersion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFileVersion>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFileVersion>)));
        }

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a specific file. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of List&lt;KeeperFileVersion&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeeperFileVersion>> KeeperVersionsByFileIdGetAsync (string fileId)
        {
             ApiResponse<List<KeeperFileVersion>> localVarResponse = await KeeperVersionsByFileIdGetAsyncWithHttpInfo(fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a specific file. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFileVersion&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeeperFileVersion>>> KeeperVersionsByFileIdGetAsyncWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperVersionsByFileIdGet");

            var localVarPath = "./keeper/versions/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperVersionsByFileIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFileVersion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFileVersion>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFileVersion>)));
        }

        /// <summary>
        /// [VERSIONS] Compare a local file to a specific version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        public BreadcrumbingCompareResponse KeeperVersionsDiffPost (string versionId, System.IO.Stream file, bool? generateDiffFile = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = KeeperVersionsDiffPostWithHttpInfo(versionId, file, generateDiffFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [VERSIONS] Compare a local file to a specific version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        public ApiResponse< BreadcrumbingCompareResponse > KeeperVersionsDiffPostWithHttpInfo (string versionId, System.IO.Stream file, bool? generateDiffFile = null)
        {
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KeeperApi->KeeperVersionsDiffPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperVersionsDiffPost");

            var localVarPath = "./keeper/versions/diff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (versionId != null) localVarFormParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (generateDiffFile != null) localVarFormParams.Add("generateDiffFile", Configuration.ApiClient.ParameterToString(generateDiffFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperVersionsDiffPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [VERSIONS] Compare a local file to a specific version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperVersionsDiffPostAsync (string versionId, System.IO.Stream file, bool? generateDiffFile = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = await KeeperVersionsDiffPostAsyncWithHttpInfo(versionId, file, generateDiffFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [VERSIONS] Compare a local file to a specific version of a file that&#39;s been stored in the blockchain. We will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is either Text, JSON or an image, then a file highlighting the differences will be generated.  Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperVersionsDiffPostAsyncWithHttpInfo (string versionId, System.IO.Stream file, bool? generateDiffFile = null)
        {
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KeeperApi->KeeperVersionsDiffPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperVersionsDiffPost");

            var localVarPath = "./keeper/versions/diff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (versionId != null) localVarFormParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (generateDiffFile != null) localVarFormParams.Add("generateDiffFile", Configuration.ApiClient.ParameterToString(generateDiffFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperVersionsDiffPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [VERSIONS] Create a version for an existing file. This new version will also have its fingerprint stored in the blockchain. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <returns>KeeperFileVersion</returns>
        public KeeperFileVersion KeeperVersionsPost (string fileId, System.IO.Stream file)
        {
             ApiResponse<KeeperFileVersion> localVarResponse = KeeperVersionsPostWithHttpInfo(fileId, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [VERSIONS] Create a version for an existing file. This new version will also have its fingerprint stored in the blockchain. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <returns>ApiResponse of KeeperFileVersion</returns>
        public ApiResponse< KeeperFileVersion > KeeperVersionsPostWithHttpInfo (string fileId, System.IO.Stream file)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperVersionsPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperVersionsPost");

            var localVarPath = "./keeper/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperVersionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFileVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFileVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFileVersion)));
        }

        /// <summary>
        /// [VERSIONS] Create a version for an existing file. This new version will also have its fingerprint stored in the blockchain. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <returns>Task of KeeperFileVersion</returns>
        public async System.Threading.Tasks.Task<KeeperFileVersion> KeeperVersionsPostAsync (string fileId, System.IO.Stream file)
        {
             ApiResponse<KeeperFileVersion> localVarResponse = await KeeperVersionsPostAsyncWithHttpInfo(fileId, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [VERSIONS] Create a version for an existing file. This new version will also have its fingerprint stored in the blockchain. Requires the Keeper Admin Role. 
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <returns>Task of ApiResponse (KeeperFileVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFileVersion>> KeeperVersionsPostAsyncWithHttpInfo (string fileId, System.IO.Stream file)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperVersionsPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperVersionsPost");

            var localVarPath = "./keeper/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperVersionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFileVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFileVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFileVersion)));
        }

    }
}
