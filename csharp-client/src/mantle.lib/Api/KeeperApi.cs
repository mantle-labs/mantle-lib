/* 
 * Mantle API
 *
 * Most endpoints require authentication with an API key.  You must first authenticate with your account by logging in your account on app.mantle.services. Then, you will need to navigate to the \"My API Key\" page in the Administration section. You might need to have the user administrator of your organization generate you an API Key first.  You must then use this API Key in all your requests with the following header:  [ x-api-key: API_KEY ].
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeeperApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [] Delete a file
        /// </summary>
        /// <remarks>
        /// Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        void KeeperByProductIdFilesByFileIdDelete (string fileId, string productId);

        /// <summary>
        /// [] Delete a file
        /// </summary>
        /// <remarks>
        /// Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> KeeperByProductIdFilesByFileIdDeleteWithHttpInfo (string fileId, string productId);
        /// <summary>
        /// [] Get a file&#39;s details.
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>KeeperFile</returns>
        KeeperFile KeeperByProductIdFilesByFileIdGet (string fileId, string productId);

        /// <summary>
        /// [] Get a file&#39;s details.
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of KeeperFile</returns>
        ApiResponse<KeeperFile> KeeperByProductIdFilesByFileIdGetWithHttpInfo (string fileId, string productId);
        /// <summary>
        /// [] Compare a local file to the latest version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        BreadcrumbingCompareResponse KeeperByProductIdFilesDiffLatestPost (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local file to the latest version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        ApiResponse<BreadcrumbingCompareResponse> KeeperByProductIdFilesDiffLatestPostWithHttpInfo (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Compare a local file to the original version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        BreadcrumbingCompareResponse KeeperByProductIdFilesDiffPost (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local file to the original version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        ApiResponse<BreadcrumbingCompareResponse> KeeperByProductIdFilesDiffPostWithHttpInfo (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Check if a file already exists
        /// </summary>
        /// <remarks>
        /// We will verify if we have the fingerprint of the file you sent.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? KeeperByProductIdFilesExistPost (System.IO.Stream file, string productId, string accuracy = null, string request = null);

        /// <summary>
        /// [] Check if a file already exists
        /// </summary>
        /// <remarks>
        /// We will verify if we have the fingerprint of the file you sent.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> KeeperByProductIdFilesExistPostWithHttpInfo (System.IO.Stream file, string productId, string accuracy = null, string request = null);
        /// <summary>
        /// [] Get all files
        /// </summary>
        /// <remarks>
        /// Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;KeeperFile&gt;</returns>
        List<KeeperFile> KeeperByProductIdFilesGet (string productId, string displayName = null, int? limit = null, int? offset = null, string request = null);

        /// <summary>
        /// [] Get all files
        /// </summary>
        /// <remarks>
        /// Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFile&gt;</returns>
        ApiResponse<List<KeeperFile>> KeeperByProductIdFilesGetWithHttpInfo (string productId, string displayName = null, int? limit = null, int? offset = null, string request = null);
        /// <summary>
        /// [] Create a file
        /// </summary>
        /// <remarks>
        /// This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperFile</returns>
        KeeperFile KeeperByProductIdFilesPost (System.IO.Stream file, string displayName, string productId, string accuracy = null, string request = null);

        /// <summary>
        /// [] Create a file
        /// </summary>
        /// <remarks>
        /// This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperFile</returns>
        ApiResponse<KeeperFile> KeeperByProductIdFilesPostWithHttpInfo (System.IO.Stream file, string displayName, string productId, string accuracy = null, string request = null);
        /// <summary>
        /// [] Delete a folder
        /// </summary>
        /// <remarks>
        /// This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns></returns>
        void KeeperByProductIdFoldersByFolderIdDelete (string productId, string folderId);

        /// <summary>
        /// [] Delete a folder
        /// </summary>
        /// <remarks>
        /// This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> KeeperByProductIdFoldersByFolderIdDeleteWithHttpInfo (string productId, string folderId);
        /// <summary>
        /// [] Get a specific folder&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>KeeperFolder</returns>
        KeeperFolder KeeperByProductIdFoldersByFolderIdGet (string productId, string folderId);

        /// <summary>
        /// [] Get a specific folder&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        ApiResponse<KeeperFolder> KeeperByProductIdFoldersByFolderIdGetWithHttpInfo (string productId, string folderId);
        /// <summary>
        /// [] Get all folders
        /// </summary>
        /// <remarks>
        /// Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>List&lt;KeeperFolder&gt;</returns>
        List<KeeperFolder> KeeperByProductIdFoldersGet (string productId, string name = null);

        /// <summary>
        /// [] Get all folders
        /// </summary>
        /// <remarks>
        /// Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFolder&gt;</returns>
        ApiResponse<List<KeeperFolder>> KeeperByProductIdFoldersGetWithHttpInfo (string productId, string name = null);
        /// <summary>
        /// [] Create a folder
        /// </summary>
        /// <remarks>
        /// This is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperFolder</returns>
        KeeperFolder KeeperByProductIdFoldersPost (string productId, KeeperFolderCreateRequest request = null);

        /// <summary>
        /// [] Create a folder
        /// </summary>
        /// <remarks>
        /// This is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        ApiResponse<KeeperFolder> KeeperByProductIdFoldersPostWithHttpInfo (string productId, KeeperFolderCreateRequest request = null);
        /// <summary>
        /// [] Get all the versions&#39; details for a specific file
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>List&lt;KeeperFileVersion&gt;</returns>
        List<KeeperFileVersion> KeeperByProductIdVersionsByFileIdGet (string fileId, string productId);

        /// <summary>
        /// [] Get all the versions&#39; details for a specific file
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of List&lt;KeeperFileVersion&gt;</returns>
        ApiResponse<List<KeeperFileVersion>> KeeperByProductIdVersionsByFileIdGetWithHttpInfo (string fileId, string productId);
        /// <summary>
        /// [] Compare a local file to a specific version
        /// </summary>
        /// <remarks>
        /// We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        BreadcrumbingCompareResponse KeeperByProductIdVersionsDiffPost (string versionId, string fileId, System.IO.Stream file, string productId, bool? generateDiffFile = null, string request = null);

        /// <summary>
        /// [] Compare a local file to a specific version
        /// </summary>
        /// <remarks>
        /// We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        ApiResponse<BreadcrumbingCompareResponse> KeeperByProductIdVersionsDiffPostWithHttpInfo (string versionId, string fileId, System.IO.Stream file, string productId, bool? generateDiffFile = null, string request = null);
        /// <summary>
        /// [] Create a version for an existing file
        /// </summary>
        /// <remarks>
        /// This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperFileVersion</returns>
        KeeperFileVersion KeeperByProductIdVersionsPost (string fileId, System.IO.Stream file, string productId, string request = null);

        /// <summary>
        /// [] Create a version for an existing file
        /// </summary>
        /// <remarks>
        /// This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperFileVersion</returns>
        ApiResponse<KeeperFileVersion> KeeperByProductIdVersionsPostWithHttpInfo (string fileId, System.IO.Stream file, string productId, string request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [] Delete a file
        /// </summary>
        /// <remarks>
        /// Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task KeeperByProductIdFilesByFileIdDeleteAsync (string fileId, string productId);

        /// <summary>
        /// [] Delete a file
        /// </summary>
        /// <remarks>
        /// Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> KeeperByProductIdFilesByFileIdDeleteAsyncWithHttpInfo (string fileId, string productId);
        /// <summary>
        /// [] Get a file&#39;s details.
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of KeeperFile</returns>
        System.Threading.Tasks.Task<KeeperFile> KeeperByProductIdFilesByFileIdGetAsync (string fileId, string productId);

        /// <summary>
        /// [] Get a file&#39;s details.
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFile>> KeeperByProductIdFilesByFileIdGetAsyncWithHttpInfo (string fileId, string productId);
        /// <summary>
        /// [] Compare a local file to the latest version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperByProductIdFilesDiffLatestPostAsync (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local file to the latest version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperByProductIdFilesDiffLatestPostAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Compare a local file to the original version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperByProductIdFilesDiffPostAsync (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);

        /// <summary>
        /// [] Compare a local file to the original version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperByProductIdFilesDiffPostAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null);
        /// <summary>
        /// [] Check if a file already exists
        /// </summary>
        /// <remarks>
        /// We will verify if we have the fingerprint of the file you sent.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> KeeperByProductIdFilesExistPostAsync (System.IO.Stream file, string productId, string accuracy = null, string request = null);

        /// <summary>
        /// [] Check if a file already exists
        /// </summary>
        /// <remarks>
        /// We will verify if we have the fingerprint of the file you sent.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> KeeperByProductIdFilesExistPostAsyncWithHttpInfo (System.IO.Stream file, string productId, string accuracy = null, string request = null);
        /// <summary>
        /// [] Get all files
        /// </summary>
        /// <remarks>
        /// Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFile&gt;</returns>
        System.Threading.Tasks.Task<List<KeeperFile>> KeeperByProductIdFilesGetAsync (string productId, string displayName = null, int? limit = null, int? offset = null, string request = null);

        /// <summary>
        /// [] Get all files
        /// </summary>
        /// <remarks>
        /// Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeeperFile>>> KeeperByProductIdFilesGetAsyncWithHttpInfo (string productId, string displayName = null, int? limit = null, int? offset = null, string request = null);
        /// <summary>
        /// [] Create a file
        /// </summary>
        /// <remarks>
        /// This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperFile</returns>
        System.Threading.Tasks.Task<KeeperFile> KeeperByProductIdFilesPostAsync (System.IO.Stream file, string displayName, string productId, string accuracy = null, string request = null);

        /// <summary>
        /// [] Create a file
        /// </summary>
        /// <remarks>
        /// This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFile>> KeeperByProductIdFilesPostAsyncWithHttpInfo (System.IO.Stream file, string displayName, string productId, string accuracy = null, string request = null);
        /// <summary>
        /// [] Delete a folder
        /// </summary>
        /// <remarks>
        /// This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task KeeperByProductIdFoldersByFolderIdDeleteAsync (string productId, string folderId);

        /// <summary>
        /// [] Delete a folder
        /// </summary>
        /// <remarks>
        /// This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> KeeperByProductIdFoldersByFolderIdDeleteAsyncWithHttpInfo (string productId, string folderId);
        /// <summary>
        /// [] Get a specific folder&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of KeeperFolder</returns>
        System.Threading.Tasks.Task<KeeperFolder> KeeperByProductIdFoldersByFolderIdGetAsync (string productId, string folderId);

        /// <summary>
        /// [] Get a specific folder&#39;s details
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> KeeperByProductIdFoldersByFolderIdGetAsyncWithHttpInfo (string productId, string folderId);
        /// <summary>
        /// [] Get all folders
        /// </summary>
        /// <remarks>
        /// Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFolder&gt;</returns>
        System.Threading.Tasks.Task<List<KeeperFolder>> KeeperByProductIdFoldersGetAsync (string productId, string name = null);

        /// <summary>
        /// [] Get all folders
        /// </summary>
        /// <remarks>
        /// Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeeperFolder>>> KeeperByProductIdFoldersGetAsyncWithHttpInfo (string productId, string name = null);
        /// <summary>
        /// [] Create a folder
        /// </summary>
        /// <remarks>
        /// This is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperFolder</returns>
        System.Threading.Tasks.Task<KeeperFolder> KeeperByProductIdFoldersPostAsync (string productId, KeeperFolderCreateRequest request = null);

        /// <summary>
        /// [] Create a folder
        /// </summary>
        /// <remarks>
        /// This is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> KeeperByProductIdFoldersPostAsyncWithHttpInfo (string productId, KeeperFolderCreateRequest request = null);
        /// <summary>
        /// [] Get all the versions&#39; details for a specific file
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of List&lt;KeeperFileVersion&gt;</returns>
        System.Threading.Tasks.Task<List<KeeperFileVersion>> KeeperByProductIdVersionsByFileIdGetAsync (string fileId, string productId);

        /// <summary>
        /// [] Get all the versions&#39; details for a specific file
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFileVersion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeeperFileVersion>>> KeeperByProductIdVersionsByFileIdGetAsyncWithHttpInfo (string fileId, string productId);
        /// <summary>
        /// [] Compare a local file to a specific version
        /// </summary>
        /// <remarks>
        /// We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperByProductIdVersionsDiffPostAsync (string versionId, string fileId, System.IO.Stream file, string productId, bool? generateDiffFile = null, string request = null);

        /// <summary>
        /// [] Compare a local file to a specific version
        /// </summary>
        /// <remarks>
        /// We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperByProductIdVersionsDiffPostAsyncWithHttpInfo (string versionId, string fileId, System.IO.Stream file, string productId, bool? generateDiffFile = null, string request = null);
        /// <summary>
        /// [] Create a version for an existing file
        /// </summary>
        /// <remarks>
        /// This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperFileVersion</returns>
        System.Threading.Tasks.Task<KeeperFileVersion> KeeperByProductIdVersionsPostAsync (string fileId, System.IO.Stream file, string productId, string request = null);

        /// <summary>
        /// [] Create a version for an existing file
        /// </summary>
        /// <remarks>
        /// This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFileVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFileVersion>> KeeperByProductIdVersionsPostAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, string request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KeeperApi : IKeeperApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeeperApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeeperApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeeperApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeeperApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [] Delete a file Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns></returns>
        public void KeeperByProductIdFilesByFileIdDelete (string fileId, string productId)
        {
             KeeperByProductIdFilesByFileIdDeleteWithHttpInfo(fileId, productId);
        }

        /// <summary>
        /// [] Delete a file Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> KeeperByProductIdFilesByFileIdDeleteWithHttpInfo (string fileId, string productId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdFilesByFileIdDelete");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesByFileIdDelete");

            var localVarPath = "./keeper/{productId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesByFileIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Delete a file Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task KeeperByProductIdFilesByFileIdDeleteAsync (string fileId, string productId)
        {
             await KeeperByProductIdFilesByFileIdDeleteAsyncWithHttpInfo(fileId, productId);

        }

        /// <summary>
        /// [] Delete a file Its fingerprint will stay in the blockchain, but we won&#39;t show it to you anymore.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> KeeperByProductIdFilesByFileIdDeleteAsyncWithHttpInfo (string fileId, string productId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdFilesByFileIdDelete");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesByFileIdDelete");

            var localVarPath = "./keeper/{productId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesByFileIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>KeeperFile</returns>
        public KeeperFile KeeperByProductIdFilesByFileIdGet (string fileId, string productId)
        {
             ApiResponse<KeeperFile> localVarResponse = KeeperByProductIdFilesByFileIdGetWithHttpInfo(fileId, productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of KeeperFile</returns>
        public ApiResponse< KeeperFile > KeeperByProductIdFilesByFileIdGetWithHttpInfo (string fileId, string productId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdFilesByFileIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesByFileIdGet");

            var localVarPath = "./keeper/{productId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesByFileIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of KeeperFile</returns>
        public async System.Threading.Tasks.Task<KeeperFile> KeeperByProductIdFilesByFileIdGetAsync (string fileId, string productId)
        {
             ApiResponse<KeeperFile> localVarResponse = await KeeperByProductIdFilesByFileIdGetAsyncWithHttpInfo(fileId, productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFile>> KeeperByProductIdFilesByFileIdGetAsyncWithHttpInfo (string fileId, string productId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdFilesByFileIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesByFileIdGet");

            var localVarPath = "./keeper/{productId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesByFileIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [] Compare a local file to the latest version Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        public BreadcrumbingCompareResponse KeeperByProductIdFilesDiffLatestPost (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = KeeperByProductIdFilesDiffLatestPostWithHttpInfo(fileId, file, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Compare a local file to the latest version Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        public ApiResponse< BreadcrumbingCompareResponse > KeeperByProductIdFilesDiffLatestPostWithHttpInfo (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdFilesDiffLatestPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdFilesDiffLatestPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesDiffLatestPost");

            var localVarPath = "./keeper/{productId}/files/diff/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesDiffLatestPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Compare a local file to the latest version Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperByProductIdFilesDiffLatestPostAsync (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = await KeeperByProductIdFilesDiffLatestPostAsyncWithHttpInfo(fileId, file, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Compare a local file to the latest version Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperByProductIdFilesDiffLatestPostAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdFilesDiffLatestPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdFilesDiffLatestPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesDiffLatestPost");

            var localVarPath = "./keeper/{productId}/files/diff/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesDiffLatestPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Compare a local file to the original version Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        public BreadcrumbingCompareResponse KeeperByProductIdFilesDiffPost (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = KeeperByProductIdFilesDiffPostWithHttpInfo(fileId, file, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Compare a local file to the original version Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        public ApiResponse< BreadcrumbingCompareResponse > KeeperByProductIdFilesDiffPostWithHttpInfo (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdFilesDiffPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdFilesDiffPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesDiffPost");

            var localVarPath = "./keeper/{productId}/files/diff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesDiffPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Compare a local file to the original version Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperByProductIdFilesDiffPostAsync (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = await KeeperByProductIdFilesDiffPostAsyncWithHttpInfo(fileId, file, productId, mustGenerateFileDiff, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Compare a local file to the original version Compare a local file to the original version of a file that&#39;s been stored in the blockchain. We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="mustGenerateFileDiff"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperByProductIdFilesDiffPostAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, bool? mustGenerateFileDiff = null, string request = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdFilesDiffPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdFilesDiffPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesDiffPost");

            var localVarPath = "./keeper/{productId}/files/diff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateFileDiff != null) localVarFormParams.Add("mustGenerateFileDiff", Configuration.ApiClient.ParameterToString(mustGenerateFileDiff)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesDiffPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Check if a file already exists We will verify if we have the fingerprint of the file you sent.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? KeeperByProductIdFilesExistPost (System.IO.Stream file, string productId, string accuracy = null, string request = null)
        {
             ApiResponse<bool?> localVarResponse = KeeperByProductIdFilesExistPostWithHttpInfo(file, productId, accuracy, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Check if a file already exists We will verify if we have the fingerprint of the file you sent.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > KeeperByProductIdFilesExistPostWithHttpInfo (System.IO.Stream file, string productId, string accuracy = null, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdFilesExistPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesExistPost");

            var localVarPath = "./keeper/{productId}/files/exist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesExistPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// [] Check if a file already exists We will verify if we have the fingerprint of the file you sent.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> KeeperByProductIdFilesExistPostAsync (System.IO.Stream file, string productId, string accuracy = null, string request = null)
        {
             ApiResponse<bool?> localVarResponse = await KeeperByProductIdFilesExistPostAsyncWithHttpInfo(file, productId, accuracy, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Check if a file already exists We will verify if we have the fingerprint of the file you sent.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> KeeperByProductIdFilesExistPostAsyncWithHttpInfo (System.IO.Stream file, string productId, string accuracy = null, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdFilesExistPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesExistPost");

            var localVarPath = "./keeper/{productId}/files/exist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesExistPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// [] Get all files Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;KeeperFile&gt;</returns>
        public List<KeeperFile> KeeperByProductIdFilesGet (string productId, string displayName = null, int? limit = null, int? offset = null, string request = null)
        {
             ApiResponse<List<KeeperFile>> localVarResponse = KeeperByProductIdFilesGetWithHttpInfo(productId, displayName, limit, offset, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all files Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFile&gt;</returns>
        public ApiResponse< List<KeeperFile> > KeeperByProductIdFilesGetWithHttpInfo (string productId, string displayName = null, int? limit = null, int? offset = null, string request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesGet");

            var localVarPath = "./keeper/{productId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (displayName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displayName", displayName)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFile>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFile>)));
        }

        /// <summary>
        /// [] Get all files Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFile&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeeperFile>> KeeperByProductIdFilesGetAsync (string productId, string displayName = null, int? limit = null, int? offset = null, string request = null)
        {
             ApiResponse<List<KeeperFile>> localVarResponse = await KeeperByProductIdFilesGetAsyncWithHttpInfo(productId, displayName, limit, offset, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all files Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeeperFile>>> KeeperByProductIdFilesGetAsyncWithHttpInfo (string productId, string displayName = null, int? limit = null, int? offset = null, string request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesGet");

            var localVarPath = "./keeper/{productId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (displayName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displayName", displayName)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFile>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFile>)));
        }

        /// <summary>
        /// [] Create a file This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperFile</returns>
        public KeeperFile KeeperByProductIdFilesPost (System.IO.Stream file, string displayName, string productId, string accuracy = null, string request = null)
        {
             ApiResponse<KeeperFile> localVarResponse = KeeperByProductIdFilesPostWithHttpInfo(file, displayName, productId, accuracy, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Create a file This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperFile</returns>
        public ApiResponse< KeeperFile > KeeperByProductIdFilesPostWithHttpInfo (System.IO.Stream file, string displayName, string productId, string accuracy = null, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdFilesPost");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling KeeperApi->KeeperByProductIdFilesPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesPost");

            var localVarPath = "./keeper/{productId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [] Create a file This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperFile</returns>
        public async System.Threading.Tasks.Task<KeeperFile> KeeperByProductIdFilesPostAsync (System.IO.Stream file, string displayName, string productId, string accuracy = null, string request = null)
        {
             ApiResponse<KeeperFile> localVarResponse = await KeeperByProductIdFilesPostAsyncWithHttpInfo(file, displayName, productId, accuracy, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Create a file This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="accuracy"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFile>> KeeperByProductIdFilesPostAsyncWithHttpInfo (System.IO.Stream file, string displayName, string productId, string accuracy = null, string request = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdFilesPost");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling KeeperApi->KeeperByProductIdFilesPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFilesPost");

            var localVarPath = "./keeper/{productId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", Configuration.ApiClient.ParameterToString(displayName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [] Delete a folder This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns></returns>
        public void KeeperByProductIdFoldersByFolderIdDelete (string productId, string folderId)
        {
             KeeperByProductIdFoldersByFolderIdDeleteWithHttpInfo(productId, folderId);
        }

        /// <summary>
        /// [] Delete a folder This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> KeeperByProductIdFoldersByFolderIdDeleteWithHttpInfo (string productId, string folderId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFoldersByFolderIdDelete");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperByProductIdFoldersByFolderIdDelete");

            var localVarPath = "./keeper/{productId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFoldersByFolderIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Delete a folder This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task KeeperByProductIdFoldersByFolderIdDeleteAsync (string productId, string folderId)
        {
             await KeeperByProductIdFoldersByFolderIdDeleteAsyncWithHttpInfo(productId, folderId);

        }

        /// <summary>
        /// [] Delete a folder This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> KeeperByProductIdFoldersByFolderIdDeleteAsyncWithHttpInfo (string productId, string folderId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFoldersByFolderIdDelete");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperByProductIdFoldersByFolderIdDelete");

            var localVarPath = "./keeper/{productId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFoldersByFolderIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [] Get a specific folder&#39;s details Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>KeeperFolder</returns>
        public KeeperFolder KeeperByProductIdFoldersByFolderIdGet (string productId, string folderId)
        {
             ApiResponse<KeeperFolder> localVarResponse = KeeperByProductIdFoldersByFolderIdGetWithHttpInfo(productId, folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get a specific folder&#39;s details Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        public ApiResponse< KeeperFolder > KeeperByProductIdFoldersByFolderIdGetWithHttpInfo (string productId, string folderId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFoldersByFolderIdGet");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperByProductIdFoldersByFolderIdGet");

            var localVarPath = "./keeper/{productId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFoldersByFolderIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [] Get a specific folder&#39;s details Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of KeeperFolder</returns>
        public async System.Threading.Tasks.Task<KeeperFolder> KeeperByProductIdFoldersByFolderIdGetAsync (string productId, string folderId)
        {
             ApiResponse<KeeperFolder> localVarResponse = await KeeperByProductIdFoldersByFolderIdGetAsyncWithHttpInfo(productId, folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get a specific folder&#39;s details Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> KeeperByProductIdFoldersByFolderIdGetAsyncWithHttpInfo (string productId, string folderId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFoldersByFolderIdGet");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->KeeperByProductIdFoldersByFolderIdGet");

            var localVarPath = "./keeper/{productId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFoldersByFolderIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [] Get all folders Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>List&lt;KeeperFolder&gt;</returns>
        public List<KeeperFolder> KeeperByProductIdFoldersGet (string productId, string name = null)
        {
             ApiResponse<List<KeeperFolder>> localVarResponse = KeeperByProductIdFoldersGetWithHttpInfo(productId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all folders Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFolder&gt;</returns>
        public ApiResponse< List<KeeperFolder> > KeeperByProductIdFoldersGetWithHttpInfo (string productId, string name = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFoldersGet");

            var localVarPath = "./keeper/{productId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFolder>)));
        }

        /// <summary>
        /// [] Get all folders Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeeperFolder>> KeeperByProductIdFoldersGetAsync (string productId, string name = null)
        {
             ApiResponse<List<KeeperFolder>> localVarResponse = await KeeperByProductIdFoldersGetAsyncWithHttpInfo(productId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all folders Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeeperFolder>>> KeeperByProductIdFoldersGetAsyncWithHttpInfo (string productId, string name = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFoldersGet");

            var localVarPath = "./keeper/{productId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFolder>)));
        }

        /// <summary>
        /// [] Create a folder This is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperFolder</returns>
        public KeeperFolder KeeperByProductIdFoldersPost (string productId, KeeperFolderCreateRequest request = null)
        {
             ApiResponse<KeeperFolder> localVarResponse = KeeperByProductIdFoldersPostWithHttpInfo(productId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Create a folder This is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        public ApiResponse< KeeperFolder > KeeperByProductIdFoldersPostWithHttpInfo (string productId, KeeperFolderCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFoldersPost");

            var localVarPath = "./keeper/{productId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [] Create a folder This is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperFolder</returns>
        public async System.Threading.Tasks.Task<KeeperFolder> KeeperByProductIdFoldersPostAsync (string productId, KeeperFolderCreateRequest request = null)
        {
             ApiResponse<KeeperFolder> localVarResponse = await KeeperByProductIdFoldersPostAsyncWithHttpInfo(productId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Create a folder This is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> KeeperByProductIdFoldersPostAsyncWithHttpInfo (string productId, KeeperFolderCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdFoldersPost");

            var localVarPath = "./keeper/{productId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [] Get all the versions&#39; details for a specific file Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>List&lt;KeeperFileVersion&gt;</returns>
        public List<KeeperFileVersion> KeeperByProductIdVersionsByFileIdGet (string fileId, string productId)
        {
             ApiResponse<List<KeeperFileVersion>> localVarResponse = KeeperByProductIdVersionsByFileIdGetWithHttpInfo(fileId, productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Get all the versions&#39; details for a specific file Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of List&lt;KeeperFileVersion&gt;</returns>
        public ApiResponse< List<KeeperFileVersion> > KeeperByProductIdVersionsByFileIdGetWithHttpInfo (string fileId, string productId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdVersionsByFileIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdVersionsByFileIdGet");

            var localVarPath = "./keeper/{productId}/versions/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdVersionsByFileIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFileVersion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFileVersion>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFileVersion>)));
        }

        /// <summary>
        /// [] Get all the versions&#39; details for a specific file Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of List&lt;KeeperFileVersion&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeeperFileVersion>> KeeperByProductIdVersionsByFileIdGetAsync (string fileId, string productId)
        {
             ApiResponse<List<KeeperFileVersion>> localVarResponse = await KeeperByProductIdVersionsByFileIdGetAsyncWithHttpInfo(fileId, productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Get all the versions&#39; details for a specific file Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFileVersion&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeeperFileVersion>>> KeeperByProductIdVersionsByFileIdGetAsyncWithHttpInfo (string fileId, string productId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdVersionsByFileIdGet");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdVersionsByFileIdGet");

            var localVarPath = "./keeper/{productId}/versions/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdVersionsByFileIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFileVersion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<KeeperFileVersion>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFileVersion>)));
        }

        /// <summary>
        /// [] Compare a local file to a specific version We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        public BreadcrumbingCompareResponse KeeperByProductIdVersionsDiffPost (string versionId, string fileId, System.IO.Stream file, string productId, bool? generateDiffFile = null, string request = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = KeeperByProductIdVersionsDiffPostWithHttpInfo(versionId, fileId, file, productId, generateDiffFile, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Compare a local file to a specific version We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        public ApiResponse< BreadcrumbingCompareResponse > KeeperByProductIdVersionsDiffPostWithHttpInfo (string versionId, string fileId, System.IO.Stream file, string productId, bool? generateDiffFile = null, string request = null)
        {
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KeeperApi->KeeperByProductIdVersionsDiffPost");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdVersionsDiffPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdVersionsDiffPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdVersionsDiffPost");

            var localVarPath = "./keeper/{productId}/versions/diff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (versionId != null) localVarFormParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // form parameter
            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (generateDiffFile != null) localVarFormParams.Add("generateDiffFile", Configuration.ApiClient.ParameterToString(generateDiffFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdVersionsDiffPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Compare a local file to a specific version We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<BreadcrumbingCompareResponse> KeeperByProductIdVersionsDiffPostAsync (string versionId, string fileId, System.IO.Stream file, string productId, bool? generateDiffFile = null, string request = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = await KeeperByProductIdVersionsDiffPostAsyncWithHttpInfo(versionId, fileId, file, productId, generateDiffFile, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Compare a local file to a specific version We will compare their  fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId"></param>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="generateDiffFile"> (optional)</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> KeeperByProductIdVersionsDiffPostAsyncWithHttpInfo (string versionId, string fileId, System.IO.Stream file, string productId, bool? generateDiffFile = null, string request = null)
        {
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KeeperApi->KeeperByProductIdVersionsDiffPost");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdVersionsDiffPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdVersionsDiffPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdVersionsDiffPost");

            var localVarPath = "./keeper/{productId}/versions/diff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (versionId != null) localVarFormParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // form parameter
            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (generateDiffFile != null) localVarFormParams.Add("generateDiffFile", Configuration.ApiClient.ParameterToString(generateDiffFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdVersionsDiffPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [] Create a version for an existing file This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperFileVersion</returns>
        public KeeperFileVersion KeeperByProductIdVersionsPost (string fileId, System.IO.Stream file, string productId, string request = null)
        {
             ApiResponse<KeeperFileVersion> localVarResponse = KeeperByProductIdVersionsPostWithHttpInfo(fileId, file, productId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [] Create a version for an existing file This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperFileVersion</returns>
        public ApiResponse< KeeperFileVersion > KeeperByProductIdVersionsPostWithHttpInfo (string fileId, System.IO.Stream file, string productId, string request = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdVersionsPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdVersionsPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdVersionsPost");

            var localVarPath = "./keeper/{productId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdVersionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFileVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFileVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFileVersion)));
        }

        /// <summary>
        /// [] Create a version for an existing file This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperFileVersion</returns>
        public async System.Threading.Tasks.Task<KeeperFileVersion> KeeperByProductIdVersionsPostAsync (string fileId, System.IO.Stream file, string productId, string request = null)
        {
             ApiResponse<KeeperFileVersion> localVarResponse = await KeeperByProductIdVersionsPostAsyncWithHttpInfo(fileId, file, productId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [] Create a version for an existing file This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFileVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFileVersion>> KeeperByProductIdVersionsPostAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, string request = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->KeeperByProductIdVersionsPost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->KeeperByProductIdVersionsPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->KeeperByProductIdVersionsPost");

            var localVarPath = "./keeper/{productId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (request != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "request", request)); // query parameter
            if (fileId != null) localVarFormParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeeperByProductIdVersionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFileVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (KeeperFileVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFileVersion)));
        }

    }
}
