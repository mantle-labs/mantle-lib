/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Mantle.lib
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeeperApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [VERSIONS] Compare a local file to a version
        /// </summary>
        /// <remarks>
        /// It will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        BreadcrumbingCompareResponse CompareVersion (string fileId, string versionId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [VERSIONS] Compare a local file to a version
        /// </summary>
        /// <remarks>
        /// It will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        ApiResponse<BreadcrumbingCompareResponse> CompareVersionWithHttpInfo (string fileId, string versionId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [FILES] Compare a local file to the latest version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        BreadcrumbingCompareResponse CompareWithLatestFileVersion (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [FILES] Compare a local file to the latest version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        ApiResponse<BreadcrumbingCompareResponse> CompareWithLatestFileVersionWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [FILES] Compare a local file to the original version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the original version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        BreadcrumbingCompareResponse CompareWithOriginalFile (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [FILES] Compare a local file to the original version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the original version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        ApiResponse<BreadcrumbingCompareResponse> CompareWithOriginalFileWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [FILES] Create a file
        /// </summary>
        /// <remarks>
        /// This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>KeeperFile</returns>
        KeeperFile CreateFile (string accuracy, System.IO.Stream file, string displayName, string productId, string xApiKey, string folderId = null);

        /// <summary>
        /// [FILES] Create a file
        /// </summary>
        /// <remarks>
        /// This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResponse of KeeperFile</returns>
        ApiResponse<KeeperFile> CreateFileWithHttpInfo (string accuracy, System.IO.Stream file, string displayName, string productId, string xApiKey, string folderId = null);
        /// <summary>
        /// [FOLDERS] Create a folder
        /// </summary>
        /// <remarks>
        /// A folder is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperFolder</returns>
        KeeperFolder CreateFolder (string productId, string xApiKey, KeeperFolderCreateRequest request = null);

        /// <summary>
        /// [FOLDERS] Create a folder
        /// </summary>
        /// <remarks>
        /// A folder is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        ApiResponse<KeeperFolder> CreateFolderWithHttpInfo (string productId, string xApiKey, KeeperFolderCreateRequest request = null);
        /// <summary>
        /// [VERSIONS] Create a version for an existing file
        /// </summary>
        /// <remarks>
        /// This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>KeeperFileVersion</returns>
        KeeperFileVersion CreateVersion (string fileId, System.IO.Stream file, string productId, string xApiKey);

        /// <summary>
        /// [VERSIONS] Create a version for an existing file
        /// </summary>
        /// <remarks>
        /// This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of KeeperFileVersion</returns>
        ApiResponse<KeeperFileVersion> CreateVersionWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey);
        /// <summary>
        /// [FILES] Delete a file
        /// </summary>
        /// <remarks>
        /// Its fingerprint will stay in the blockchain, but it will not be accessible and visible.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void DeleteFileById (string fileId, string productId, string xApiKey);

        /// <summary>
        /// [FILES] Delete a file
        /// </summary>
        /// <remarks>
        /// Its fingerprint will stay in the blockchain, but it will not be accessible and visible.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileByIdWithHttpInfo (string fileId, string productId, string xApiKey);
        /// <summary>
        /// [FOLDERS] Delete a folder
        /// </summary>
        /// <remarks>
        /// This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void DeleteFolder (string productId, string folderId, string xApiKey);

        /// <summary>
        /// [FOLDERS] Delete a folder
        /// </summary>
        /// <remarks>
        /// This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFolderWithHttpInfo (string productId, string folderId, string xApiKey);
        /// <summary>
        /// [FILES] Check if a file already exists
        /// </summary>
        /// <remarks>
        /// Verify if the file&#39;s fingerprint exist.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>bool?</returns>
        bool? DoesFileExist (string accuracy, System.IO.Stream file, string productId, string xApiKey, string folderId = null);

        /// <summary>
        /// [FILES] Check if a file already exists
        /// </summary>
        /// <remarks>
        /// Verify if the file&#39;s fingerprint exist.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> DoesFileExistWithHttpInfo (string accuracy, System.IO.Stream file, string productId, string xApiKey, string folderId = null);
        /// <summary>
        /// [FILES] Get all files
        /// </summary>
        /// <remarks>
        /// Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>List&lt;KeeperFile&gt;</returns>
        List<KeeperFile> GetAllFiles (string productId, string xApiKey, string displayName = null, int? limit = null, int? offset = null, string folderId = null);

        /// <summary>
        /// [FILES] Get all files
        /// </summary>
        /// <remarks>
        /// Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFile&gt;</returns>
        ApiResponse<List<KeeperFile>> GetAllFilesWithHttpInfo (string productId, string xApiKey, string displayName = null, int? limit = null, int? offset = null, string folderId = null);
        /// <summary>
        /// [FOLDERS] Get all folders
        /// </summary>
        /// <remarks>
        /// Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>List&lt;KeeperFolder&gt;</returns>
        List<KeeperFolder> GetAllFolders (string productId, string xApiKey, string name = null);

        /// <summary>
        /// [FOLDERS] Get all folders
        /// </summary>
        /// <remarks>
        /// Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFolder&gt;</returns>
        ApiResponse<List<KeeperFolder>> GetAllFoldersWithHttpInfo (string productId, string xApiKey, string name = null);
        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a file
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>List&lt;KeeperFileVersion&gt;</returns>
        List<KeeperFileVersion> GetAllVersions (string fileId, string productId, string xApiKey);

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a file
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of List&lt;KeeperFileVersion&gt;</returns>
        ApiResponse<List<KeeperFileVersion>> GetAllVersionsWithHttpInfo (string fileId, string productId, string xApiKey);
        /// <summary>
        /// [FILES] Get a file&#39;s details.
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>KeeperFile</returns>
        KeeperFile GetFileById (string fileId, string productId, string xApiKey);

        /// <summary>
        /// [FILES] Get a file&#39;s details.
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of KeeperFile</returns>
        ApiResponse<KeeperFile> GetFileByIdWithHttpInfo (string fileId, string productId, string xApiKey);
        /// <summary>
        /// [FOLDERS] Get folder details
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>KeeperFolder</returns>
        KeeperFolder GetFolderById (string productId, string folderId, string xApiKey);

        /// <summary>
        /// [FOLDERS] Get folder details
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        ApiResponse<KeeperFolder> GetFolderByIdWithHttpInfo (string productId, string folderId, string xApiKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [VERSIONS] Compare a local file to a version
        /// </summary>
        /// <remarks>
        /// It will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<BreadcrumbingCompareResponse> CompareVersionAsync (string fileId, string versionId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [VERSIONS] Compare a local file to a version
        /// </summary>
        /// <remarks>
        /// It will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> CompareVersionAsyncWithHttpInfo (string fileId, string versionId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [FILES] Compare a local file to the latest version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<BreadcrumbingCompareResponse> CompareWithLatestFileVersionAsync (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [FILES] Compare a local file to the latest version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> CompareWithLatestFileVersionAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [FILES] Compare a local file to the original version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the original version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        System.Threading.Tasks.Task<BreadcrumbingCompareResponse> CompareWithOriginalFileAsync (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);

        /// <summary>
        /// [FILES] Compare a local file to the original version
        /// </summary>
        /// <remarks>
        /// Compare a local file to the original version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> CompareWithOriginalFileAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null);
        /// <summary>
        /// [FILES] Create a file
        /// </summary>
        /// <remarks>
        /// This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of KeeperFile</returns>
        System.Threading.Tasks.Task<KeeperFile> CreateFileAsync (string accuracy, System.IO.Stream file, string displayName, string productId, string xApiKey, string folderId = null);

        /// <summary>
        /// [FILES] Create a file
        /// </summary>
        /// <remarks>
        /// This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFile>> CreateFileAsyncWithHttpInfo (string accuracy, System.IO.Stream file, string displayName, string productId, string xApiKey, string folderId = null);
        /// <summary>
        /// [FOLDERS] Create a folder
        /// </summary>
        /// <remarks>
        /// A folder is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperFolder</returns>
        System.Threading.Tasks.Task<KeeperFolder> CreateFolderAsync (string productId, string xApiKey, KeeperFolderCreateRequest request = null);

        /// <summary>
        /// [FOLDERS] Create a folder
        /// </summary>
        /// <remarks>
        /// A folder is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> CreateFolderAsyncWithHttpInfo (string productId, string xApiKey, KeeperFolderCreateRequest request = null);
        /// <summary>
        /// [VERSIONS] Create a version for an existing file
        /// </summary>
        /// <remarks>
        /// This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of KeeperFileVersion</returns>
        System.Threading.Tasks.Task<KeeperFileVersion> CreateVersionAsync (string fileId, System.IO.Stream file, string productId, string xApiKey);

        /// <summary>
        /// [VERSIONS] Create a version for an existing file
        /// </summary>
        /// <remarks>
        /// This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (KeeperFileVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFileVersion>> CreateVersionAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey);
        /// <summary>
        /// [FILES] Delete a file
        /// </summary>
        /// <remarks>
        /// Its fingerprint will stay in the blockchain, but it will not be accessible and visible.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileByIdAsync (string fileId, string productId, string xApiKey);

        /// <summary>
        /// [FILES] Delete a file
        /// </summary>
        /// <remarks>
        /// Its fingerprint will stay in the blockchain, but it will not be accessible and visible.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileByIdAsyncWithHttpInfo (string fileId, string productId, string xApiKey);
        /// <summary>
        /// [FOLDERS] Delete a folder
        /// </summary>
        /// <remarks>
        /// This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFolderAsync (string productId, string folderId, string xApiKey);

        /// <summary>
        /// [FOLDERS] Delete a folder
        /// </summary>
        /// <remarks>
        /// This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFolderAsyncWithHttpInfo (string productId, string folderId, string xApiKey);
        /// <summary>
        /// [FILES] Check if a file already exists
        /// </summary>
        /// <remarks>
        /// Verify if the file&#39;s fingerprint exist.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> DoesFileExistAsync (string accuracy, System.IO.Stream file, string productId, string xApiKey, string folderId = null);

        /// <summary>
        /// [FILES] Check if a file already exists
        /// </summary>
        /// <remarks>
        /// Verify if the file&#39;s fingerprint exist.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> DoesFileExistAsyncWithHttpInfo (string accuracy, System.IO.Stream file, string productId, string xApiKey, string folderId = null);
        /// <summary>
        /// [FILES] Get all files
        /// </summary>
        /// <remarks>
        /// Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFile&gt;</returns>
        System.Threading.Tasks.Task<List<KeeperFile>> GetAllFilesAsync (string productId, string xApiKey, string displayName = null, int? limit = null, int? offset = null, string folderId = null);

        /// <summary>
        /// [FILES] Get all files
        /// </summary>
        /// <remarks>
        /// Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeeperFile>>> GetAllFilesAsyncWithHttpInfo (string productId, string xApiKey, string displayName = null, int? limit = null, int? offset = null, string folderId = null);
        /// <summary>
        /// [FOLDERS] Get all folders
        /// </summary>
        /// <remarks>
        /// Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFolder&gt;</returns>
        System.Threading.Tasks.Task<List<KeeperFolder>> GetAllFoldersAsync (string productId, string xApiKey, string name = null);

        /// <summary>
        /// [FOLDERS] Get all folders
        /// </summary>
        /// <remarks>
        /// Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeeperFolder>>> GetAllFoldersAsyncWithHttpInfo (string productId, string xApiKey, string name = null);
        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a file
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of List&lt;KeeperFileVersion&gt;</returns>
        System.Threading.Tasks.Task<List<KeeperFileVersion>> GetAllVersionsAsync (string fileId, string productId, string xApiKey);

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a file
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFileVersion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeeperFileVersion>>> GetAllVersionsAsyncWithHttpInfo (string fileId, string productId, string xApiKey);
        /// <summary>
        /// [FILES] Get a file&#39;s details.
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of KeeperFile</returns>
        System.Threading.Tasks.Task<KeeperFile> GetFileByIdAsync (string fileId, string productId, string xApiKey);

        /// <summary>
        /// [FILES] Get a file&#39;s details.
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFile>> GetFileByIdAsyncWithHttpInfo (string fileId, string productId, string xApiKey);
        /// <summary>
        /// [FOLDERS] Get folder details
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of KeeperFolder</returns>
        System.Threading.Tasks.Task<KeeperFolder> GetFolderByIdAsync (string productId, string folderId, string xApiKey);

        /// <summary>
        /// [FOLDERS] Get folder details
        /// </summary>
        /// <remarks>
        /// Requires the Keeper Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> GetFolderByIdAsyncWithHttpInfo (string productId, string folderId, string xApiKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KeeperApi : IKeeperApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeeperApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeeperApi(String basePath)
        {
            this.Configuration = new mantle.lib.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeeperApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeeperApi(mantle.lib.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mantle.lib.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mantle.lib.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [VERSIONS] Compare a local file to a version It will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        public BreadcrumbingCompareResponse CompareVersion (string fileId, string versionId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = CompareVersionWithHttpInfo(fileId, versionId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [VERSIONS] Compare a local file to a version It will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        public ApiResponse< BreadcrumbingCompareResponse > CompareVersionWithHttpInfo (string fileId, string versionId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->CompareVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KeeperApi->CompareVersion");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->CompareVersion");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CompareVersion");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CompareVersion");

            var localVarPath = "/keeper/{productId}/files/{fileId}/versions/compare/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", this.Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [VERSIONS] Compare a local file to a version It will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<BreadcrumbingCompareResponse> CompareVersionAsync (string fileId, string versionId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = await CompareVersionAsyncWithHttpInfo(fileId, versionId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [VERSIONS] Compare a local file to a version It will compare their fingerprint against each other to find the differences.  The GenerateDiffFile property is false by default, and if it is set to true and the file to compare&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="versionId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> CompareVersionAsyncWithHttpInfo (string fileId, string versionId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->CompareVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling KeeperApi->CompareVersion");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->CompareVersion");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CompareVersion");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CompareVersion");

            var localVarPath = "/keeper/{productId}/files/{fileId}/versions/compare/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", this.Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [FILES] Compare a local file to the latest version Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        public BreadcrumbingCompareResponse CompareWithLatestFileVersion (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = CompareWithLatestFileVersionWithHttpInfo(fileId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Compare a local file to the latest version Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        public ApiResponse< BreadcrumbingCompareResponse > CompareWithLatestFileVersionWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->CompareWithLatestFileVersion");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->CompareWithLatestFileVersion");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CompareWithLatestFileVersion");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CompareWithLatestFileVersion");

            var localVarPath = "/keeper/{productId}/files/{fileId}/compare/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", this.Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareWithLatestFileVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [FILES] Compare a local file to the latest version Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<BreadcrumbingCompareResponse> CompareWithLatestFileVersionAsync (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = await CompareWithLatestFileVersionAsyncWithHttpInfo(fileId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Compare a local file to the latest version Compare a local file to the latest version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> CompareWithLatestFileVersionAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->CompareWithLatestFileVersion");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->CompareWithLatestFileVersion");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CompareWithLatestFileVersion");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CompareWithLatestFileVersion");

            var localVarPath = "/keeper/{productId}/files/{fileId}/compare/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", this.Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareWithLatestFileVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [FILES] Compare a local file to the original version Compare a local file to the original version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>BreadcrumbingCompareResponse</returns>
        public BreadcrumbingCompareResponse CompareWithOriginalFile (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = CompareWithOriginalFileWithHttpInfo(fileId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Compare a local file to the original version Compare a local file to the original version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>ApiResponse of BreadcrumbingCompareResponse</returns>
        public ApiResponse< BreadcrumbingCompareResponse > CompareWithOriginalFileWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->CompareWithOriginalFile");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->CompareWithOriginalFile");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CompareWithOriginalFile");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CompareWithOriginalFile");

            var localVarPath = "/keeper/{productId}/files/{fileId}/compare/original";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", this.Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareWithOriginalFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [FILES] Compare a local file to the original version Compare a local file to the original version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of BreadcrumbingCompareResponse</returns>
        public async System.Threading.Tasks.Task<BreadcrumbingCompareResponse> CompareWithOriginalFileAsync (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
             ApiResponse<BreadcrumbingCompareResponse> localVarResponse = await CompareWithOriginalFileAsyncWithHttpInfo(fileId, file, productId, xApiKey, mustGenerateCompareResult);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Compare a local file to the original version Compare a local file to the original version of a file that&#39;s been stored in the blockchain. It will compare their  fingerprint against each other to find the differences.  The MustGenerateCompareResult property is false by default, and if it is set to true and the file&#39;s type is  either Text, JSON or an image, then a file highlighting the differences will be generated.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mustGenerateCompareResult"> (optional)</param>
        /// <returns>Task of ApiResponse (BreadcrumbingCompareResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreadcrumbingCompareResponse>> CompareWithOriginalFileAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey, bool? mustGenerateCompareResult = null)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->CompareWithOriginalFile");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->CompareWithOriginalFile");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CompareWithOriginalFile");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CompareWithOriginalFile");

            var localVarPath = "/keeper/{productId}/files/{fileId}/compare/original";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (mustGenerateCompareResult != null) localVarFormParams.Add("mustGenerateCompareResult", this.Configuration.ApiClient.ParameterToString(mustGenerateCompareResult)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompareWithOriginalFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreadcrumbingCompareResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreadcrumbingCompareResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreadcrumbingCompareResponse)));
        }

        /// <summary>
        /// [FILES] Create a file This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>KeeperFile</returns>
        public KeeperFile CreateFile (string accuracy, System.IO.Stream file, string displayName, string productId, string xApiKey, string folderId = null)
        {
             ApiResponse<KeeperFile> localVarResponse = CreateFileWithHttpInfo(accuracy, file, displayName, productId, xApiKey, folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Create a file This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResponse of KeeperFile</returns>
        public ApiResponse< KeeperFile > CreateFileWithHttpInfo (string accuracy, System.IO.Stream file, string displayName, string productId, string xApiKey, string folderId = null)
        {
            // verify the required parameter 'accuracy' is set
            if (accuracy == null)
                throw new ApiException(400, "Missing required parameter 'accuracy' when calling KeeperApi->CreateFile");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->CreateFile");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling KeeperApi->CreateFile");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CreateFile");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CreateFile");

            var localVarPath = "/keeper/{productId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", this.Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", this.Configuration.ApiClient.ParameterToString(displayName)); // form parameter
            if (folderId != null) localVarFormParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [FILES] Create a file This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of KeeperFile</returns>
        public async System.Threading.Tasks.Task<KeeperFile> CreateFileAsync (string accuracy, System.IO.Stream file, string displayName, string productId, string xApiKey, string folderId = null)
        {
             ApiResponse<KeeperFile> localVarResponse = await CreateFileAsyncWithHttpInfo(accuracy, file, displayName, productId, xApiKey, folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Create a file This will create a cryptographic representation of the file and store its fingerprint in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="displayName"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFile>> CreateFileAsyncWithHttpInfo (string accuracy, System.IO.Stream file, string displayName, string productId, string xApiKey, string folderId = null)
        {
            // verify the required parameter 'accuracy' is set
            if (accuracy == null)
                throw new ApiException(400, "Missing required parameter 'accuracy' when calling KeeperApi->CreateFile");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->CreateFile");
            // verify the required parameter 'displayName' is set
            if (displayName == null)
                throw new ApiException(400, "Missing required parameter 'displayName' when calling KeeperApi->CreateFile");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CreateFile");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CreateFile");

            var localVarPath = "/keeper/{productId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", this.Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (displayName != null) localVarFormParams.Add("displayName", this.Configuration.ApiClient.ParameterToString(displayName)); // form parameter
            if (folderId != null) localVarFormParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [FOLDERS] Create a folder A folder is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>KeeperFolder</returns>
        public KeeperFolder CreateFolder (string productId, string xApiKey, KeeperFolderCreateRequest request = null)
        {
             ApiResponse<KeeperFolder> localVarResponse = CreateFolderWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FOLDERS] Create a folder A folder is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        public ApiResponse< KeeperFolder > CreateFolderWithHttpInfo (string productId, string xApiKey, KeeperFolderCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CreateFolder");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CreateFolder");

            var localVarPath = "/keeper/{productId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperFolder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [FOLDERS] Create a folder A folder is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of KeeperFolder</returns>
        public async System.Threading.Tasks.Task<KeeperFolder> CreateFolderAsync (string productId, string xApiKey, KeeperFolderCreateRequest request = null)
        {
             ApiResponse<KeeperFolder> localVarResponse = await CreateFolderAsyncWithHttpInfo(productId, xApiKey, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FOLDERS] Create a folder A folder is necessary to add files in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> CreateFolderAsyncWithHttpInfo (string productId, string xApiKey, KeeperFolderCreateRequest request = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CreateFolder");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CreateFolder");

            var localVarPath = "/keeper/{productId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperFolder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [VERSIONS] Create a version for an existing file This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>KeeperFileVersion</returns>
        public KeeperFileVersion CreateVersion (string fileId, System.IO.Stream file, string productId, string xApiKey)
        {
             ApiResponse<KeeperFileVersion> localVarResponse = CreateVersionWithHttpInfo(fileId, file, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [VERSIONS] Create a version for an existing file This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of KeeperFileVersion</returns>
        public ApiResponse< KeeperFileVersion > CreateVersionWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->CreateVersion");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->CreateVersion");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CreateVersion");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CreateVersion");

            var localVarPath = "/keeper/{productId}/files/{fileId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFileVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperFileVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFileVersion)));
        }

        /// <summary>
        /// [VERSIONS] Create a version for an existing file This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of KeeperFileVersion</returns>
        public async System.Threading.Tasks.Task<KeeperFileVersion> CreateVersionAsync (string fileId, System.IO.Stream file, string productId, string xApiKey)
        {
             ApiResponse<KeeperFileVersion> localVarResponse = await CreateVersionAsyncWithHttpInfo(fileId, file, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [VERSIONS] Create a version for an existing file This new version will also have its fingerprint stored in the blockchain.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (KeeperFileVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFileVersion>> CreateVersionAsyncWithHttpInfo (string fileId, System.IO.Stream file, string productId, string xApiKey)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->CreateVersion");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->CreateVersion");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->CreateVersion");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->CreateVersion");

            var localVarPath = "/keeper/{productId}/files/{fileId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFileVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperFileVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFileVersion)));
        }

        /// <summary>
        /// [FILES] Delete a file Its fingerprint will stay in the blockchain, but it will not be accessible and visible.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void DeleteFileById (string fileId, string productId, string xApiKey)
        {
             DeleteFileByIdWithHttpInfo(fileId, productId, xApiKey);
        }

        /// <summary>
        /// [FILES] Delete a file Its fingerprint will stay in the blockchain, but it will not be accessible and visible.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFileByIdWithHttpInfo (string fileId, string productId, string xApiKey)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->DeleteFileById");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->DeleteFileById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->DeleteFileById");

            var localVarPath = "/keeper/{productId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFileById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [FILES] Delete a file Its fingerprint will stay in the blockchain, but it will not be accessible and visible.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileByIdAsync (string fileId, string productId, string xApiKey)
        {
             await DeleteFileByIdAsyncWithHttpInfo(fileId, productId, xApiKey);

        }

        /// <summary>
        /// [FILES] Delete a file Its fingerprint will stay in the blockchain, but it will not be accessible and visible.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileByIdAsyncWithHttpInfo (string fileId, string productId, string xApiKey)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->DeleteFileById");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->DeleteFileById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->DeleteFileById");

            var localVarPath = "/keeper/{productId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFileById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [FOLDERS] Delete a folder This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void DeleteFolder (string productId, string folderId, string xApiKey)
        {
             DeleteFolderWithHttpInfo(productId, folderId, xApiKey);
        }

        /// <summary>
        /// [FOLDERS] Delete a folder This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFolderWithHttpInfo (string productId, string folderId, string xApiKey)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->DeleteFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->DeleteFolder");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->DeleteFolder");

            var localVarPath = "/keeper/{productId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [FOLDERS] Delete a folder This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFolderAsync (string productId, string folderId, string xApiKey)
        {
             await DeleteFolderAsyncWithHttpInfo(productId, folderId, xApiKey);

        }

        /// <summary>
        /// [FOLDERS] Delete a folder This will also delete all the files it contains.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFolderAsyncWithHttpInfo (string productId, string folderId, string xApiKey)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->DeleteFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->DeleteFolder");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->DeleteFolder");

            var localVarPath = "/keeper/{productId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// [FILES] Check if a file already exists Verify if the file&#39;s fingerprint exist.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? DoesFileExist (string accuracy, System.IO.Stream file, string productId, string xApiKey, string folderId = null)
        {
             ApiResponse<bool?> localVarResponse = DoesFileExistWithHttpInfo(accuracy, file, productId, xApiKey, folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Check if a file already exists Verify if the file&#39;s fingerprint exist.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > DoesFileExistWithHttpInfo (string accuracy, System.IO.Stream file, string productId, string xApiKey, string folderId = null)
        {
            // verify the required parameter 'accuracy' is set
            if (accuracy == null)
                throw new ApiException(400, "Missing required parameter 'accuracy' when calling KeeperApi->DoesFileExist");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->DoesFileExist");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->DoesFileExist");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->DoesFileExist");

            var localVarPath = "/keeper/{productId}/files/exist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", this.Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (folderId != null) localVarFormParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoesFileExist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// [FILES] Check if a file already exists Verify if the file&#39;s fingerprint exist.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> DoesFileExistAsync (string accuracy, System.IO.Stream file, string productId, string xApiKey, string folderId = null)
        {
             ApiResponse<bool?> localVarResponse = await DoesFileExistAsyncWithHttpInfo(accuracy, file, productId, xApiKey, folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Check if a file already exists Verify if the file&#39;s fingerprint exist.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accuracy"></param>
        /// <param name="file">The file to upload. How http file upload works: https://goo.gl/UYQ2nX</param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> DoesFileExistAsyncWithHttpInfo (string accuracy, System.IO.Stream file, string productId, string xApiKey, string folderId = null)
        {
            // verify the required parameter 'accuracy' is set
            if (accuracy == null)
                throw new ApiException(400, "Missing required parameter 'accuracy' when calling KeeperApi->DoesFileExist");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling KeeperApi->DoesFileExist");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->DoesFileExist");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->DoesFileExist");

            var localVarPath = "/keeper/{productId}/files/exist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (accuracy != null) localVarFormParams.Add("accuracy", this.Configuration.ApiClient.ParameterToString(accuracy)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (folderId != null) localVarFormParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoesFileExist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// [FILES] Get all files Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>List&lt;KeeperFile&gt;</returns>
        public List<KeeperFile> GetAllFiles (string productId, string xApiKey, string displayName = null, int? limit = null, int? offset = null, string folderId = null)
        {
             ApiResponse<List<KeeperFile>> localVarResponse = GetAllFilesWithHttpInfo(productId, xApiKey, displayName, limit, offset, folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Get all files Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFile&gt;</returns>
        public ApiResponse< List<KeeperFile> > GetAllFilesWithHttpInfo (string productId, string xApiKey, string displayName = null, int? limit = null, int? offset = null, string folderId = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->GetAllFiles");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->GetAllFiles");

            var localVarPath = "/keeper/{productId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (displayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayName", displayName)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeeperFile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFile>)));
        }

        /// <summary>
        /// [FILES] Get all files Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFile&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeeperFile>> GetAllFilesAsync (string productId, string xApiKey, string displayName = null, int? limit = null, int? offset = null, string folderId = null)
        {
             ApiResponse<List<KeeperFile>> localVarResponse = await GetAllFilesAsyncWithHttpInfo(productId, xApiKey, displayName, limit, offset, folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Get all files Get all the files stored in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="displayName"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeeperFile>>> GetAllFilesAsyncWithHttpInfo (string productId, string xApiKey, string displayName = null, int? limit = null, int? offset = null, string folderId = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->GetAllFiles");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->GetAllFiles");

            var localVarPath = "/keeper/{productId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (displayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayName", displayName)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeeperFile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFile>)));
        }

        /// <summary>
        /// [FOLDERS] Get all folders Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>List&lt;KeeperFolder&gt;</returns>
        public List<KeeperFolder> GetAllFolders (string productId, string xApiKey, string name = null)
        {
             ApiResponse<List<KeeperFolder>> localVarResponse = GetAllFoldersWithHttpInfo(productId, xApiKey, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FOLDERS] Get all folders Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of List&lt;KeeperFolder&gt;</returns>
        public ApiResponse< List<KeeperFolder> > GetAllFoldersWithHttpInfo (string productId, string xApiKey, string name = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->GetAllFolders");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->GetAllFolders");

            var localVarPath = "/keeper/{productId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeeperFolder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFolder>)));
        }

        /// <summary>
        /// [FOLDERS] Get all folders Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of List&lt;KeeperFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeeperFolder>> GetAllFoldersAsync (string productId, string xApiKey, string name = null)
        {
             ApiResponse<List<KeeperFolder>> localVarResponse = await GetAllFoldersAsyncWithHttpInfo(productId, xApiKey, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FOLDERS] Get all folders Get all folders that have been created in Keeper.                Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeeperFolder>>> GetAllFoldersAsyncWithHttpInfo (string productId, string xApiKey, string name = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->GetAllFolders");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->GetAllFolders");

            var localVarPath = "/keeper/{productId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeeperFolder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFolder>)));
        }

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a file Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>List&lt;KeeperFileVersion&gt;</returns>
        public List<KeeperFileVersion> GetAllVersions (string fileId, string productId, string xApiKey)
        {
             ApiResponse<List<KeeperFileVersion>> localVarResponse = GetAllVersionsWithHttpInfo(fileId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a file Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of List&lt;KeeperFileVersion&gt;</returns>
        public ApiResponse< List<KeeperFileVersion> > GetAllVersionsWithHttpInfo (string fileId, string productId, string xApiKey)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->GetAllVersions");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->GetAllVersions");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->GetAllVersions");

            var localVarPath = "/keeper/{productId}/files/{fileId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFileVersion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeeperFileVersion>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFileVersion>)));
        }

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a file Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of List&lt;KeeperFileVersion&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeeperFileVersion>> GetAllVersionsAsync (string fileId, string productId, string xApiKey)
        {
             ApiResponse<List<KeeperFileVersion>> localVarResponse = await GetAllVersionsAsyncWithHttpInfo(fileId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [VERSIONS] Get all the versions&#39; details for a file Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (List&lt;KeeperFileVersion&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeeperFileVersion>>> GetAllVersionsAsyncWithHttpInfo (string fileId, string productId, string xApiKey)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->GetAllVersions");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->GetAllVersions");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->GetAllVersions");

            var localVarPath = "/keeper/{productId}/files/{fileId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeeperFileVersion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeeperFileVersion>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeeperFileVersion>)));
        }

        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>KeeperFile</returns>
        public KeeperFile GetFileById (string fileId, string productId, string xApiKey)
        {
             ApiResponse<KeeperFile> localVarResponse = GetFileByIdWithHttpInfo(fileId, productId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of KeeperFile</returns>
        public ApiResponse< KeeperFile > GetFileByIdWithHttpInfo (string fileId, string productId, string xApiKey)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->GetFileById");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->GetFileById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->GetFileById");

            var localVarPath = "/keeper/{productId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of KeeperFile</returns>
        public async System.Threading.Tasks.Task<KeeperFile> GetFileByIdAsync (string fileId, string productId, string xApiKey)
        {
             ApiResponse<KeeperFile> localVarResponse = await GetFileByIdAsyncWithHttpInfo(fileId, productId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FILES] Get a file&#39;s details. Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="productId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (KeeperFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFile>> GetFileByIdAsyncWithHttpInfo (string fileId, string productId, string xApiKey)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling KeeperApi->GetFileById");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->GetFileById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->GetFileById");

            var localVarPath = "/keeper/{productId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileId != null) localVarPathParams.Add("fileId", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFile)));
        }

        /// <summary>
        /// [FOLDERS] Get folder details Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>KeeperFolder</returns>
        public KeeperFolder GetFolderById (string productId, string folderId, string xApiKey)
        {
             ApiResponse<KeeperFolder> localVarResponse = GetFolderByIdWithHttpInfo(productId, folderId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [FOLDERS] Get folder details Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of KeeperFolder</returns>
        public ApiResponse< KeeperFolder > GetFolderByIdWithHttpInfo (string productId, string folderId, string xApiKey)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->GetFolderById");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->GetFolderById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->GetFolderById");

            var localVarPath = "/keeper/{productId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperFolder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

        /// <summary>
        /// [FOLDERS] Get folder details Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of KeeperFolder</returns>
        public async System.Threading.Tasks.Task<KeeperFolder> GetFolderByIdAsync (string productId, string folderId, string xApiKey)
        {
             ApiResponse<KeeperFolder> localVarResponse = await GetFolderByIdAsyncWithHttpInfo(productId, folderId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [FOLDERS] Get folder details Requires the Keeper Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="folderId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (KeeperFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeeperFolder>> GetFolderByIdAsyncWithHttpInfo (string productId, string folderId, string xApiKey)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling KeeperApi->GetFolderById");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling KeeperApi->GetFolderById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling KeeperApi->GetFolderById");

            var localVarPath = "/keeper/{productId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeeperFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeeperFolder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeeperFolder)));
        }

    }
}
