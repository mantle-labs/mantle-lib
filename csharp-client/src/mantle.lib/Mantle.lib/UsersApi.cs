/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using mantle.lib.Client;
using mantle.lib.Model;

namespace mantle.lib.Mantle.lib
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a specific user. This will prevent this user from accessing the platform and will delete their API key if  they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void DeleteUser (string userId, string xApiKey);

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a specific user. This will prevent this user from accessing the platform and will delete their API key if  they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (string userId, string xApiKey);
        /// <summary>
        /// Disable a user
        /// </summary>
        /// <remarks>
        /// This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void DisableUser (string userId, string xApiKey);

        /// <summary>
        /// Disable a user
        /// </summary>
        /// <remarks>
        /// This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisableUserWithHttpInfo (string userId, string xApiKey);
        /// <summary>
        /// Edit a user&#39;s details
        /// </summary>
        /// <remarks>
        /// If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        void EditUser (string userId, string xApiKey, EditUserRequest request = null);

        /// <summary>
        /// Edit a user&#39;s details
        /// </summary>
        /// <remarks>
        /// If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditUserWithHttpInfo (string userId, string xApiKey, EditUserRequest request = null);
        /// <summary>
        /// Enable a user
        /// </summary>
        /// <remarks>
        /// This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        void EnableUser (string userId, string xApiKey);

        /// <summary>
        /// Enable a user
        /// </summary>
        /// <remarks>
        /// This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnableUserWithHttpInfo (string userId, string xApiKey);
        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// <remarks>
        /// Details on the authenticated user                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>User</returns>
        User Get (string xApiKey);

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// <remarks>
        /// Details on the authenticated user                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetWithHttpInfo (string xApiKey);
        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetAllUsers (string xApiKey, bool? isEnabled = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetAllUsersWithHttpInfo (string xApiKey, bool? isEnabled = null, int? limit = null, int? offset = null);
        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get a specific user&#39;s details.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>User</returns>
        User GetUserById (string userId, string xApiKey);

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get a specific user&#39;s details.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserByIdWithHttpInfo (string userId, string xApiKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a specific user. This will prevent this user from accessing the platform and will delete their API key if  they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (string userId, string xApiKey);

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a specific user. This will prevent this user from accessing the platform and will delete their API key if  they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string userId, string xApiKey);
        /// <summary>
        /// Disable a user
        /// </summary>
        /// <remarks>
        /// This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisableUserAsync (string userId, string xApiKey);

        /// <summary>
        /// Disable a user
        /// </summary>
        /// <remarks>
        /// This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisableUserAsyncWithHttpInfo (string userId, string xApiKey);
        /// <summary>
        /// Edit a user&#39;s details
        /// </summary>
        /// <remarks>
        /// If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditUserAsync (string userId, string xApiKey, EditUserRequest request = null);

        /// <summary>
        /// Edit a user&#39;s details
        /// </summary>
        /// <remarks>
        /// If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditUserAsyncWithHttpInfo (string userId, string xApiKey, EditUserRequest request = null);
        /// <summary>
        /// Enable a user
        /// </summary>
        /// <remarks>
        /// This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnableUserAsync (string userId, string xApiKey);

        /// <summary>
        /// Enable a user
        /// </summary>
        /// <remarks>
        /// This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnableUserAsyncWithHttpInfo (string userId, string xApiKey);
        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// <remarks>
        /// Details on the authenticated user                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetAsync (string xApiKey);

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// <remarks>
        /// Details on the authenticated user                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetAsyncWithHttpInfo (string xApiKey);
        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetAllUsersAsync (string xApiKey, bool? isEnabled = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetAllUsersAsyncWithHttpInfo (string xApiKey, bool? isEnabled = null, int? limit = null, int? offset = null);
        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get a specific user&#39;s details.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserByIdAsync (string userId, string xApiKey);

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get a specific user&#39;s details.                Requires the User Admin Role.
        /// </remarks>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserByIdAsyncWithHttpInfo (string userId, string xApiKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private mantle.lib.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new mantle.lib.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(mantle.lib.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mantle.lib.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mantle.lib.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mantle.lib.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mantle.lib.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a user Delete a specific user. This will prevent this user from accessing the platform and will delete their API key if  they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void DeleteUser (string userId, string xApiKey)
        {
             DeleteUserWithHttpInfo(userId, xApiKey);
        }

        /// <summary>
        /// Delete a user Delete a specific user. This will prevent this user from accessing the platform and will delete their API key if  they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserWithHttpInfo (string userId, string xApiKey)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->DeleteUser");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user Delete a specific user. This will prevent this user from accessing the platform and will delete their API key if  they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (string userId, string xApiKey)
        {
             await DeleteUserAsyncWithHttpInfo(userId, xApiKey);

        }

        /// <summary>
        /// Delete a user Delete a specific user. This will prevent this user from accessing the platform and will delete their API key if  they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string userId, string xApiKey)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->DeleteUser");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disable a user This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void DisableUser (string userId, string xApiKey)
        {
             DisableUserWithHttpInfo(userId, xApiKey);
        }

        /// <summary>
        /// Disable a user This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisableUserWithHttpInfo (string userId, string xApiKey)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->DisableUser");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->DisableUser");

            var localVarPath = "/users/{userId}/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disable a user This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisableUserAsync (string userId, string xApiKey)
        {
             await DisableUserAsyncWithHttpInfo(userId, xApiKey);

        }

        /// <summary>
        /// Disable a user This will prevent this user from accessing the platform and will delete their API key if they had one.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisableUserAsyncWithHttpInfo (string userId, string xApiKey)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->DisableUser");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->DisableUser");

            var localVarPath = "/users/{userId}/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a user&#39;s details If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns></returns>
        public void EditUser (string userId, string xApiKey, EditUserRequest request = null)
        {
             EditUserWithHttpInfo(userId, xApiKey, request);
        }

        /// <summary>
        /// Edit a user&#39;s details If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditUserWithHttpInfo (string userId, string xApiKey, EditUserRequest request = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->EditUser");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->EditUser");

            var localVarPath = "/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a user&#39;s details If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditUserAsync (string userId, string xApiKey, EditUserRequest request = null)
        {
             await EditUserAsyncWithHttpInfo(userId, xApiKey, request);

        }

        /// <summary>
        /// Edit a user&#39;s details If their roles are changed, it will also delete their access token and they will need to login again next time.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditUserAsyncWithHttpInfo (string userId, string xApiKey, EditUserRequest request = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->EditUser");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->EditUser");

            var localVarPath = "/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enable a user This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns></returns>
        public void EnableUser (string userId, string xApiKey)
        {
             EnableUserWithHttpInfo(userId, xApiKey);
        }

        /// <summary>
        /// Enable a user This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EnableUserWithHttpInfo (string userId, string xApiKey)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->EnableUser");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->EnableUser");

            var localVarPath = "/users/{userId}/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enable a user This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnableUserAsync (string userId, string xApiKey)
        {
             await EnableUserAsyncWithHttpInfo(userId, xApiKey);

        }

        /// <summary>
        /// Enable a user This will let this user access the platform again. If the user needs an API key, it will need to be regenerated.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnableUserAsyncWithHttpInfo (string userId, string xApiKey)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->EnableUser");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->EnableUser");

            var localVarPath = "/users/{userId}/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the authenticated user Details on the authenticated user                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>User</returns>
        public User Get (string xApiKey)
        {
             ApiResponse<User> localVarResponse = GetWithHttpInfo(xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authenticated user Details on the authenticated user                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetWithHttpInfo (string xApiKey)
        {
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->Get");

            var localVarPath = "/users/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get the authenticated user Details on the authenticated user                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetAsync (string xApiKey)
        {
             ApiResponse<User> localVarResponse = await GetAsyncWithHttpInfo(xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the authenticated user Details on the authenticated user                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetAsyncWithHttpInfo (string xApiKey)
        {
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->Get");

            var localVarPath = "/users/self";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get all users Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetAllUsers (string xApiKey, bool? isEnabled = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<User>> localVarResponse = GetAllUsersWithHttpInfo(xApiKey, isEnabled, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all users Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > GetAllUsersWithHttpInfo (string xApiKey, bool? isEnabled = null, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->GetAllUsers");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isEnabled", isEnabled)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get all users Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetAllUsersAsync (string xApiKey, bool? isEnabled = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<User>> localVarResponse = await GetAllUsersAsyncWithHttpInfo(xApiKey, isEnabled, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all users Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiKey"></param>
        /// <param name="isEnabled"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> GetAllUsersAsyncWithHttpInfo (string xApiKey, bool? isEnabled = null, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->GetAllUsers");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isEnabled", isEnabled)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get a user Get a specific user&#39;s details.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>User</returns>
        public User GetUserById (string userId, string xApiKey)
        {
             ApiResponse<User> localVarResponse = GetUserByIdWithHttpInfo(userId, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user Get a specific user&#39;s details.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUserByIdWithHttpInfo (string userId, string xApiKey)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUserById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->GetUserById");

            var localVarPath = "/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a user Get a specific user&#39;s details.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserByIdAsync (string userId, string xApiKey)
        {
             ApiResponse<User> localVarResponse = await GetUserByIdAsyncWithHttpInfo(userId, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user Get a specific user&#39;s details.                Requires the User Admin Role.
        /// </summary>
        /// <exception cref="mantle.lib.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="xApiKey"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUserByIdAsyncWithHttpInfo (string userId, string xApiKey)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUserById");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling UsersApi->GetUserById");

            var localVarPath = "/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

    }
}
