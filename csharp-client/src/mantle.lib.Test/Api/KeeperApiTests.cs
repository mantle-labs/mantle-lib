/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using mantle.lib.Client;
using mantle.lib.Api;
using mantle.lib.Model;

namespace mantle.lib.Test
{
    /// <summary>
    ///  Class for testing KeeperApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class KeeperApiTests
    {
        private KeeperApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new KeeperApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of KeeperApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' KeeperApi
            //Assert.IsInstanceOfType(typeof(KeeperApi), instance, "instance is a KeeperApi");
        }

        
        /// <summary>
        /// Test CompareVersion
        /// </summary>
        [Test]
        public void CompareVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //string versionId = null;
            //System.IO.Stream file = null;
            //string productId = null;
            //string xApiKey = null;
            //bool? mustGenerateCompareResult = null;
            //var response = instance.CompareVersion(fileId, versionId, file, productId, xApiKey, mustGenerateCompareResult);
            //Assert.IsInstanceOf<BreadcrumbingCompareResponse> (response, "response is BreadcrumbingCompareResponse");
        }
        
        /// <summary>
        /// Test CompareWithLatestFileVersion
        /// </summary>
        [Test]
        public void CompareWithLatestFileVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //System.IO.Stream file = null;
            //string productId = null;
            //string xApiKey = null;
            //bool? mustGenerateCompareResult = null;
            //var response = instance.CompareWithLatestFileVersion(fileId, file, productId, xApiKey, mustGenerateCompareResult);
            //Assert.IsInstanceOf<BreadcrumbingCompareResponse> (response, "response is BreadcrumbingCompareResponse");
        }
        
        /// <summary>
        /// Test CompareWithOriginalFile
        /// </summary>
        [Test]
        public void CompareWithOriginalFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //System.IO.Stream file = null;
            //string productId = null;
            //string xApiKey = null;
            //bool? mustGenerateCompareResult = null;
            //var response = instance.CompareWithOriginalFile(fileId, file, productId, xApiKey, mustGenerateCompareResult);
            //Assert.IsInstanceOf<BreadcrumbingCompareResponse> (response, "response is BreadcrumbingCompareResponse");
        }
        
        /// <summary>
        /// Test CreateFile
        /// </summary>
        [Test]
        public void CreateFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accuracy = null;
            //System.IO.Stream file = null;
            //string displayName = null;
            //string productId = null;
            //string xApiKey = null;
            //string folderId = null;
            //var response = instance.CreateFile(accuracy, file, displayName, productId, xApiKey, folderId);
            //Assert.IsInstanceOf<KeeperFile> (response, "response is KeeperFile");
        }
        
        /// <summary>
        /// Test CreateFolder
        /// </summary>
        [Test]
        public void CreateFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //KeeperFolderCreateRequest request = null;
            //var response = instance.CreateFolder(productId, xApiKey, request);
            //Assert.IsInstanceOf<KeeperFolder> (response, "response is KeeperFolder");
        }
        
        /// <summary>
        /// Test CreateVersion
        /// </summary>
        [Test]
        public void CreateVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //System.IO.Stream file = null;
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.CreateVersion(fileId, file, productId, xApiKey);
            //Assert.IsInstanceOf<KeeperFileVersion> (response, "response is KeeperFileVersion");
        }
        
        /// <summary>
        /// Test DeleteFileById
        /// </summary>
        [Test]
        public void DeleteFileByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //string productId = null;
            //string xApiKey = null;
            //instance.DeleteFileById(fileId, productId, xApiKey);
            
        }
        
        /// <summary>
        /// Test DeleteFolder
        /// </summary>
        [Test]
        public void DeleteFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string folderId = null;
            //string xApiKey = null;
            //instance.DeleteFolder(productId, folderId, xApiKey);
            
        }
        
        /// <summary>
        /// Test DoesFileExist
        /// </summary>
        [Test]
        public void DoesFileExistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accuracy = null;
            //System.IO.Stream file = null;
            //string productId = null;
            //string xApiKey = null;
            //string folderId = null;
            //var response = instance.DoesFileExist(accuracy, file, productId, xApiKey, folderId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test GetAllFiles
        /// </summary>
        [Test]
        public void GetAllFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //string displayName = null;
            //int? limit = null;
            //int? offset = null;
            //string folderId = null;
            //var response = instance.GetAllFiles(productId, xApiKey, displayName, limit, offset, folderId);
            //Assert.IsInstanceOf<List<KeeperFile>> (response, "response is List<KeeperFile>");
        }
        
        /// <summary>
        /// Test GetAllFolders
        /// </summary>
        [Test]
        public void GetAllFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //string name = null;
            //var response = instance.GetAllFolders(productId, xApiKey, name);
            //Assert.IsInstanceOf<List<KeeperFolder>> (response, "response is List<KeeperFolder>");
        }
        
        /// <summary>
        /// Test GetAllVersions
        /// </summary>
        [Test]
        public void GetAllVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.GetAllVersions(fileId, productId, xApiKey);
            //Assert.IsInstanceOf<List<KeeperFileVersion>> (response, "response is List<KeeperFileVersion>");
        }
        
        /// <summary>
        /// Test GetFileById
        /// </summary>
        [Test]
        public void GetFileByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.GetFileById(fileId, productId, xApiKey);
            //Assert.IsInstanceOf<KeeperFile> (response, "response is KeeperFile");
        }
        
        /// <summary>
        /// Test GetFolderById
        /// </summary>
        [Test]
        public void GetFolderByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string folderId = null;
            //string xApiKey = null;
            //var response = instance.GetFolderById(productId, folderId, xApiKey);
            //Assert.IsInstanceOf<KeeperFolder> (response, "response is KeeperFolder");
        }
        
        /// <summary>
        /// Test GetLinkToDownloadOriginalFile
        /// </summary>
        [Test]
        public void GetLinkToDownloadOriginalFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileId = null;
            //string productId = null;
            //string xApiKey = null;
            //string originalFileId = null;
            //var response = instance.GetLinkToDownloadOriginalFile(fileId, productId, xApiKey, originalFileId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
