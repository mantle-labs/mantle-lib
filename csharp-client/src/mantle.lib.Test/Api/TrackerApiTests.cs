/* 
 * Mantle API
 *
 * Most endpoints require authentication with an <strong>API key</strong><br><br>                                         You must first authenticate with your account by logging in your account on <strong><a target='_blank' href='https://www.mantleblockchain.com'/>mantleblockchain.com</a></strong>.<br>                                         Then, you will need to navigate to the <strong>My API Key</strong> page in the Settings section.<br>                                         You need to have the role administrator of your organization to generate an <strong>API Key</strong>.<br><br>                                         Then use this <strong>API Key</strong> in all your requests with the following header:<br><br>                                         <strong>[ x-api-key: API_KEY ]</strong><br><br>For more information on the different product and more, you can refer to the <a target='_blank' href='https://docs.mantleblockchain.com/v1.0/documentation/home'><strong>knowledge base</strong></a>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using mantle.lib.Client;
using mantle.lib.Api;
using mantle.lib.Model;

namespace mantle.lib.Test
{
    /// <summary>
    ///  Class for testing TrackerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TrackerApiTests
    {
        private TrackerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TrackerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TrackerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TrackerApi
            //Assert.IsInstanceOfType(typeof(TrackerApi), instance, "instance is a TrackerApi");
        }

        
        /// <summary>
        /// Test CreateAsset
        /// </summary>
        [Test]
        public void CreateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //TrackerAssetCreateRequest request = null;
            //var response = instance.CreateAsset(productId, xApiKey, request);
            //Assert.IsInstanceOf<TrackerAsset> (response, "response is TrackerAsset");
        }
        
        /// <summary>
        /// Test CreateAssetBatchTransfer
        /// </summary>
        [Test]
        public void CreateAssetBatchTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //TrackerBatchTransferRequest request = null;
            //string ownedDisplayName = null;
            //instance.CreateAssetBatchTransfer(assetId, productId, xApiKey, request, ownedDisplayName);
            
        }
        
        /// <summary>
        /// Test CreateAssetTransfer
        /// </summary>
        [Test]
        public void CreateAssetTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //TrackerTransferRequest request = null;
            //string ownedDisplayName = null;
            //var response = instance.CreateAssetTransfer(assetId, productId, xApiKey, request, ownedDisplayName);
            //Assert.IsInstanceOf<List<AssetTransaction>> (response, "response is List<AssetTransaction>");
        }
        
        /// <summary>
        /// Test CreateAssetTransferBulk
        /// </summary>
        [Test]
        public void CreateAssetTransferBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //List<TrackerBatchTransferBulkRequest> requests = null;
            //string ownedId = null;
            //var response = instance.CreateAssetTransferBulk(productId, xApiKey, requests, ownedId);
            //Assert.IsInstanceOf<List<TrackerBatchTransferBulkResponse>> (response, "response is List<TrackerBatchTransferBulkResponse>");
        }
        
        /// <summary>
        /// Test CreateEntity
        /// </summary>
        [Test]
        public void CreateEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //CreateEntityRequest request = null;
            //var response = instance.CreateEntity(productId, xApiKey, request);
            //Assert.IsInstanceOf<NonUser> (response, "response is NonUser");
        }
        
        /// <summary>
        /// Test CreateMultiAsset
        /// </summary>
        [Test]
        public void CreateMultiAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //TrackerMultiAssetCreateRequest request = null;
            //var response = instance.CreateMultiAsset(productId, xApiKey, request);
            //Assert.IsInstanceOf<TrackerMultiAsset> (response, "response is TrackerMultiAsset");
        }
        
        /// <summary>
        /// Test CreateMultiAssetBatchTransfer
        /// </summary>
        [Test]
        public void CreateMultiAssetBatchTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //TrackerBatchTransferRequest request = null;
            //string ownedDisplayName = null;
            //instance.CreateMultiAssetBatchTransfer(assetId, productId, xApiKey, request, ownedDisplayName);
            
        }
        
        /// <summary>
        /// Test CreateMultiAssetTransfer
        /// </summary>
        [Test]
        public void CreateMultiAssetTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //TrackerTransferRequest request = null;
            //string ownedDisplayName = null;
            //var response = instance.CreateMultiAssetTransfer(assetId, productId, xApiKey, request, ownedDisplayName);
            //Assert.IsInstanceOf<List<AssetTransaction>> (response, "response is List<AssetTransaction>");
        }
        
        /// <summary>
        /// Test DeleteAsset
        /// </summary>
        [Test]
        public void DeleteAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //instance.DeleteAsset(assetId, productId, xApiKey);
            
        }
        
        /// <summary>
        /// Test DeleteEntity
        /// </summary>
        [Test]
        public void DeleteEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string productId = null;
            //string xApiKey = null;
            //instance.DeleteEntity(id, productId, xApiKey);
            
        }
        
        /// <summary>
        /// Test DeleteMultiAsset
        /// </summary>
        [Test]
        public void DeleteMultiAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //instance.DeleteMultiAsset(assetId, productId, xApiKey);
            
        }
        
        /// <summary>
        /// Test EditAsset
        /// </summary>
        [Test]
        public void EditAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //TrackerAssetCreateRequest request = null;
            //instance.EditAsset(assetId, productId, xApiKey, request);
            
        }
        
        /// <summary>
        /// Test EditEntity
        /// </summary>
        [Test]
        public void EditEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string productId = null;
            //string xApiKey = null;
            //UpdateEntityRequest request = null;
            //instance.EditEntity(id, productId, xApiKey, request);
            
        }
        
        /// <summary>
        /// Test EditMultiAsset
        /// </summary>
        [Test]
        public void EditMultiAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //TrackerAssetCreateRequest request = null;
            //instance.EditMultiAsset(assetId, productId, xApiKey, request);
            
        }
        
        /// <summary>
        /// Test GetAllAssets
        /// </summary>
        [Test]
        public void GetAllAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //int? limit = null;
            //int? offset = null;
            //string assetDisplayNames = null;
            //var response = instance.GetAllAssets(productId, xApiKey, limit, offset, assetDisplayNames);
            //Assert.IsInstanceOf<List<TrackerAsset>> (response, "response is List<TrackerAsset>");
        }
        
        /// <summary>
        /// Test GetAllMultiAssets
        /// </summary>
        [Test]
        public void GetAllMultiAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //DateTime? beforeDateTime = null;
            //int? limit = null;
            //int? offset = null;
            //string assetIds = null;
            //var response = instance.GetAllMultiAssets(productId, xApiKey, beforeDateTime, limit, offset, assetIds);
            //Assert.IsInstanceOf<List<TrackerMultiAsset>> (response, "response is List<TrackerMultiAsset>");
        }
        
        /// <summary>
        /// Test GetAllTransactions
        /// </summary>
        [Test]
        public void GetAllTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //DateTime? beforeDateTime = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.GetAllTransactions(productId, xApiKey, beforeDateTime, limit, offset);
            //Assert.IsInstanceOf<List<AssetTransaction>> (response, "response is List<AssetTransaction>");
        }
        
        /// <summary>
        /// Test GetAssetById
        /// </summary>
        [Test]
        public void GetAssetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.GetAssetById(assetId, productId, xApiKey);
            //Assert.IsInstanceOf<TrackerAsset> (response, "response is TrackerAsset");
        }
        
        /// <summary>
        /// Test GetAssetDetailedBalance
        /// </summary>
        [Test]
        public void GetAssetDetailedBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //string ownedDisplayName = null;
            //var response = instance.GetAssetDetailedBalance(assetId, productId, xApiKey, ownedDisplayName);
            //Assert.IsInstanceOf<List<Batch>> (response, "response is List<Batch>");
        }
        
        /// <summary>
        /// Test GetAssetIssuedBatchTransactions
        /// </summary>
        [Test]
        public void GetAssetIssuedBatchTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string batchId = null;
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.GetAssetIssuedBatchTransactions(assetId, batchId, productId, xApiKey);
            //Assert.IsInstanceOf<IssuedBatchTransactionsResponse> (response, "response is IssuedBatchTransactionsResponse");
        }
        
        /// <summary>
        /// Test GetAssetIssuedBatches
        /// </summary>
        [Test]
        public void GetAssetIssuedBatchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //string sortBy = null;
            //string sort = null;
            //var response = instance.GetAssetIssuedBatches(assetId, productId, xApiKey, sortBy, sort);
            //Assert.IsInstanceOf<IssuedBatchesResponse> (response, "response is IssuedBatchesResponse");
        }
        
        /// <summary>
        /// Test GetBalances
        /// </summary>
        [Test]
        public void GetBalancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //string ownedDisplayName = null;
            //var response = instance.GetBalances(productId, xApiKey, ownedDisplayName);
            //Assert.IsInstanceOf<List<AssetBalance>> (response, "response is List<AssetBalance>");
        }
        
        /// <summary>
        /// Test GetMultiAssetById
        /// </summary>
        [Test]
        public void GetMultiAssetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.GetMultiAssetById(assetId, productId, xApiKey);
            //Assert.IsInstanceOf<TrackerMultiAsset> (response, "response is TrackerMultiAsset");
        }
        
        /// <summary>
        /// Test GetMultiAssetIssuedBatchTransactions
        /// </summary>
        [Test]
        public void GetMultiAssetIssuedBatchTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string batchId = null;
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.GetMultiAssetIssuedBatchTransactions(assetId, batchId, productId, xApiKey);
            //Assert.IsInstanceOf<IssuedBatchTransactionsResponse> (response, "response is IssuedBatchTransactionsResponse");
        }
        
        /// <summary>
        /// Test GetMultiAssetIssuedBatches
        /// </summary>
        [Test]
        public void GetMultiAssetIssuedBatchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.GetMultiAssetIssuedBatches(assetId, productId, xApiKey);
            //Assert.IsInstanceOf<IssuedBatchesResponse> (response, "response is IssuedBatchesResponse");
        }
        
        /// <summary>
        /// Test GetOwnedIdentities
        /// </summary>
        [Test]
        public void GetOwnedIdentitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.GetOwnedIdentities(productId, xApiKey);
            //Assert.IsInstanceOf<List<NonUserResponse>> (response, "response is List<NonUserResponse>");
        }
        
        /// <summary>
        /// Test GetTransactionsByAssetId
        /// </summary>
        [Test]
        public void GetTransactionsByAssetIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.GetTransactionsByAssetId(assetId, productId, xApiKey);
            //Assert.IsInstanceOf<List<AssetTransaction>> (response, "response is List<AssetTransaction>");
        }
        
        /// <summary>
        /// Test GetTransactionsByMultiAssetId
        /// </summary>
        [Test]
        public void GetTransactionsByMultiAssetIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //var response = instance.GetTransactionsByMultiAssetId(assetId, productId, xApiKey);
            //Assert.IsInstanceOf<List<AssetTransaction>> (response, "response is List<AssetTransaction>");
        }
        
        /// <summary>
        /// Test IssueAsset
        /// </summary>
        [Test]
        public void IssueAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //TrackerAssetIssueRequest request = null;
            //var response = instance.IssueAsset(assetId, productId, xApiKey, request);
            //Assert.IsInstanceOf<AssetIssueResponse> (response, "response is AssetIssueResponse");
        }
        
        /// <summary>
        /// Test IssueAssetBulk
        /// </summary>
        [Test]
        public void IssueAssetBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //List<TrackerAssetIssueBulkRequest> requests = null;
            //var response = instance.IssueAssetBulk(productId, xApiKey, requests);
            //Assert.IsInstanceOf<List<TrackerAssetIssueResponse>> (response, "response is List<TrackerAssetIssueResponse>");
        }
        
        /// <summary>
        /// Test IssueMultiAsset
        /// </summary>
        [Test]
        public void IssueMultiAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assetId = null;
            //string productId = null;
            //string xApiKey = null;
            //TrackerAssetIssueRequest request = null;
            //instance.IssueMultiAsset(assetId, productId, xApiKey, request);
            
        }
        
        /// <summary>
        /// Test IssueMultiAssetBulk
        /// </summary>
        [Test]
        public void IssueMultiAssetBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string xApiKey = null;
            //List<TrackerAssetIssueBulkRequest> requests = null;
            //var response = instance.IssueMultiAssetBulk(productId, xApiKey, requests);
            //Assert.IsInstanceOf<List<TrackerAssetIssueResponse>> (response, "response is List<TrackerAssetIssueResponse>");
        }
        
        /// <summary>
        /// Test Reverse
        /// </summary>
        [Test]
        public void ReverseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionId = null;
            //string productId = null;
            //string xApiKey = null;
            //instance.Reverse(transactionId, productId, xApiKey);
            
        }
        
    }

}
